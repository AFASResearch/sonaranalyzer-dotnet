{
"version":  "0.1",
"toolInfo":  {
"toolName":  "Microsoft (R) Visual C# Compiler",
"productVersion":  "1.1.0",
"fileVersion":  "1.1.0"
},
"issues":  [
{
"ruleId":  "S2930",
"locations":  [
{
"analysisTarget":  [
{
"uri":  "Nancy\\src\\Nancy.Tests\\Extensions\\ResponseExtensions.cs",
"region":  {
"startLine":  8,
"startColumn":  16,
"endLine":  8,
"endColumn":  22
}
}
]
}
],
"shortMessage":  "\"Dispose\" of \"memory\".",
"fullMessage":  "You can\u0027t rely on garbage collection to clean up everything. Specifically, you can\u0027t count on it to release non-memory resources such as \"File\"s. For that, there\u0027s the \"IDisposable\" interface, and the contract that \"Dispose\" will always be called on such objects. When an \"IDisposable\" is a class member, then it\u0027s up to that class to call \"Dispose\" on it, ideally in its own \"Dispose\" method. If it\u0027s a local variable, then it should be instantiated with a \"using\" clause to prompt automatic cleanup when it goes out of scope.",
"properties":  {
"severity":  "Warning",
"warningLevel":  "1",
"defaultSeverity":  "Warning",
"title":  "\"IDisposables\" should be disposed",
"category":  "Reliability",
"helpLink":  "http://vs.sonarlint.org/rules/index.html#version=1.7.0\u0026ruleId=S2930",
"isEnabledByDefault":  "True",
"isSuppressedInSource":  "False"
}
},
{
"ruleId":  "S2930",
"locations":  [
{
"analysisTarget":  [
{
"uri":  "Nancy\\src\\Nancy.Tests\\Helpers\\CacheHelpersFixture.cs",
"region":  {
"startLine":  84,
"startColumn":  16,
"endLine":  84,
"endColumn":  23
}
}
]
}
],
"shortMessage":  "\"Dispose\" of \"request\".",
"fullMessage":  "You can\u0027t rely on garbage collection to clean up everything. Specifically, you can\u0027t count on it to release non-memory resources such as \"File\"s. For that, there\u0027s the \"IDisposable\" interface, and the contract that \"Dispose\" will always be called on such objects. When an \"IDisposable\" is a class member, then it\u0027s up to that class to call \"Dispose\" on it, ideally in its own \"Dispose\" method. If it\u0027s a local variable, then it should be instantiated with a \"using\" clause to prompt automatic cleanup when it goes out of scope.",
"properties":  {
"severity":  "Warning",
"warningLevel":  "1",
"defaultSeverity":  "Warning",
"title":  "\"IDisposables\" should be disposed",
"category":  "Reliability",
"helpLink":  "http://vs.sonarlint.org/rules/index.html#version=1.7.0\u0026ruleId=S2930",
"isEnabledByDefault":  "True",
"isSuppressedInSource":  "False"
}
},
{
"ruleId":  "S2930",
"locations":  [
{
"analysisTarget":  [
{
"uri":  "Nancy\\src\\Nancy.Tests\\NoAppStartupsFixture.cs",
"region":  {
"startLine":  63,
"startColumn":  20,
"endLine":  63,
"endColumn":  32
}
}
]
}
],
"shortMessage":  "\"Dispose\" of \"bootstrapper\".",
"fullMessage":  "You can\u0027t rely on garbage collection to clean up everything. Specifically, you can\u0027t count on it to release non-memory resources such as \"File\"s. For that, there\u0027s the \"IDisposable\" interface, and the contract that \"Dispose\" will always be called on such objects. When an \"IDisposable\" is a class member, then it\u0027s up to that class to call \"Dispose\" on it, ideally in its own \"Dispose\" method. If it\u0027s a local variable, then it should be instantiated with a \"using\" clause to prompt automatic cleanup when it goes out of scope.",
"properties":  {
"severity":  "Warning",
"warningLevel":  "1",
"defaultSeverity":  "Warning",
"title":  "\"IDisposables\" should be disposed",
"category":  "Reliability",
"helpLink":  "http://vs.sonarlint.org/rules/index.html#version=1.7.0\u0026ruleId=S2930",
"isEnabledByDefault":  "True",
"isSuppressedInSource":  "False"
}
},
{
"ruleId":  "S2930",
"locations":  [
{
"analysisTarget":  [
{
"uri":  "Nancy\\src\\Nancy.Tests\\NoAppStartupsFixture.cs",
"region":  {
"startLine":  82,
"startColumn":  16,
"endLine":  82,
"endColumn":  28
}
}
]
}
],
"shortMessage":  "\"Dispose\" of \"bootstrapper\".",
"fullMessage":  "You can\u0027t rely on garbage collection to clean up everything. Specifically, you can\u0027t count on it to release non-memory resources such as \"File\"s. For that, there\u0027s the \"IDisposable\" interface, and the contract that \"Dispose\" will always be called on such objects. When an \"IDisposable\" is a class member, then it\u0027s up to that class to call \"Dispose\" on it, ideally in its own \"Dispose\" method. If it\u0027s a local variable, then it should be instantiated with a \"using\" clause to prompt automatic cleanup when it goes out of scope.",
"properties":  {
"severity":  "Warning",
"warningLevel":  "1",
"defaultSeverity":  "Warning",
"title":  "\"IDisposables\" should be disposed",
"category":  "Reliability",
"helpLink":  "http://vs.sonarlint.org/rules/index.html#version=1.7.0\u0026ruleId=S2930",
"isEnabledByDefault":  "True",
"isSuppressedInSource":  "False"
}
},
{
"ruleId":  "S2930",
"locations":  [
{
"analysisTarget":  [
{
"uri":  "Nancy\\src\\Nancy.Tests\\Responses\\MaterialisingResponseFixture.cs",
"region":  {
"startLine":  12,
"startColumn":  16,
"endLine":  12,
"endColumn":  30
}
}
]
}
],
"shortMessage":  "\"Dispose\" of \"sourceResponse\".",
"fullMessage":  "You can\u0027t rely on garbage collection to clean up everything. Specifically, you can\u0027t count on it to release non-memory resources such as \"File\"s. For that, there\u0027s the \"IDisposable\" interface, and the contract that \"Dispose\" will always be called on such objects. When an \"IDisposable\" is a class member, then it\u0027s up to that class to call \"Dispose\" on it, ideally in its own \"Dispose\" method. If it\u0027s a local variable, then it should be instantiated with a \"using\" clause to prompt automatic cleanup when it goes out of scope.",
"properties":  {
"severity":  "Warning",
"warningLevel":  "1",
"defaultSeverity":  "Warning",
"title":  "\"IDisposables\" should be disposed",
"category":  "Reliability",
"helpLink":  "http://vs.sonarlint.org/rules/index.html#version=1.7.0\u0026ruleId=S2930",
"isEnabledByDefault":  "True",
"isSuppressedInSource":  "False"
}
},
{
"ruleId":  "S2930",
"locations":  [
{
"analysisTarget":  [
{
"uri":  "Nancy\\src\\Nancy.Tests\\Responses\\MaterialisingResponseFixture.cs",
"region":  {
"startLine":  13,
"startColumn":  16,
"endLine":  13,
"endColumn":  24
}
}
]
}
],
"shortMessage":  "\"Dispose\" of \"response\".",
"fullMessage":  "You can\u0027t rely on garbage collection to clean up everything. Specifically, you can\u0027t count on it to release non-memory resources such as \"File\"s. For that, there\u0027s the \"IDisposable\" interface, and the contract that \"Dispose\" will always be called on such objects. When an \"IDisposable\" is a class member, then it\u0027s up to that class to call \"Dispose\" on it, ideally in its own \"Dispose\" method. If it\u0027s a local variable, then it should be instantiated with a \"using\" clause to prompt automatic cleanup when it goes out of scope.",
"properties":  {
"severity":  "Warning",
"warningLevel":  "1",
"defaultSeverity":  "Warning",
"title":  "\"IDisposables\" should be disposed",
"category":  "Reliability",
"helpLink":  "http://vs.sonarlint.org/rules/index.html#version=1.7.0\u0026ruleId=S2930",
"isEnabledByDefault":  "True",
"isSuppressedInSource":  "False"
}
},
{
"ruleId":  "S2930",
"locations":  [
{
"analysisTarget":  [
{
"uri":  "Nancy\\src\\Nancy.Tests\\Responses\\MaterialisingResponseFixture.cs",
"region":  {
"startLine":  27,
"startColumn":  16,
"endLine":  27,
"endColumn":  30
}
}
]
}
],
"shortMessage":  "\"Dispose\" of \"sourceResponse\".",
"fullMessage":  "You can\u0027t rely on garbage collection to clean up everything. Specifically, you can\u0027t count on it to release non-memory resources such as \"File\"s. For that, there\u0027s the \"IDisposable\" interface, and the contract that \"Dispose\" will always be called on such objects. When an \"IDisposable\" is a class member, then it\u0027s up to that class to call \"Dispose\" on it, ideally in its own \"Dispose\" method. If it\u0027s a local variable, then it should be instantiated with a \"using\" clause to prompt automatic cleanup when it goes out of scope.",
"properties":  {
"severity":  "Warning",
"warningLevel":  "1",
"defaultSeverity":  "Warning",
"title":  "\"IDisposables\" should be disposed",
"category":  "Reliability",
"helpLink":  "http://vs.sonarlint.org/rules/index.html#version=1.7.0\u0026ruleId=S2930",
"isEnabledByDefault":  "True",
"isSuppressedInSource":  "False"
}
},
{
"ruleId":  "S2930",
"locations":  [
{
"analysisTarget":  [
{
"uri":  "Nancy\\src\\Nancy.Tests\\Responses\\MaterialisingResponseFixture.cs",
"region":  {
"startLine":  28,
"startColumn":  16,
"endLine":  28,
"endColumn":  24
}
}
]
}
],
"shortMessage":  "\"Dispose\" of \"response\".",
"fullMessage":  "You can\u0027t rely on garbage collection to clean up everything. Specifically, you can\u0027t count on it to release non-memory resources such as \"File\"s. For that, there\u0027s the \"IDisposable\" interface, and the contract that \"Dispose\" will always be called on such objects. When an \"IDisposable\" is a class member, then it\u0027s up to that class to call \"Dispose\" on it, ideally in its own \"Dispose\" method. If it\u0027s a local variable, then it should be instantiated with a \"using\" clause to prompt automatic cleanup when it goes out of scope.",
"properties":  {
"severity":  "Warning",
"warningLevel":  "1",
"defaultSeverity":  "Warning",
"title":  "\"IDisposables\" should be disposed",
"category":  "Reliability",
"helpLink":  "http://vs.sonarlint.org/rules/index.html#version=1.7.0\u0026ruleId=S2930",
"isEnabledByDefault":  "True",
"isSuppressedInSource":  "False"
}
},
{
"ruleId":  "S2930",
"locations":  [
{
"analysisTarget":  [
{
"uri":  "Nancy\\src\\Nancy.Tests\\Responses\\MaterialisingResponseFixture.cs",
"region":  {
"startLine":  44,
"startColumn":  16,
"endLine":  44,
"endColumn":  30
}
}
]
}
],
"shortMessage":  "\"Dispose\" of \"sourceResponse\".",
"fullMessage":  "You can\u0027t rely on garbage collection to clean up everything. Specifically, you can\u0027t count on it to release non-memory resources such as \"File\"s. For that, there\u0027s the \"IDisposable\" interface, and the contract that \"Dispose\" will always be called on such objects. When an \"IDisposable\" is a class member, then it\u0027s up to that class to call \"Dispose\" on it, ideally in its own \"Dispose\" method. If it\u0027s a local variable, then it should be instantiated with a \"using\" clause to prompt automatic cleanup when it goes out of scope.",
"properties":  {
"severity":  "Warning",
"warningLevel":  "1",
"defaultSeverity":  "Warning",
"title":  "\"IDisposables\" should be disposed",
"category":  "Reliability",
"helpLink":  "http://vs.sonarlint.org/rules/index.html#version=1.7.0\u0026ruleId=S2930",
"isEnabledByDefault":  "True",
"isSuppressedInSource":  "False"
}
},
{
"ruleId":  "S2930",
"locations":  [
{
"analysisTarget":  [
{
"uri":  "Nancy\\src\\Nancy.Tests\\Responses\\MaterialisingResponseFixture.cs",
"region":  {
"startLine":  45,
"startColumn":  16,
"endLine":  45,
"endColumn":  24
}
}
]
}
],
"shortMessage":  "\"Dispose\" of \"response\".",
"fullMessage":  "You can\u0027t rely on garbage collection to clean up everything. Specifically, you can\u0027t count on it to release non-memory resources such as \"File\"s. For that, there\u0027s the \"IDisposable\" interface, and the contract that \"Dispose\" will always be called on such objects. When an \"IDisposable\" is a class member, then it\u0027s up to that class to call \"Dispose\" on it, ideally in its own \"Dispose\" method. If it\u0027s a local variable, then it should be instantiated with a \"using\" clause to prompt automatic cleanup when it goes out of scope.",
"properties":  {
"severity":  "Warning",
"warningLevel":  "1",
"defaultSeverity":  "Warning",
"title":  "\"IDisposables\" should be disposed",
"category":  "Reliability",
"helpLink":  "http://vs.sonarlint.org/rules/index.html#version=1.7.0\u0026ruleId=S2930",
"isEnabledByDefault":  "True",
"isSuppressedInSource":  "False"
}
},
{
"ruleId":  "S2930",
"locations":  [
{
"analysisTarget":  [
{
"uri":  "Nancy\\src\\Nancy.Tests\\Unit\\Bootstrapper\\Base\\ModuleCatalogFixtureBase.cs",
"region":  {
"startLine":  31,
"startColumn":  16,
"endLine":  31,
"endColumn":  24
}
}
]
}
],
"shortMessage":  "\"Dispose\" of \"context1\".",
"fullMessage":  "You can\u0027t rely on garbage collection to clean up everything. Specifically, you can\u0027t count on it to release non-memory resources such as \"File\"s. For that, there\u0027s the \"IDisposable\" interface, and the contract that \"Dispose\" will always be called on such objects. When an \"IDisposable\" is a class member, then it\u0027s up to that class to call \"Dispose\" on it, ideally in its own \"Dispose\" method. If it\u0027s a local variable, then it should be instantiated with a \"using\" clause to prompt automatic cleanup when it goes out of scope.",
"properties":  {
"severity":  "Warning",
"warningLevel":  "1",
"defaultSeverity":  "Warning",
"title":  "\"IDisposables\" should be disposed",
"category":  "Reliability",
"helpLink":  "http://vs.sonarlint.org/rules/index.html#version=1.7.0\u0026ruleId=S2930",
"isEnabledByDefault":  "True",
"isSuppressedInSource":  "False"
}
},
{
"ruleId":  "S2930",
"locations":  [
{
"analysisTarget":  [
{
"uri":  "Nancy\\src\\Nancy.Tests\\Unit\\Bootstrapper\\Base\\ModuleCatalogFixtureBase.cs",
"region":  {
"startLine":  32,
"startColumn":  16,
"endLine":  32,
"endColumn":  24
}
}
]
}
],
"shortMessage":  "\"Dispose\" of \"context2\".",
"fullMessage":  "You can\u0027t rely on garbage collection to clean up everything. Specifically, you can\u0027t count on it to release non-memory resources such as \"File\"s. For that, there\u0027s the \"IDisposable\" interface, and the contract that \"Dispose\" will always be called on such objects. When an \"IDisposable\" is a class member, then it\u0027s up to that class to call \"Dispose\" on it, ideally in its own \"Dispose\" method. If it\u0027s a local variable, then it should be instantiated with a \"using\" clause to prompt automatic cleanup when it goes out of scope.",
"properties":  {
"severity":  "Warning",
"warningLevel":  "1",
"defaultSeverity":  "Warning",
"title":  "\"IDisposables\" should be disposed",
"category":  "Reliability",
"helpLink":  "http://vs.sonarlint.org/rules/index.html#version=1.7.0\u0026ruleId=S2930",
"isEnabledByDefault":  "True",
"isSuppressedInSource":  "False"
}
},
{
"ruleId":  "S2930",
"locations":  [
{
"analysisTarget":  [
{
"uri":  "Nancy\\src\\Nancy.Tests\\Unit\\Bootstrapper\\Base\\ModuleCatalogFixtureBase.cs",
"region":  {
"startLine":  44,
"startColumn":  16,
"endLine":  44,
"endColumn":  24
}
}
]
}
],
"shortMessage":  "\"Dispose\" of \"context1\".",
"fullMessage":  "You can\u0027t rely on garbage collection to clean up everything. Specifically, you can\u0027t count on it to release non-memory resources such as \"File\"s. For that, there\u0027s the \"IDisposable\" interface, and the contract that \"Dispose\" will always be called on such objects. When an \"IDisposable\" is a class member, then it\u0027s up to that class to call \"Dispose\" on it, ideally in its own \"Dispose\" method. If it\u0027s a local variable, then it should be instantiated with a \"using\" clause to prompt automatic cleanup when it goes out of scope.",
"properties":  {
"severity":  "Warning",
"warningLevel":  "1",
"defaultSeverity":  "Warning",
"title":  "\"IDisposables\" should be disposed",
"category":  "Reliability",
"helpLink":  "http://vs.sonarlint.org/rules/index.html#version=1.7.0\u0026ruleId=S2930",
"isEnabledByDefault":  "True",
"isSuppressedInSource":  "False"
}
},
{
"ruleId":  "S2930",
"locations":  [
{
"analysisTarget":  [
{
"uri":  "Nancy\\src\\Nancy.Tests\\Unit\\Bootstrapper\\Base\\ModuleCatalogFixtureBase.cs",
"region":  {
"startLine":  45,
"startColumn":  16,
"endLine":  45,
"endColumn":  24
}
}
]
}
],
"shortMessage":  "\"Dispose\" of \"context2\".",
"fullMessage":  "You can\u0027t rely on garbage collection to clean up everything. Specifically, you can\u0027t count on it to release non-memory resources such as \"File\"s. For that, there\u0027s the \"IDisposable\" interface, and the contract that \"Dispose\" will always be called on such objects. When an \"IDisposable\" is a class member, then it\u0027s up to that class to call \"Dispose\" on it, ideally in its own \"Dispose\" method. If it\u0027s a local variable, then it should be instantiated with a \"using\" clause to prompt automatic cleanup when it goes out of scope.",
"properties":  {
"severity":  "Warning",
"warningLevel":  "1",
"defaultSeverity":  "Warning",
"title":  "\"IDisposables\" should be disposed",
"category":  "Reliability",
"helpLink":  "http://vs.sonarlint.org/rules/index.html#version=1.7.0\u0026ruleId=S2930",
"isEnabledByDefault":  "True",
"isSuppressedInSource":  "False"
}
},
{
"ruleId":  "S2930",
"locations":  [
{
"analysisTarget":  [
{
"uri":  "Nancy\\src\\Nancy.Tests\\Unit\\Bootstrapper\\NancyBootstrapperBaseFixture.cs",
"region":  {
"startLine":  83,
"startColumn":  16,
"endLine":  83,
"endColumn":  33
}
}
]
}
],
"shortMessage":  "\"Dispose\" of \"localBootstrapper\".",
"fullMessage":  "You can\u0027t rely on garbage collection to clean up everything. Specifically, you can\u0027t count on it to release non-memory resources such as \"File\"s. For that, there\u0027s the \"IDisposable\" interface, and the contract that \"Dispose\" will always be called on such objects. When an \"IDisposable\" is a class member, then it\u0027s up to that class to call \"Dispose\" on it, ideally in its own \"Dispose\" method. If it\u0027s a local variable, then it should be instantiated with a \"using\" clause to prompt automatic cleanup when it goes out of scope.",
"properties":  {
"severity":  "Warning",
"warningLevel":  "1",
"defaultSeverity":  "Warning",
"title":  "\"IDisposables\" should be disposed",
"category":  "Reliability",
"helpLink":  "http://vs.sonarlint.org/rules/index.html#version=1.7.0\u0026ruleId=S2930",
"isEnabledByDefault":  "True",
"isSuppressedInSource":  "False"
}
},
{
"ruleId":  "S2930",
"locations":  [
{
"analysisTarget":  [
{
"uri":  "Nancy\\src\\Nancy.Tests\\Unit\\Bootstrapper\\NancyBootstrapperBaseFixture.cs",
"region":  {
"startLine":  200,
"startColumn":  16,
"endLine":  200,
"endColumn":  30
}
}
]
}
],
"shortMessage":  "\"Dispose\" of \"favIconRequest\".",
"fullMessage":  "You can\u0027t rely on garbage collection to clean up everything. Specifically, you can\u0027t count on it to release non-memory resources such as \"File\"s. For that, there\u0027s the \"IDisposable\" interface, and the contract that \"Dispose\" will always be called on such objects. When an \"IDisposable\" is a class member, then it\u0027s up to that class to call \"Dispose\" on it, ideally in its own \"Dispose\" method. If it\u0027s a local variable, then it should be instantiated with a \"using\" clause to prompt automatic cleanup when it goes out of scope.",
"properties":  {
"severity":  "Warning",
"warningLevel":  "1",
"defaultSeverity":  "Warning",
"title":  "\"IDisposables\" should be disposed",
"category":  "Reliability",
"helpLink":  "http://vs.sonarlint.org/rules/index.html#version=1.7.0\u0026ruleId=S2930",
"isEnabledByDefault":  "True",
"isSuppressedInSource":  "False"
}
},
{
"ruleId":  "S2930",
"locations":  [
{
"analysisTarget":  [
{
"uri":  "Nancy\\src\\Nancy.Tests\\Unit\\Bootstrapper\\NancyBootstrapperBaseFixture.cs",
"region":  {
"startLine":  201,
"startColumn":  16,
"endLine":  201,
"endColumn":  23
}
}
]
}
],
"shortMessage":  "\"Dispose\" of \"context\".",
"fullMessage":  "You can\u0027t rely on garbage collection to clean up everything. Specifically, you can\u0027t count on it to release non-memory resources such as \"File\"s. For that, there\u0027s the \"IDisposable\" interface, and the contract that \"Dispose\" will always be called on such objects. When an \"IDisposable\" is a class member, then it\u0027s up to that class to call \"Dispose\" on it, ideally in its own \"Dispose\" method. If it\u0027s a local variable, then it should be instantiated with a \"using\" clause to prompt automatic cleanup when it goes out of scope.",
"properties":  {
"severity":  "Warning",
"warningLevel":  "1",
"defaultSeverity":  "Warning",
"title":  "\"IDisposables\" should be disposed",
"category":  "Reliability",
"helpLink":  "http://vs.sonarlint.org/rules/index.html#version=1.7.0\u0026ruleId=S2930",
"isEnabledByDefault":  "True",
"isSuppressedInSource":  "False"
}
},
{
"ruleId":  "S2930",
"locations":  [
{
"analysisTarget":  [
{
"uri":  "Nancy\\src\\Nancy.Tests\\Unit\\Bootstrapper\\NancyBootstrapperBaseFixture.cs",
"region":  {
"startLine":  240,
"startColumn":  16,
"endLine":  240,
"endColumn":  40
}
}
]
}
],
"shortMessage":  "\"Dispose\" of \"uninitialiedBootstrapper\".",
"fullMessage":  "You can\u0027t rely on garbage collection to clean up everything. Specifically, you can\u0027t count on it to release non-memory resources such as \"File\"s. For that, there\u0027s the \"IDisposable\" interface, and the contract that \"Dispose\" will always be called on such objects. When an \"IDisposable\" is a class member, then it\u0027s up to that class to call \"Dispose\" on it, ideally in its own \"Dispose\" method. If it\u0027s a local variable, then it should be instantiated with a \"using\" clause to prompt automatic cleanup when it goes out of scope.",
"properties":  {
"severity":  "Warning",
"warningLevel":  "1",
"defaultSeverity":  "Warning",
"title":  "\"IDisposables\" should be disposed",
"category":  "Reliability",
"helpLink":  "http://vs.sonarlint.org/rules/index.html#version=1.7.0\u0026ruleId=S2930",
"isEnabledByDefault":  "True",
"isSuppressedInSource":  "False"
}
},
{
"ruleId":  "S2930",
"locations":  [
{
"analysisTarget":  [
{
"uri":  "Nancy\\src\\Nancy.Tests\\Unit\\Bootstrapper\\NancyBootstrapperBaseFixture.cs",
"region":  {
"startLine":  256,
"startColumn":  16,
"endLine":  256,
"endColumn":  40
}
}
]
}
],
"shortMessage":  "\"Dispose\" of \"uninitialiedBootstrapper\".",
"fullMessage":  "You can\u0027t rely on garbage collection to clean up everything. Specifically, you can\u0027t count on it to release non-memory resources such as \"File\"s. For that, there\u0027s the \"IDisposable\" interface, and the contract that \"Dispose\" will always be called on such objects. When an \"IDisposable\" is a class member, then it\u0027s up to that class to call \"Dispose\" on it, ideally in its own \"Dispose\" method. If it\u0027s a local variable, then it should be instantiated with a \"using\" clause to prompt automatic cleanup when it goes out of scope.",
"properties":  {
"severity":  "Warning",
"warningLevel":  "1",
"defaultSeverity":  "Warning",
"title":  "\"IDisposables\" should be disposed",
"category":  "Reliability",
"helpLink":  "http://vs.sonarlint.org/rules/index.html#version=1.7.0\u0026ruleId=S2930",
"isEnabledByDefault":  "True",
"isSuppressedInSource":  "False"
}
},
{
"ruleId":  "S2930",
"locations":  [
{
"analysisTarget":  [
{
"uri":  "Nancy\\src\\Nancy.Tests\\Unit\\Bootstrapper\\NancyBootstrapperBaseFixture.cs",
"region":  {
"startLine":  275,
"startColumn":  16,
"endLine":  275,
"endColumn":  40
}
}
]
}
],
"shortMessage":  "\"Dispose\" of \"uninitialiedBootstrapper\".",
"fullMessage":  "You can\u0027t rely on garbage collection to clean up everything. Specifically, you can\u0027t count on it to release non-memory resources such as \"File\"s. For that, there\u0027s the \"IDisposable\" interface, and the contract that \"Dispose\" will always be called on such objects. When an \"IDisposable\" is a class member, then it\u0027s up to that class to call \"Dispose\" on it, ideally in its own \"Dispose\" method. If it\u0027s a local variable, then it should be instantiated with a \"using\" clause to prompt automatic cleanup when it goes out of scope.",
"properties":  {
"severity":  "Warning",
"warningLevel":  "1",
"defaultSeverity":  "Warning",
"title":  "\"IDisposables\" should be disposed",
"category":  "Reliability",
"helpLink":  "http://vs.sonarlint.org/rules/index.html#version=1.7.0\u0026ruleId=S2930",
"isEnabledByDefault":  "True",
"isSuppressedInSource":  "False"
}
},
{
"ruleId":  "S2930",
"locations":  [
{
"analysisTarget":  [
{
"uri":  "Nancy\\src\\Nancy.Tests\\Unit\\Bootstrapper\\NancyBootstrapperWithRequestContainerBaseFixture.cs",
"region":  {
"startLine":  19,
"startColumn":  42,
"endLine":  19,
"endColumn":  54
}
}
]
}
],
"shortMessage":  "\"Dispose\" of \"bootstrapper\".",
"fullMessage":  "You can\u0027t rely on garbage collection to clean up everything. Specifically, you can\u0027t count on it to release non-memory resources such as \"File\"s. For that, there\u0027s the \"IDisposable\" interface, and the contract that \"Dispose\" will always be called on such objects. When an \"IDisposable\" is a class member, then it\u0027s up to that class to call \"Dispose\" on it, ideally in its own \"Dispose\" method. If it\u0027s a local variable, then it should be instantiated with a \"using\" clause to prompt automatic cleanup when it goes out of scope.",
"properties":  {
"severity":  "Warning",
"warningLevel":  "1",
"defaultSeverity":  "Warning",
"title":  "\"IDisposables\" should be disposed",
"category":  "Reliability",
"helpLink":  "http://vs.sonarlint.org/rules/index.html#version=1.7.0\u0026ruleId=S2930",
"isEnabledByDefault":  "True",
"isSuppressedInSource":  "False"
}
},
{
"ruleId":  "S2930",
"locations":  [
{
"analysisTarget":  [
{
"uri":  "Nancy\\src\\Nancy.Tests\\Unit\\Bootstrapper\\NancyBootstrapperWithRequestContainerBaseFixture.cs",
"region":  {
"startLine":  61,
"startColumn":  16,
"endLine":  61,
"endColumn":  22
}
}
]
}
],
"shortMessage":  "\"Dispose\" of \"engine\".",
"fullMessage":  "You can\u0027t rely on garbage collection to clean up everything. Specifically, you can\u0027t count on it to release non-memory resources such as \"File\"s. For that, there\u0027s the \"IDisposable\" interface, and the contract that \"Dispose\" will always be called on such objects. When an \"IDisposable\" is a class member, then it\u0027s up to that class to call \"Dispose\" on it, ideally in its own \"Dispose\" method. If it\u0027s a local variable, then it should be instantiated with a \"using\" clause to prompt automatic cleanup when it goes out of scope.",
"properties":  {
"severity":  "Warning",
"warningLevel":  "1",
"defaultSeverity":  "Warning",
"title":  "\"IDisposables\" should be disposed",
"category":  "Reliability",
"helpLink":  "http://vs.sonarlint.org/rules/index.html#version=1.7.0\u0026ruleId=S2930",
"isEnabledByDefault":  "True",
"isSuppressedInSource":  "False"
}
},
{
"ruleId":  "S2930",
"locations":  [
{
"analysisTarget":  [
{
"uri":  "Nancy\\src\\Nancy.Tests\\Unit\\Bootstrapper\\NancyBootstrapperWithRequestContainerBaseFixture.cs",
"region":  {
"startLine":  109,
"startColumn":  16,
"endLine":  109,
"endColumn":  22
}
}
]
}
],
"shortMessage":  "\"Dispose\" of \"engine\".",
"fullMessage":  "You can\u0027t rely on garbage collection to clean up everything. Specifically, you can\u0027t count on it to release non-memory resources such as \"File\"s. For that, there\u0027s the \"IDisposable\" interface, and the contract that \"Dispose\" will always be called on such objects. When an \"IDisposable\" is a class member, then it\u0027s up to that class to call \"Dispose\" on it, ideally in its own \"Dispose\" method. If it\u0027s a local variable, then it should be instantiated with a \"using\" clause to prompt automatic cleanup when it goes out of scope.",
"properties":  {
"severity":  "Warning",
"warningLevel":  "1",
"defaultSeverity":  "Warning",
"title":  "\"IDisposables\" should be disposed",
"category":  "Reliability",
"helpLink":  "http://vs.sonarlint.org/rules/index.html#version=1.7.0\u0026ruleId=S2930",
"isEnabledByDefault":  "True",
"isSuppressedInSource":  "False"
}
},
{
"ruleId":  "S2930",
"locations":  [
{
"analysisTarget":  [
{
"uri":  "Nancy\\src\\Nancy.Tests\\Unit\\Culture\\BuiltInCultureConventionFixture.cs",
"region":  {
"startLine":  346,
"startColumn":  16,
"endLine":  346,
"endColumn":  22
}
}
]
}
],
"shortMessage":  "\"Dispose\" of \"memory\".",
"fullMessage":  "You can\u0027t rely on garbage collection to clean up everything. Specifically, you can\u0027t count on it to release non-memory resources such as \"File\"s. For that, there\u0027s the \"IDisposable\" interface, and the contract that \"Dispose\" will always be called on such objects. When an \"IDisposable\" is a class member, then it\u0027s up to that class to call \"Dispose\" on it, ideally in its own \"Dispose\" method. If it\u0027s a local variable, then it should be instantiated with a \"using\" clause to prompt automatic cleanup when it goes out of scope.",
"properties":  {
"severity":  "Warning",
"warningLevel":  "1",
"defaultSeverity":  "Warning",
"title":  "\"IDisposables\" should be disposed",
"category":  "Reliability",
"helpLink":  "http://vs.sonarlint.org/rules/index.html#version=1.7.0\u0026ruleId=S2930",
"isEnabledByDefault":  "True",
"isSuppressedInSource":  "False"
}
},
{
"ruleId":  "S2930",
"locations":  [
{
"analysisTarget":  [
{
"uri":  "Nancy\\src\\Nancy.Tests\\Unit\\Culture\\BuiltInCultureConventionFixture.cs",
"region":  {
"startLine":  347,
"startColumn":  16,
"endLine":  347,
"endColumn":  22
}
}
]
}
],
"shortMessage":  "\"Dispose\" of \"writer\".",
"fullMessage":  "You can\u0027t rely on garbage collection to clean up everything. Specifically, you can\u0027t count on it to release non-memory resources such as \"File\"s. For that, there\u0027s the \"IDisposable\" interface, and the contract that \"Dispose\" will always be called on such objects. When an \"IDisposable\" is a class member, then it\u0027s up to that class to call \"Dispose\" on it, ideally in its own \"Dispose\" method. If it\u0027s a local variable, then it should be instantiated with a \"using\" clause to prompt automatic cleanup when it goes out of scope.",
"properties":  {
"severity":  "Warning",
"warningLevel":  "1",
"defaultSeverity":  "Warning",
"title":  "\"IDisposables\" should be disposed",
"category":  "Reliability",
"helpLink":  "http://vs.sonarlint.org/rules/index.html#version=1.7.0\u0026ruleId=S2930",
"isEnabledByDefault":  "True",
"isSuppressedInSource":  "False"
}
},
{
"ruleId":  "S2930",
"locations":  [
{
"analysisTarget":  [
{
"uri":  "Nancy\\src\\Nancy.Tests\\Unit\\Culture\\BuiltInCultureConventionFixture.cs",
"region":  {
"startLine":  367,
"startColumn":  16,
"endLine":  367,
"endColumn":  23
}
}
]
}
],
"shortMessage":  "\"Dispose\" of \"request\".",
"fullMessage":  "You can\u0027t rely on garbage collection to clean up everything. Specifically, you can\u0027t count on it to release non-memory resources such as \"File\"s. For that, there\u0027s the \"IDisposable\" interface, and the contract that \"Dispose\" will always be called on such objects. When an \"IDisposable\" is a class member, then it\u0027s up to that class to call \"Dispose\" on it, ideally in its own \"Dispose\" method. If it\u0027s a local variable, then it should be instantiated with a \"using\" clause to prompt automatic cleanup when it goes out of scope.",
"properties":  {
"severity":  "Warning",
"warningLevel":  "1",
"defaultSeverity":  "Warning",
"title":  "\"IDisposables\" should be disposed",
"category":  "Reliability",
"helpLink":  "http://vs.sonarlint.org/rules/index.html#version=1.7.0\u0026ruleId=S2930",
"isEnabledByDefault":  "True",
"isSuppressedInSource":  "False"
}
},
{
"ruleId":  "S2930",
"locations":  [
{
"analysisTarget":  [
{
"uri":  "Nancy\\src\\Nancy.Tests\\Unit\\DefaultNancyBootstrapperBootstrapperBaseFixture.cs",
"region":  {
"startLine":  12,
"startColumn":  42,
"endLine":  12,
"endColumn":  54
}
}
]
}
],
"shortMessage":  "\"Dispose\" of \"bootstrapper\".",
"fullMessage":  "You can\u0027t rely on garbage collection to clean up everything. Specifically, you can\u0027t count on it to release non-memory resources such as \"File\"s. For that, there\u0027s the \"IDisposable\" interface, and the contract that \"Dispose\" will always be called on such objects. When an \"IDisposable\" is a class member, then it\u0027s up to that class to call \"Dispose\" on it, ideally in its own \"Dispose\" method. If it\u0027s a local variable, then it should be instantiated with a \"using\" clause to prompt automatic cleanup when it goes out of scope.",
"properties":  {
"severity":  "Warning",
"warningLevel":  "1",
"defaultSeverity":  "Warning",
"title":  "\"IDisposables\" should be disposed",
"category":  "Reliability",
"helpLink":  "http://vs.sonarlint.org/rules/index.html#version=1.7.0\u0026ruleId=S2930",
"isEnabledByDefault":  "True",
"isSuppressedInSource":  "False"
}
},
{
"ruleId":  "S2930",
"locations":  [
{
"analysisTarget":  [
{
"uri":  "Nancy\\src\\Nancy.Tests\\Unit\\DefaultNancyBootstrapperFixture.cs",
"region":  {
"startLine":  16,
"startColumn":  54,
"endLine":  16,
"endColumn":  66
}
}
]
}
],
"shortMessage":  "\"Dispose\" of \"bootstrapper\".",
"fullMessage":  "You can\u0027t rely on garbage collection to clean up everything. Specifically, you can\u0027t count on it to release non-memory resources such as \"File\"s. For that, there\u0027s the \"IDisposable\" interface, and the contract that \"Dispose\" will always be called on such objects. When an \"IDisposable\" is a class member, then it\u0027s up to that class to call \"Dispose\" on it, ideally in its own \"Dispose\" method. If it\u0027s a local variable, then it should be instantiated with a \"using\" clause to prompt automatic cleanup when it goes out of scope.",
"properties":  {
"severity":  "Warning",
"warningLevel":  "1",
"defaultSeverity":  "Warning",
"title":  "\"IDisposables\" should be disposed",
"category":  "Reliability",
"helpLink":  "http://vs.sonarlint.org/rules/index.html#version=1.7.0\u0026ruleId=S2930",
"isEnabledByDefault":  "True",
"isSuppressedInSource":  "False"
}
},
{
"ruleId":  "S2930",
"locations":  [
{
"analysisTarget":  [
{
"uri":  "Nancy\\src\\Nancy.Tests\\Unit\\DefaultNancyBootstrapperFixture.cs",
"region":  {
"startLine":  29,
"startColumn":  16,
"endLine":  29,
"endColumn":  23
}
}
]
}
],
"shortMessage":  "\"Dispose\" of \"request\".",
"fullMessage":  "You can\u0027t rely on garbage collection to clean up everything. Specifically, you can\u0027t count on it to release non-memory resources such as \"File\"s. For that, there\u0027s the \"IDisposable\" interface, and the contract that \"Dispose\" will always be called on such objects. When an \"IDisposable\" is a class member, then it\u0027s up to that class to call \"Dispose\" on it, ideally in its own \"Dispose\" method. If it\u0027s a local variable, then it should be instantiated with a \"using\" clause to prompt automatic cleanup when it goes out of scope.",
"properties":  {
"severity":  "Warning",
"warningLevel":  "1",
"defaultSeverity":  "Warning",
"title":  "\"IDisposables\" should be disposed",
"category":  "Reliability",
"helpLink":  "http://vs.sonarlint.org/rules/index.html#version=1.7.0\u0026ruleId=S2930",
"isEnabledByDefault":  "True",
"isSuppressedInSource":  "False"
}
},
{
"ruleId":  "S2930",
"locations":  [
{
"analysisTarget":  [
{
"uri":  "Nancy\\src\\Nancy.Tests\\Unit\\DefaultNancyBootstrapperFixture.cs",
"region":  {
"startLine":  30,
"startColumn":  16,
"endLine":  30,
"endColumn":  24
}
}
]
}
],
"shortMessage":  "\"Dispose\" of \"request2\".",
"fullMessage":  "You can\u0027t rely on garbage collection to clean up everything. Specifically, you can\u0027t count on it to release non-memory resources such as \"File\"s. For that, there\u0027s the \"IDisposable\" interface, and the contract that \"Dispose\" will always be called on such objects. When an \"IDisposable\" is a class member, then it\u0027s up to that class to call \"Dispose\" on it, ideally in its own \"Dispose\" method. If it\u0027s a local variable, then it should be instantiated with a \"using\" clause to prompt automatic cleanup when it goes out of scope.",
"properties":  {
"severity":  "Warning",
"warningLevel":  "1",
"defaultSeverity":  "Warning",
"title":  "\"IDisposables\" should be disposed",
"category":  "Reliability",
"helpLink":  "http://vs.sonarlint.org/rules/index.html#version=1.7.0\u0026ruleId=S2930",
"isEnabledByDefault":  "True",
"isSuppressedInSource":  "False"
}
},
{
"ruleId":  "S2930",
"locations":  [
{
"analysisTarget":  [
{
"uri":  "Nancy\\src\\Nancy.Tests\\Unit\\DefaultNancyBootstrapperFixture.cs",
"region":  {
"startLine":  46,
"startColumn":  16,
"endLine":  46,
"endColumn":  23
}
}
]
}
],
"shortMessage":  "\"Dispose\" of \"request\".",
"fullMessage":  "You can\u0027t rely on garbage collection to clean up everything. Specifically, you can\u0027t count on it to release non-memory resources such as \"File\"s. For that, there\u0027s the \"IDisposable\" interface, and the contract that \"Dispose\" will always be called on such objects. When an \"IDisposable\" is a class member, then it\u0027s up to that class to call \"Dispose\" on it, ideally in its own \"Dispose\" method. If it\u0027s a local variable, then it should be instantiated with a \"using\" clause to prompt automatic cleanup when it goes out of scope.",
"properties":  {
"severity":  "Warning",
"warningLevel":  "1",
"defaultSeverity":  "Warning",
"title":  "\"IDisposables\" should be disposed",
"category":  "Reliability",
"helpLink":  "http://vs.sonarlint.org/rules/index.html#version=1.7.0\u0026ruleId=S2930",
"isEnabledByDefault":  "True",
"isSuppressedInSource":  "False"
}
},
{
"ruleId":  "S2930",
"locations":  [
{
"analysisTarget":  [
{
"uri":  "Nancy\\src\\Nancy.Tests\\Unit\\DefaultNancyBootstrapperFixture.cs",
"region":  {
"startLine":  62,
"startColumn":  16,
"endLine":  62,
"endColumn":  23
}
}
]
}
],
"shortMessage":  "\"Dispose\" of \"request\".",
"fullMessage":  "You can\u0027t rely on garbage collection to clean up everything. Specifically, you can\u0027t count on it to release non-memory resources such as \"File\"s. For that, there\u0027s the \"IDisposable\" interface, and the contract that \"Dispose\" will always be called on such objects. When an \"IDisposable\" is a class member, then it\u0027s up to that class to call \"Dispose\" on it, ideally in its own \"Dispose\" method. If it\u0027s a local variable, then it should be instantiated with a \"using\" clause to prompt automatic cleanup when it goes out of scope.",
"properties":  {
"severity":  "Warning",
"warningLevel":  "1",
"defaultSeverity":  "Warning",
"title":  "\"IDisposables\" should be disposed",
"category":  "Reliability",
"helpLink":  "http://vs.sonarlint.org/rules/index.html#version=1.7.0\u0026ruleId=S2930",
"isEnabledByDefault":  "True",
"isSuppressedInSource":  "False"
}
},
{
"ruleId":  "S2930",
"locations":  [
{
"analysisTarget":  [
{
"uri":  "Nancy\\src\\Nancy.Tests\\Unit\\DefaultNancyBootstrapperModuleCatalogFixture.cs",
"region":  {
"startLine":  9,
"startColumn":  33,
"endLine":  9,
"endColumn":  45
}
}
]
}
],
"shortMessage":  "\"Dispose\" of \"bootstrapper\".",
"fullMessage":  "You can\u0027t rely on garbage collection to clean up everything. Specifically, you can\u0027t count on it to release non-memory resources such as \"File\"s. For that, there\u0027s the \"IDisposable\" interface, and the contract that \"Dispose\" will always be called on such objects. When an \"IDisposable\" is a class member, then it\u0027s up to that class to call \"Dispose\" on it, ideally in its own \"Dispose\" method. If it\u0027s a local variable, then it should be instantiated with a \"using\" clause to prompt automatic cleanup when it goes out of scope.",
"properties":  {
"severity":  "Warning",
"warningLevel":  "1",
"defaultSeverity":  "Warning",
"title":  "\"IDisposables\" should be disposed",
"category":  "Reliability",
"helpLink":  "http://vs.sonarlint.org/rules/index.html#version=1.7.0\u0026ruleId=S2930",
"isEnabledByDefault":  "True",
"isSuppressedInSource":  "False"
}
},
{
"ruleId":  "S2930",
"locations":  [
{
"analysisTarget":  [
{
"uri":  "Nancy\\src\\Nancy.Tests\\Unit\\DefaultResponseFormatterFactoryFixture.cs",
"region":  {
"startLine":  41,
"startColumn":  16,
"endLine":  41,
"endColumn":  23
}
}
]
}
],
"shortMessage":  "\"Dispose\" of \"context\".",
"fullMessage":  "You can\u0027t rely on garbage collection to clean up everything. Specifically, you can\u0027t count on it to release non-memory resources such as \"File\"s. For that, there\u0027s the \"IDisposable\" interface, and the contract that \"Dispose\" will always be called on such objects. When an \"IDisposable\" is a class member, then it\u0027s up to that class to call \"Dispose\" on it, ideally in its own \"Dispose\" method. If it\u0027s a local variable, then it should be instantiated with a \"using\" clause to prompt automatic cleanup when it goes out of scope.",
"properties":  {
"severity":  "Warning",
"warningLevel":  "1",
"defaultSeverity":  "Warning",
"title":  "\"IDisposables\" should be disposed",
"category":  "Reliability",
"helpLink":  "http://vs.sonarlint.org/rules/index.html#version=1.7.0\u0026ruleId=S2930",
"isEnabledByDefault":  "True",
"isSuppressedInSource":  "False"
}
},
{
"ruleId":  "S2930",
"locations":  [
{
"analysisTarget":  [
{
"uri":  "Nancy\\src\\Nancy.Tests\\Unit\\DefaultResponseFormatterFactoryFixture.cs",
"region":  {
"startLine":  54,
"startColumn":  16,
"endLine":  54,
"endColumn":  23
}
}
]
}
],
"shortMessage":  "\"Dispose\" of \"context\".",
"fullMessage":  "You can\u0027t rely on garbage collection to clean up everything. Specifically, you can\u0027t count on it to release non-memory resources such as \"File\"s. For that, there\u0027s the \"IDisposable\" interface, and the contract that \"Dispose\" will always be called on such objects. When an \"IDisposable\" is a class member, then it\u0027s up to that class to call \"Dispose\" on it, ideally in its own \"Dispose\" method. If it\u0027s a local variable, then it should be instantiated with a \"using\" clause to prompt automatic cleanup when it goes out of scope.",
"properties":  {
"severity":  "Warning",
"warningLevel":  "1",
"defaultSeverity":  "Warning",
"title":  "\"IDisposables\" should be disposed",
"category":  "Reliability",
"helpLink":  "http://vs.sonarlint.org/rules/index.html#version=1.7.0\u0026ruleId=S2930",
"isEnabledByDefault":  "True",
"isSuppressedInSource":  "False"
}
},
{
"ruleId":  "S2930",
"locations":  [
{
"analysisTarget":  [
{
"uri":  "Nancy\\src\\Nancy.Tests\\Unit\\DefaultResponseFormatterFixture.cs",
"region":  {
"startLine":  27,
"startColumn":  16,
"endLine":  27,
"endColumn":  23
}
}
]
}
],
"shortMessage":  "\"Dispose\" of \"context\".",
"fullMessage":  "You can\u0027t rely on garbage collection to clean up everything. Specifically, you can\u0027t count on it to release non-memory resources such as \"File\"s. For that, there\u0027s the \"IDisposable\" interface, and the contract that \"Dispose\" will always be called on such objects. When an \"IDisposable\" is a class member, then it\u0027s up to that class to call \"Dispose\" on it, ideally in its own \"Dispose\" method. If it\u0027s a local variable, then it should be instantiated with a \"using\" clause to prompt automatic cleanup when it goes out of scope.",
"properties":  {
"severity":  "Warning",
"warningLevel":  "1",
"defaultSeverity":  "Warning",
"title":  "\"IDisposables\" should be disposed",
"category":  "Reliability",
"helpLink":  "http://vs.sonarlint.org/rules/index.html#version=1.7.0\u0026ruleId=S2930",
"isEnabledByDefault":  "True",
"isSuppressedInSource":  "False"
}
},
{
"ruleId":  "S2930",
"locations":  [
{
"analysisTarget":  [
{
"uri":  "Nancy\\src\\Nancy.Tests\\Unit\\Diagnostics\\CustomInteractiveDiagnosticsFixture.cs",
"region":  {
"startLine":  119,
"startColumn":  16,
"endLine":  119,
"endColumn":  28
}
}
]
}
],
"shortMessage":  "\"Dispose\" of \"bootstrapper\".",
"fullMessage":  "You can\u0027t rely on garbage collection to clean up everything. Specifically, you can\u0027t count on it to release non-memory resources such as \"File\"s. For that, there\u0027s the \"IDisposable\" interface, and the contract that \"Dispose\" will always be called on such objects. When an \"IDisposable\" is a class member, then it\u0027s up to that class to call \"Dispose\" on it, ideally in its own \"Dispose\" method. If it\u0027s a local variable, then it should be instantiated with a \"using\" clause to prompt automatic cleanup when it goes out of scope.",
"properties":  {
"severity":  "Warning",
"warningLevel":  "1",
"defaultSeverity":  "Warning",
"title":  "\"IDisposables\" should be disposed",
"category":  "Reliability",
"helpLink":  "http://vs.sonarlint.org/rules/index.html#version=1.7.0\u0026ruleId=S2930",
"isEnabledByDefault":  "True",
"isSuppressedInSource":  "False"
}
},
{
"ruleId":  "S2930",
"locations":  [
{
"analysisTarget":  [
{
"uri":  "Nancy\\src\\Nancy.Tests\\Unit\\Diagnostics\\DiagnosticsHookFixture.cs",
"region":  {
"startLine":  34,
"startColumn":  16,
"endLine":  34,
"endColumn":  28
}
}
]
}
],
"shortMessage":  "\"Dispose\" of \"bootstrapper\".",
"fullMessage":  "You can\u0027t rely on garbage collection to clean up everything. Specifically, you can\u0027t count on it to release non-memory resources such as \"File\"s. For that, there\u0027s the \"IDisposable\" interface, and the contract that \"Dispose\" will always be called on such objects. When an \"IDisposable\" is a class member, then it\u0027s up to that class to call \"Dispose\" on it, ideally in its own \"Dispose\" method. If it\u0027s a local variable, then it should be instantiated with a \"using\" clause to prompt automatic cleanup when it goes out of scope.",
"properties":  {
"severity":  "Warning",
"warningLevel":  "1",
"defaultSeverity":  "Warning",
"title":  "\"IDisposables\" should be disposed",
"category":  "Reliability",
"helpLink":  "http://vs.sonarlint.org/rules/index.html#version=1.7.0\u0026ruleId=S2930",
"isEnabledByDefault":  "True",
"isSuppressedInSource":  "False"
}
},
{
"ruleId":  "S2930",
"locations":  [
{
"analysisTarget":  [
{
"uri":  "Nancy\\src\\Nancy.Tests\\Unit\\Diagnostics\\DiagnosticsHookFixture.cs",
"region":  {
"startLine":  60,
"startColumn":  16,
"endLine":  60,
"endColumn":  28
}
}
]
}
],
"shortMessage":  "\"Dispose\" of \"bootstrapper\".",
"fullMessage":  "You can\u0027t rely on garbage collection to clean up everything. Specifically, you can\u0027t count on it to release non-memory resources such as \"File\"s. For that, there\u0027s the \"IDisposable\" interface, and the contract that \"Dispose\" will always be called on such objects. When an \"IDisposable\" is a class member, then it\u0027s up to that class to call \"Dispose\" on it, ideally in its own \"Dispose\" method. If it\u0027s a local variable, then it should be instantiated with a \"using\" clause to prompt automatic cleanup when it goes out of scope.",
"properties":  {
"severity":  "Warning",
"warningLevel":  "1",
"defaultSeverity":  "Warning",
"title":  "\"IDisposables\" should be disposed",
"category":  "Reliability",
"helpLink":  "http://vs.sonarlint.org/rules/index.html#version=1.7.0\u0026ruleId=S2930",
"isEnabledByDefault":  "True",
"isSuppressedInSource":  "False"
}
},
{
"ruleId":  "S2930",
"locations":  [
{
"analysisTarget":  [
{
"uri":  "Nancy\\src\\Nancy.Tests\\Unit\\Diagnostics\\DiagnosticsHookFixture.cs",
"region":  {
"startLine":  87,
"startColumn":  16,
"endLine":  87,
"endColumn":  28
}
}
]
}
],
"shortMessage":  "\"Dispose\" of \"bootstrapper\".",
"fullMessage":  "You can\u0027t rely on garbage collection to clean up everything. Specifically, you can\u0027t count on it to release non-memory resources such as \"File\"s. For that, there\u0027s the \"IDisposable\" interface, and the contract that \"Dispose\" will always be called on such objects. When an \"IDisposable\" is a class member, then it\u0027s up to that class to call \"Dispose\" on it, ideally in its own \"Dispose\" method. If it\u0027s a local variable, then it should be instantiated with a \"using\" clause to prompt automatic cleanup when it goes out of scope.",
"properties":  {
"severity":  "Warning",
"warningLevel":  "1",
"defaultSeverity":  "Warning",
"title":  "\"IDisposables\" should be disposed",
"category":  "Reliability",
"helpLink":  "http://vs.sonarlint.org/rules/index.html#version=1.7.0\u0026ruleId=S2930",
"isEnabledByDefault":  "True",
"isSuppressedInSource":  "False"
}
},
{
"ruleId":  "S2930",
"locations":  [
{
"analysisTarget":  [
{
"uri":  "Nancy\\src\\Nancy.Tests\\Unit\\Diagnostics\\DiagnosticsHookFixture.cs",
"region":  {
"startLine":  113,
"startColumn":  16,
"endLine":  113,
"endColumn":  28
}
}
]
}
],
"shortMessage":  "\"Dispose\" of \"bootstrapper\".",
"fullMessage":  "You can\u0027t rely on garbage collection to clean up everything. Specifically, you can\u0027t count on it to release non-memory resources such as \"File\"s. For that, there\u0027s the \"IDisposable\" interface, and the contract that \"Dispose\" will always be called on such objects. When an \"IDisposable\" is a class member, then it\u0027s up to that class to call \"Dispose\" on it, ideally in its own \"Dispose\" method. If it\u0027s a local variable, then it should be instantiated with a \"using\" clause to prompt automatic cleanup when it goes out of scope.",
"properties":  {
"severity":  "Warning",
"warningLevel":  "1",
"defaultSeverity":  "Warning",
"title":  "\"IDisposables\" should be disposed",
"category":  "Reliability",
"helpLink":  "http://vs.sonarlint.org/rules/index.html#version=1.7.0\u0026ruleId=S2930",
"isEnabledByDefault":  "True",
"isSuppressedInSource":  "False"
}
},
{
"ruleId":  "S2930",
"locations":  [
{
"analysisTarget":  [
{
"uri":  "Nancy\\src\\Nancy.Tests\\Unit\\Diagnostics\\DiagnosticsHookFixture.cs",
"region":  {
"startLine":  142,
"startColumn":  16,
"endLine":  142,
"endColumn":  28
}
}
]
}
],
"shortMessage":  "\"Dispose\" of \"bootstrapper\".",
"fullMessage":  "You can\u0027t rely on garbage collection to clean up everything. Specifically, you can\u0027t count on it to release non-memory resources such as \"File\"s. For that, there\u0027s the \"IDisposable\" interface, and the contract that \"Dispose\" will always be called on such objects. When an \"IDisposable\" is a class member, then it\u0027s up to that class to call \"Dispose\" on it, ideally in its own \"Dispose\" method. If it\u0027s a local variable, then it should be instantiated with a \"using\" clause to prompt automatic cleanup when it goes out of scope.",
"properties":  {
"severity":  "Warning",
"warningLevel":  "1",
"defaultSeverity":  "Warning",
"title":  "\"IDisposables\" should be disposed",
"category":  "Reliability",
"helpLink":  "http://vs.sonarlint.org/rules/index.html#version=1.7.0\u0026ruleId=S2930",
"isEnabledByDefault":  "True",
"isSuppressedInSource":  "False"
}
},
{
"ruleId":  "S2930",
"locations":  [
{
"analysisTarget":  [
{
"uri":  "Nancy\\src\\Nancy.Tests\\Unit\\Diagnostics\\DiagnosticsHookFixture.cs",
"region":  {
"startLine":  171,
"startColumn":  16,
"endLine":  171,
"endColumn":  28
}
}
]
}
],
"shortMessage":  "\"Dispose\" of \"bootstrapper\".",
"fullMessage":  "You can\u0027t rely on garbage collection to clean up everything. Specifically, you can\u0027t count on it to release non-memory resources such as \"File\"s. For that, there\u0027s the \"IDisposable\" interface, and the contract that \"Dispose\" will always be called on such objects. When an \"IDisposable\" is a class member, then it\u0027s up to that class to call \"Dispose\" on it, ideally in its own \"Dispose\" method. If it\u0027s a local variable, then it should be instantiated with a \"using\" clause to prompt automatic cleanup when it goes out of scope.",
"properties":  {
"severity":  "Warning",
"warningLevel":  "1",
"defaultSeverity":  "Warning",
"title":  "\"IDisposables\" should be disposed",
"category":  "Reliability",
"helpLink":  "http://vs.sonarlint.org/rules/index.html#version=1.7.0\u0026ruleId=S2930",
"isEnabledByDefault":  "True",
"isSuppressedInSource":  "False"
}
},
{
"ruleId":  "S2930",
"locations":  [
{
"analysisTarget":  [
{
"uri":  "Nancy\\src\\Nancy.Tests\\Unit\\Diagnostics\\DiagnosticsHookFixture.cs",
"region":  {
"startLine":  200,
"startColumn":  16,
"endLine":  200,
"endColumn":  28
}
}
]
}
],
"shortMessage":  "\"Dispose\" of \"bootstrapper\".",
"fullMessage":  "You can\u0027t rely on garbage collection to clean up everything. Specifically, you can\u0027t count on it to release non-memory resources such as \"File\"s. For that, there\u0027s the \"IDisposable\" interface, and the contract that \"Dispose\" will always be called on such objects. When an \"IDisposable\" is a class member, then it\u0027s up to that class to call \"Dispose\" on it, ideally in its own \"Dispose\" method. If it\u0027s a local variable, then it should be instantiated with a \"using\" clause to prompt automatic cleanup when it goes out of scope.",
"properties":  {
"severity":  "Warning",
"warningLevel":  "1",
"defaultSeverity":  "Warning",
"title":  "\"IDisposables\" should be disposed",
"category":  "Reliability",
"helpLink":  "http://vs.sonarlint.org/rules/index.html#version=1.7.0\u0026ruleId=S2930",
"isEnabledByDefault":  "True",
"isSuppressedInSource":  "False"
}
},
{
"ruleId":  "S2930",
"locations":  [
{
"analysisTarget":  [
{
"uri":  "Nancy\\src\\Nancy.Tests\\Unit\\Diagnostics\\DiagnosticsHookFixture.cs",
"region":  {
"startLine":  230,
"startColumn":  16,
"endLine":  230,
"endColumn":  28
}
}
]
}
],
"shortMessage":  "\"Dispose\" of \"bootstrapper\".",
"fullMessage":  "You can\u0027t rely on garbage collection to clean up everything. Specifically, you can\u0027t count on it to release non-memory resources such as \"File\"s. For that, there\u0027s the \"IDisposable\" interface, and the contract that \"Dispose\" will always be called on such objects. When an \"IDisposable\" is a class member, then it\u0027s up to that class to call \"Dispose\" on it, ideally in its own \"Dispose\" method. If it\u0027s a local variable, then it should be instantiated with a \"using\" clause to prompt automatic cleanup when it goes out of scope.",
"properties":  {
"severity":  "Warning",
"warningLevel":  "1",
"defaultSeverity":  "Warning",
"title":  "\"IDisposables\" should be disposed",
"category":  "Reliability",
"helpLink":  "http://vs.sonarlint.org/rules/index.html#version=1.7.0\u0026ruleId=S2930",
"isEnabledByDefault":  "True",
"isSuppressedInSource":  "False"
}
},
{
"ruleId":  "S2930",
"locations":  [
{
"analysisTarget":  [
{
"uri":  "Nancy\\src\\Nancy.Tests\\Unit\\Diagnostics\\DiagnosticsHookFixture.cs",
"region":  {
"startLine":  260,
"startColumn":  16,
"endLine":  260,
"endColumn":  28
}
}
]
}
],
"shortMessage":  "\"Dispose\" of \"bootstrapper\".",
"fullMessage":  "You can\u0027t rely on garbage collection to clean up everything. Specifically, you can\u0027t count on it to release non-memory resources such as \"File\"s. For that, there\u0027s the \"IDisposable\" interface, and the contract that \"Dispose\" will always be called on such objects. When an \"IDisposable\" is a class member, then it\u0027s up to that class to call \"Dispose\" on it, ideally in its own \"Dispose\" method. If it\u0027s a local variable, then it should be instantiated with a \"using\" clause to prompt automatic cleanup when it goes out of scope.",
"properties":  {
"severity":  "Warning",
"warningLevel":  "1",
"defaultSeverity":  "Warning",
"title":  "\"IDisposables\" should be disposed",
"category":  "Reliability",
"helpLink":  "http://vs.sonarlint.org/rules/index.html#version=1.7.0\u0026ruleId=S2930",
"isEnabledByDefault":  "True",
"isSuppressedInSource":  "False"
}
},
{
"ruleId":  "S2930",
"locations":  [
{
"analysisTarget":  [
{
"uri":  "Nancy\\src\\Nancy.Tests\\Unit\\Diagnostics\\DiagnosticsHookFixture.cs",
"region":  {
"startLine":  292,
"startColumn":  16,
"endLine":  292,
"endColumn":  28
}
}
]
}
],
"shortMessage":  "\"Dispose\" of \"bootstrapper\".",
"fullMessage":  "You can\u0027t rely on garbage collection to clean up everything. Specifically, you can\u0027t count on it to release non-memory resources such as \"File\"s. For that, there\u0027s the \"IDisposable\" interface, and the contract that \"Dispose\" will always be called on such objects. When an \"IDisposable\" is a class member, then it\u0027s up to that class to call \"Dispose\" on it, ideally in its own \"Dispose\" method. If it\u0027s a local variable, then it should be instantiated with a \"using\" clause to prompt automatic cleanup when it goes out of scope.",
"properties":  {
"severity":  "Warning",
"warningLevel":  "1",
"defaultSeverity":  "Warning",
"title":  "\"IDisposables\" should be disposed",
"category":  "Reliability",
"helpLink":  "http://vs.sonarlint.org/rules/index.html#version=1.7.0\u0026ruleId=S2930",
"isEnabledByDefault":  "True",
"isSuppressedInSource":  "False"
}
},
{
"ruleId":  "S2930",
"locations":  [
{
"analysisTarget":  [
{
"uri":  "Nancy\\src\\Nancy.Tests\\Unit\\ErrorHandling\\DefaultStatusCodeHandlerFixture.cs",
"region":  {
"startLine":  80,
"startColumn":  16,
"endLine":  80,
"endColumn":  23
}
}
]
}
],
"shortMessage":  "\"Dispose\" of \"context\".",
"fullMessage":  "You can\u0027t rely on garbage collection to clean up everything. Specifically, you can\u0027t count on it to release non-memory resources such as \"File\"s. For that, there\u0027s the \"IDisposable\" interface, and the contract that \"Dispose\" will always be called on such objects. When an \"IDisposable\" is a class member, then it\u0027s up to that class to call \"Dispose\" on it, ideally in its own \"Dispose\" method. If it\u0027s a local variable, then it should be instantiated with a \"using\" clause to prompt automatic cleanup when it goes out of scope.",
"properties":  {
"severity":  "Warning",
"warningLevel":  "1",
"defaultSeverity":  "Warning",
"title":  "\"IDisposables\" should be disposed",
"category":  "Reliability",
"helpLink":  "http://vs.sonarlint.org/rules/index.html#version=1.7.0\u0026ruleId=S2930",
"isEnabledByDefault":  "True",
"isSuppressedInSource":  "False"
}
},
{
"ruleId":  "S2930",
"locations":  [
{
"analysisTarget":  [
{
"uri":  "Nancy\\src\\Nancy.Tests\\Unit\\ErrorHandling\\DefaultStatusCodeHandlerFixture.cs",
"region":  {
"startLine":  93,
"startColumn":  16,
"endLine":  93,
"endColumn":  23
}
}
]
}
],
"shortMessage":  "\"Dispose\" of \"context\".",
"fullMessage":  "You can\u0027t rely on garbage collection to clean up everything. Specifically, you can\u0027t count on it to release non-memory resources such as \"File\"s. For that, there\u0027s the \"IDisposable\" interface, and the contract that \"Dispose\" will always be called on such objects. When an \"IDisposable\" is a class member, then it\u0027s up to that class to call \"Dispose\" on it, ideally in its own \"Dispose\" method. If it\u0027s a local variable, then it should be instantiated with a \"using\" clause to prompt automatic cleanup when it goes out of scope.",
"properties":  {
"severity":  "Warning",
"warningLevel":  "1",
"defaultSeverity":  "Warning",
"title":  "\"IDisposables\" should be disposed",
"category":  "Reliability",
"helpLink":  "http://vs.sonarlint.org/rules/index.html#version=1.7.0\u0026ruleId=S2930",
"isEnabledByDefault":  "True",
"isSuppressedInSource":  "False"
}
},
{
"ruleId":  "S2930",
"locations":  [
{
"analysisTarget":  [
{
"uri":  "Nancy\\src\\Nancy.Tests\\Unit\\ErrorHandling\\DefaultStatusCodeHandlerFixture.cs",
"region":  {
"startLine":  107,
"startColumn":  16,
"endLine":  107,
"endColumn":  23
}
}
]
}
],
"shortMessage":  "\"Dispose\" of \"context\".",
"fullMessage":  "You can\u0027t rely on garbage collection to clean up everything. Specifically, you can\u0027t count on it to release non-memory resources such as \"File\"s. For that, there\u0027s the \"IDisposable\" interface, and the contract that \"Dispose\" will always be called on such objects. When an \"IDisposable\" is a class member, then it\u0027s up to that class to call \"Dispose\" on it, ideally in its own \"Dispose\" method. If it\u0027s a local variable, then it should be instantiated with a \"using\" clause to prompt automatic cleanup when it goes out of scope.",
"properties":  {
"severity":  "Warning",
"warningLevel":  "1",
"defaultSeverity":  "Warning",
"title":  "\"IDisposables\" should be disposed",
"category":  "Reliability",
"helpLink":  "http://vs.sonarlint.org/rules/index.html#version=1.7.0\u0026ruleId=S2930",
"isEnabledByDefault":  "True",
"isSuppressedInSource":  "False"
}
},
{
"ruleId":  "S2930",
"locations":  [
{
"analysisTarget":  [
{
"uri":  "Nancy\\src\\Nancy.Tests\\Unit\\ErrorHandling\\DefaultStatusCodeHandlerFixture.cs",
"region":  {
"startLine":  122,
"startColumn":  16,
"endLine":  122,
"endColumn":  23
}
}
]
}
],
"shortMessage":  "\"Dispose\" of \"context\".",
"fullMessage":  "You can\u0027t rely on garbage collection to clean up everything. Specifically, you can\u0027t count on it to release non-memory resources such as \"File\"s. For that, there\u0027s the \"IDisposable\" interface, and the contract that \"Dispose\" will always be called on such objects. When an \"IDisposable\" is a class member, then it\u0027s up to that class to call \"Dispose\" on it, ideally in its own \"Dispose\" method. If it\u0027s a local variable, then it should be instantiated with a \"using\" clause to prompt automatic cleanup when it goes out of scope.",
"properties":  {
"severity":  "Warning",
"warningLevel":  "1",
"defaultSeverity":  "Warning",
"title":  "\"IDisposables\" should be disposed",
"category":  "Reliability",
"helpLink":  "http://vs.sonarlint.org/rules/index.html#version=1.7.0\u0026ruleId=S2930",
"isEnabledByDefault":  "True",
"isSuppressedInSource":  "False"
}
},
{
"ruleId":  "S2930",
"locations":  [
{
"analysisTarget":  [
{
"uri":  "Nancy\\src\\Nancy.Tests\\Unit\\ErrorHandling\\DefaultStatusCodeHandlerFixture.cs",
"region":  {
"startLine":  141,
"startColumn":  16,
"endLine":  141,
"endColumn":  23
}
}
]
}
],
"shortMessage":  "\"Dispose\" of \"context\".",
"fullMessage":  "You can\u0027t rely on garbage collection to clean up everything. Specifically, you can\u0027t count on it to release non-memory resources such as \"File\"s. For that, there\u0027s the \"IDisposable\" interface, and the contract that \"Dispose\" will always be called on such objects. When an \"IDisposable\" is a class member, then it\u0027s up to that class to call \"Dispose\" on it, ideally in its own \"Dispose\" method. If it\u0027s a local variable, then it should be instantiated with a \"using\" clause to prompt automatic cleanup when it goes out of scope.",
"properties":  {
"severity":  "Warning",
"warningLevel":  "1",
"defaultSeverity":  "Warning",
"title":  "\"IDisposables\" should be disposed",
"category":  "Reliability",
"helpLink":  "http://vs.sonarlint.org/rules/index.html#version=1.7.0\u0026ruleId=S2930",
"isEnabledByDefault":  "True",
"isSuppressedInSource":  "False"
}
},
{
"ruleId":  "S2930",
"locations":  [
{
"analysisTarget":  [
{
"uri":  "Nancy\\src\\Nancy.Tests\\Unit\\ErrorHandling\\DefaultStatusCodeHandlerFixture.cs",
"region":  {
"startLine":  154,
"startColumn":  16,
"endLine":  154,
"endColumn":  23
}
}
]
}
],
"shortMessage":  "\"Dispose\" of \"context\".",
"fullMessage":  "You can\u0027t rely on garbage collection to clean up everything. Specifically, you can\u0027t count on it to release non-memory resources such as \"File\"s. For that, there\u0027s the \"IDisposable\" interface, and the contract that \"Dispose\" will always be called on such objects. When an \"IDisposable\" is a class member, then it\u0027s up to that class to call \"Dispose\" on it, ideally in its own \"Dispose\" method. If it\u0027s a local variable, then it should be instantiated with a \"using\" clause to prompt automatic cleanup when it goes out of scope.",
"properties":  {
"severity":  "Warning",
"warningLevel":  "1",
"defaultSeverity":  "Warning",
"title":  "\"IDisposables\" should be disposed",
"category":  "Reliability",
"helpLink":  "http://vs.sonarlint.org/rules/index.html#version=1.7.0\u0026ruleId=S2930",
"isEnabledByDefault":  "True",
"isSuppressedInSource":  "False"
}
},
{
"ruleId":  "S2930",
"locations":  [
{
"analysisTarget":  [
{
"uri":  "Nancy\\src\\Nancy.Tests\\Unit\\ErrorHandling\\DefaultStatusCodeHandlerFixture.cs",
"region":  {
"startLine":  155,
"startColumn":  16,
"endLine":  155,
"endColumn":  28
}
}
]
}
],
"shortMessage":  "\"Dispose\" of \"memoryStream\".",
"fullMessage":  "You can\u0027t rely on garbage collection to clean up everything. Specifically, you can\u0027t count on it to release non-memory resources such as \"File\"s. For that, there\u0027s the \"IDisposable\" interface, and the contract that \"Dispose\" will always be called on such objects. When an \"IDisposable\" is a class member, then it\u0027s up to that class to call \"Dispose\" on it, ideally in its own \"Dispose\" method. If it\u0027s a local variable, then it should be instantiated with a \"using\" clause to prompt automatic cleanup when it goes out of scope.",
"properties":  {
"severity":  "Warning",
"warningLevel":  "1",
"defaultSeverity":  "Warning",
"title":  "\"IDisposables\" should be disposed",
"category":  "Reliability",
"helpLink":  "http://vs.sonarlint.org/rules/index.html#version=1.7.0\u0026ruleId=S2930",
"isEnabledByDefault":  "True",
"isSuppressedInSource":  "False"
}
},
{
"ruleId":  "S2930",
"locations":  [
{
"analysisTarget":  [
{
"uri":  "Nancy\\src\\Nancy.Tests\\Unit\\ErrorHandling\\DefaultStatusCodeHandlerFixture.cs",
"region":  {
"startLine":  169,
"startColumn":  16,
"endLine":  169,
"endColumn":  23
}
}
]
}
],
"shortMessage":  "\"Dispose\" of \"context\".",
"fullMessage":  "You can\u0027t rely on garbage collection to clean up everything. Specifically, you can\u0027t count on it to release non-memory resources such as \"File\"s. For that, there\u0027s the \"IDisposable\" interface, and the contract that \"Dispose\" will always be called on such objects. When an \"IDisposable\" is a class member, then it\u0027s up to that class to call \"Dispose\" on it, ideally in its own \"Dispose\" method. If it\u0027s a local variable, then it should be instantiated with a \"using\" clause to prompt automatic cleanup when it goes out of scope.",
"properties":  {
"severity":  "Warning",
"warningLevel":  "1",
"defaultSeverity":  "Warning",
"title":  "\"IDisposables\" should be disposed",
"category":  "Reliability",
"helpLink":  "http://vs.sonarlint.org/rules/index.html#version=1.7.0\u0026ruleId=S2930",
"isEnabledByDefault":  "True",
"isSuppressedInSource":  "False"
}
},
{
"ruleId":  "S2930",
"locations":  [
{
"analysisTarget":  [
{
"uri":  "Nancy\\src\\Nancy.Tests\\Unit\\ErrorHandling\\DefaultStatusCodeHandlerFixture.cs",
"region":  {
"startLine":  182,
"startColumn":  16,
"endLine":  182,
"endColumn":  23
}
}
]
}
],
"shortMessage":  "\"Dispose\" of \"context\".",
"fullMessage":  "You can\u0027t rely on garbage collection to clean up everything. Specifically, you can\u0027t count on it to release non-memory resources such as \"File\"s. For that, there\u0027s the \"IDisposable\" interface, and the contract that \"Dispose\" will always be called on such objects. When an \"IDisposable\" is a class member, then it\u0027s up to that class to call \"Dispose\" on it, ideally in its own \"Dispose\" method. If it\u0027s a local variable, then it should be instantiated with a \"using\" clause to prompt automatic cleanup when it goes out of scope.",
"properties":  {
"severity":  "Warning",
"warningLevel":  "1",
"defaultSeverity":  "Warning",
"title":  "\"IDisposables\" should be disposed",
"category":  "Reliability",
"helpLink":  "http://vs.sonarlint.org/rules/index.html#version=1.7.0\u0026ruleId=S2930",
"isEnabledByDefault":  "True",
"isSuppressedInSource":  "False"
}
},
{
"ruleId":  "S2930",
"locations":  [
{
"analysisTarget":  [
{
"uri":  "Nancy\\src\\Nancy.Tests\\Unit\\ErrorHandling\\DefaultStatusCodeHandlerFixture.cs",
"region":  {
"startLine":  196,
"startColumn":  16,
"endLine":  196,
"endColumn":  23
}
}
]
}
],
"shortMessage":  "\"Dispose\" of \"context\".",
"fullMessage":  "You can\u0027t rely on garbage collection to clean up everything. Specifically, you can\u0027t count on it to release non-memory resources such as \"File\"s. For that, there\u0027s the \"IDisposable\" interface, and the contract that \"Dispose\" will always be called on such objects. When an \"IDisposable\" is a class member, then it\u0027s up to that class to call \"Dispose\" on it, ideally in its own \"Dispose\" method. If it\u0027s a local variable, then it should be instantiated with a \"using\" clause to prompt automatic cleanup when it goes out of scope.",
"properties":  {
"severity":  "Warning",
"warningLevel":  "1",
"defaultSeverity":  "Warning",
"title":  "\"IDisposables\" should be disposed",
"category":  "Reliability",
"helpLink":  "http://vs.sonarlint.org/rules/index.html#version=1.7.0\u0026ruleId=S2930",
"isEnabledByDefault":  "True",
"isSuppressedInSource":  "False"
}
},
{
"ruleId":  "S2930",
"locations":  [
{
"analysisTarget":  [
{
"uri":  "Nancy\\src\\Nancy.Tests\\Unit\\Extensions\\ContextExtensionsFixture.cs",
"region":  {
"startLine":  23,
"startColumn":  16,
"endLine":  23,
"endColumn":  23
}
}
]
}
],
"shortMessage":  "\"Dispose\" of \"context\".",
"fullMessage":  "You can\u0027t rely on garbage collection to clean up everything. Specifically, you can\u0027t count on it to release non-memory resources such as \"File\"s. For that, there\u0027s the \"IDisposable\" interface, and the contract that \"Dispose\" will always be called on such objects. When an \"IDisposable\" is a class member, then it\u0027s up to that class to call \"Dispose\" on it, ideally in its own \"Dispose\" method. If it\u0027s a local variable, then it should be instantiated with a \"using\" clause to prompt automatic cleanup when it goes out of scope.",
"properties":  {
"severity":  "Warning",
"warningLevel":  "1",
"defaultSeverity":  "Warning",
"title":  "\"IDisposables\" should be disposed",
"category":  "Reliability",
"helpLink":  "http://vs.sonarlint.org/rules/index.html#version=1.7.0\u0026ruleId=S2930",
"isEnabledByDefault":  "True",
"isSuppressedInSource":  "False"
}
},
{
"ruleId":  "S2930",
"locations":  [
{
"analysisTarget":  [
{
"uri":  "Nancy\\src\\Nancy.Tests\\Unit\\Extensions\\ContextExtensionsFixture.cs",
"region":  {
"startLine":  36,
"startColumn":  16,
"endLine":  36,
"endColumn":  23
}
}
]
}
],
"shortMessage":  "\"Dispose\" of \"context\".",
"fullMessage":  "You can\u0027t rely on garbage collection to clean up everything. Specifically, you can\u0027t count on it to release non-memory resources such as \"File\"s. For that, there\u0027s the \"IDisposable\" interface, and the contract that \"Dispose\" will always be called on such objects. When an \"IDisposable\" is a class member, then it\u0027s up to that class to call \"Dispose\" on it, ideally in its own \"Dispose\" method. If it\u0027s a local variable, then it should be instantiated with a \"using\" clause to prompt automatic cleanup when it goes out of scope.",
"properties":  {
"severity":  "Warning",
"warningLevel":  "1",
"defaultSeverity":  "Warning",
"title":  "\"IDisposables\" should be disposed",
"category":  "Reliability",
"helpLink":  "http://vs.sonarlint.org/rules/index.html#version=1.7.0\u0026ruleId=S2930",
"isEnabledByDefault":  "True",
"isSuppressedInSource":  "False"
}
},
{
"ruleId":  "S2930",
"locations":  [
{
"analysisTarget":  [
{
"uri":  "Nancy\\src\\Nancy.Tests\\Unit\\Extensions\\ContextExtensionsFixture.cs",
"region":  {
"startLine":  46,
"startColumn":  16,
"endLine":  46,
"endColumn":  23
}
}
]
}
],
"shortMessage":  "\"Dispose\" of \"context\".",
"fullMessage":  "You can\u0027t rely on garbage collection to clean up everything. Specifically, you can\u0027t count on it to release non-memory resources such as \"File\"s. For that, there\u0027s the \"IDisposable\" interface, and the contract that \"Dispose\" will always be called on such objects. When an \"IDisposable\" is a class member, then it\u0027s up to that class to call \"Dispose\" on it, ideally in its own \"Dispose\" method. If it\u0027s a local variable, then it should be instantiated with a \"using\" clause to prompt automatic cleanup when it goes out of scope.",
"properties":  {
"severity":  "Warning",
"warningLevel":  "1",
"defaultSeverity":  "Warning",
"title":  "\"IDisposables\" should be disposed",
"category":  "Reliability",
"helpLink":  "http://vs.sonarlint.org/rules/index.html#version=1.7.0\u0026ruleId=S2930",
"isEnabledByDefault":  "True",
"isSuppressedInSource":  "False"
}
},
{
"ruleId":  "S2930",
"locations":  [
{
"analysisTarget":  [
{
"uri":  "Nancy\\src\\Nancy.Tests\\Unit\\Extensions\\ContextExtensionsFixture.cs",
"region":  {
"startLine":  65,
"startColumn":  16,
"endLine":  65,
"endColumn":  23
}
}
]
}
],
"shortMessage":  "\"Dispose\" of \"request\".",
"fullMessage":  "You can\u0027t rely on garbage collection to clean up everything. Specifically, you can\u0027t count on it to release non-memory resources such as \"File\"s. For that, there\u0027s the \"IDisposable\" interface, and the contract that \"Dispose\" will always be called on such objects. When an \"IDisposable\" is a class member, then it\u0027s up to that class to call \"Dispose\" on it, ideally in its own \"Dispose\" method. If it\u0027s a local variable, then it should be instantiated with a \"using\" clause to prompt automatic cleanup when it goes out of scope.",
"properties":  {
"severity":  "Warning",
"warningLevel":  "1",
"defaultSeverity":  "Warning",
"title":  "\"IDisposables\" should be disposed",
"category":  "Reliability",
"helpLink":  "http://vs.sonarlint.org/rules/index.html#version=1.7.0\u0026ruleId=S2930",
"isEnabledByDefault":  "True",
"isSuppressedInSource":  "False"
}
},
{
"ruleId":  "S2930",
"locations":  [
{
"analysisTarget":  [
{
"uri":  "Nancy\\src\\Nancy.Tests\\Unit\\Extensions\\ContextExtensionsFixture.cs",
"region":  {
"startLine":  66,
"startColumn":  16,
"endLine":  66,
"endColumn":  28
}
}
]
}
],
"shortMessage":  "\"Dispose\" of \"nancyContext\".",
"fullMessage":  "You can\u0027t rely on garbage collection to clean up everything. Specifically, you can\u0027t count on it to release non-memory resources such as \"File\"s. For that, there\u0027s the \"IDisposable\" interface, and the contract that \"Dispose\" will always be called on such objects. When an \"IDisposable\" is a class member, then it\u0027s up to that class to call \"Dispose\" on it, ideally in its own \"Dispose\" method. If it\u0027s a local variable, then it should be instantiated with a \"using\" clause to prompt automatic cleanup when it goes out of scope.",
"properties":  {
"severity":  "Warning",
"warningLevel":  "1",
"defaultSeverity":  "Warning",
"title":  "\"IDisposables\" should be disposed",
"category":  "Reliability",
"helpLink":  "http://vs.sonarlint.org/rules/index.html#version=1.7.0\u0026ruleId=S2930",
"isEnabledByDefault":  "True",
"isSuppressedInSource":  "False"
}
},
{
"ruleId":  "S2930",
"locations":  [
{
"analysisTarget":  [
{
"uri":  "Nancy\\src\\Nancy.Tests\\Unit\\Extensions\\ContextExtensionsFixture.cs",
"region":  {
"startLine":  85,
"startColumn":  16,
"endLine":  85,
"endColumn":  23
}
}
]
}
],
"shortMessage":  "\"Dispose\" of \"request\".",
"fullMessage":  "You can\u0027t rely on garbage collection to clean up everything. Specifically, you can\u0027t count on it to release non-memory resources such as \"File\"s. For that, there\u0027s the \"IDisposable\" interface, and the contract that \"Dispose\" will always be called on such objects. When an \"IDisposable\" is a class member, then it\u0027s up to that class to call \"Dispose\" on it, ideally in its own \"Dispose\" method. If it\u0027s a local variable, then it should be instantiated with a \"using\" clause to prompt automatic cleanup when it goes out of scope.",
"properties":  {
"severity":  "Warning",
"warningLevel":  "1",
"defaultSeverity":  "Warning",
"title":  "\"IDisposables\" should be disposed",
"category":  "Reliability",
"helpLink":  "http://vs.sonarlint.org/rules/index.html#version=1.7.0\u0026ruleId=S2930",
"isEnabledByDefault":  "True",
"isSuppressedInSource":  "False"
}
},
{
"ruleId":  "S2930",
"locations":  [
{
"analysisTarget":  [
{
"uri":  "Nancy\\src\\Nancy.Tests\\Unit\\Extensions\\ContextExtensionsFixture.cs",
"region":  {
"startLine":  86,
"startColumn":  16,
"endLine":  86,
"endColumn":  28
}
}
]
}
],
"shortMessage":  "\"Dispose\" of \"nancyContext\".",
"fullMessage":  "You can\u0027t rely on garbage collection to clean up everything. Specifically, you can\u0027t count on it to release non-memory resources such as \"File\"s. For that, there\u0027s the \"IDisposable\" interface, and the contract that \"Dispose\" will always be called on such objects. When an \"IDisposable\" is a class member, then it\u0027s up to that class to call \"Dispose\" on it, ideally in its own \"Dispose\" method. If it\u0027s a local variable, then it should be instantiated with a \"using\" clause to prompt automatic cleanup when it goes out of scope.",
"properties":  {
"severity":  "Warning",
"warningLevel":  "1",
"defaultSeverity":  "Warning",
"title":  "\"IDisposables\" should be disposed",
"category":  "Reliability",
"helpLink":  "http://vs.sonarlint.org/rules/index.html#version=1.7.0\u0026ruleId=S2930",
"isEnabledByDefault":  "True",
"isSuppressedInSource":  "False"
}
},
{
"ruleId":  "S2930",
"locations":  [
{
"analysisTarget":  [
{
"uri":  "Nancy\\src\\Nancy.Tests\\Unit\\Extensions\\ContextExtensionsFixture.cs",
"region":  {
"startLine":  105,
"startColumn":  16,
"endLine":  105,
"endColumn":  23
}
}
]
}
],
"shortMessage":  "\"Dispose\" of \"request\".",
"fullMessage":  "You can\u0027t rely on garbage collection to clean up everything. Specifically, you can\u0027t count on it to release non-memory resources such as \"File\"s. For that, there\u0027s the \"IDisposable\" interface, and the contract that \"Dispose\" will always be called on such objects. When an \"IDisposable\" is a class member, then it\u0027s up to that class to call \"Dispose\" on it, ideally in its own \"Dispose\" method. If it\u0027s a local variable, then it should be instantiated with a \"using\" clause to prompt automatic cleanup when it goes out of scope.",
"properties":  {
"severity":  "Warning",
"warningLevel":  "1",
"defaultSeverity":  "Warning",
"title":  "\"IDisposables\" should be disposed",
"category":  "Reliability",
"helpLink":  "http://vs.sonarlint.org/rules/index.html#version=1.7.0\u0026ruleId=S2930",
"isEnabledByDefault":  "True",
"isSuppressedInSource":  "False"
}
},
{
"ruleId":  "S2930",
"locations":  [
{
"analysisTarget":  [
{
"uri":  "Nancy\\src\\Nancy.Tests\\Unit\\Extensions\\ContextExtensionsFixture.cs",
"region":  {
"startLine":  106,
"startColumn":  16,
"endLine":  106,
"endColumn":  28
}
}
]
}
],
"shortMessage":  "\"Dispose\" of \"nancyContext\".",
"fullMessage":  "You can\u0027t rely on garbage collection to clean up everything. Specifically, you can\u0027t count on it to release non-memory resources such as \"File\"s. For that, there\u0027s the \"IDisposable\" interface, and the contract that \"Dispose\" will always be called on such objects. When an \"IDisposable\" is a class member, then it\u0027s up to that class to call \"Dispose\" on it, ideally in its own \"Dispose\" method. If it\u0027s a local variable, then it should be instantiated with a \"using\" clause to prompt automatic cleanup when it goes out of scope.",
"properties":  {
"severity":  "Warning",
"warningLevel":  "1",
"defaultSeverity":  "Warning",
"title":  "\"IDisposables\" should be disposed",
"category":  "Reliability",
"helpLink":  "http://vs.sonarlint.org/rules/index.html#version=1.7.0\u0026ruleId=S2930",
"isEnabledByDefault":  "True",
"isSuppressedInSource":  "False"
}
},
{
"ruleId":  "S2930",
"locations":  [
{
"analysisTarget":  [
{
"uri":  "Nancy\\src\\Nancy.Tests\\Unit\\Extensions\\ContextExtensionsFixture.cs",
"region":  {
"startLine":  223,
"startColumn":  16,
"endLine":  223,
"endColumn":  23
}
}
]
}
],
"shortMessage":  "\"Dispose\" of \"request\".",
"fullMessage":  "You can\u0027t rely on garbage collection to clean up everything. Specifically, you can\u0027t count on it to release non-memory resources such as \"File\"s. For that, there\u0027s the \"IDisposable\" interface, and the contract that \"Dispose\" will always be called on such objects. When an \"IDisposable\" is a class member, then it\u0027s up to that class to call \"Dispose\" on it, ideally in its own \"Dispose\" method. If it\u0027s a local variable, then it should be instantiated with a \"using\" clause to prompt automatic cleanup when it goes out of scope.",
"properties":  {
"severity":  "Warning",
"warningLevel":  "1",
"defaultSeverity":  "Warning",
"title":  "\"IDisposables\" should be disposed",
"category":  "Reliability",
"helpLink":  "http://vs.sonarlint.org/rules/index.html#version=1.7.0\u0026ruleId=S2930",
"isEnabledByDefault":  "True",
"isSuppressedInSource":  "False"
}
},
{
"ruleId":  "S2930",
"locations":  [
{
"analysisTarget":  [
{
"uri":  "Nancy\\src\\Nancy.Tests\\Unit\\Extensions\\RequestExtensionsFixture.cs",
"region":  {
"startLine":  22,
"startColumn":  16,
"endLine":  22,
"endColumn":  23
}
}
]
}
],
"shortMessage":  "\"Dispose\" of \"request\".",
"fullMessage":  "You can\u0027t rely on garbage collection to clean up everything. Specifically, you can\u0027t count on it to release non-memory resources such as \"File\"s. For that, there\u0027s the \"IDisposable\" interface, and the contract that \"Dispose\" will always be called on such objects. When an \"IDisposable\" is a class member, then it\u0027s up to that class to call \"Dispose\" on it, ideally in its own \"Dispose\" method. If it\u0027s a local variable, then it should be instantiated with a \"using\" clause to prompt automatic cleanup when it goes out of scope.",
"properties":  {
"severity":  "Warning",
"warningLevel":  "1",
"defaultSeverity":  "Warning",
"title":  "\"IDisposables\" should be disposed",
"category":  "Reliability",
"helpLink":  "http://vs.sonarlint.org/rules/index.html#version=1.7.0\u0026ruleId=S2930",
"isEnabledByDefault":  "True",
"isSuppressedInSource":  "False"
}
},
{
"ruleId":  "S2930",
"locations":  [
{
"analysisTarget":  [
{
"uri":  "Nancy\\src\\Nancy.Tests\\Unit\\Extensions\\RequestExtensionsFixture.cs",
"region":  {
"startLine":  32,
"startColumn":  16,
"endLine":  32,
"endColumn":  23
}
}
]
}
],
"shortMessage":  "\"Dispose\" of \"request\".",
"fullMessage":  "You can\u0027t rely on garbage collection to clean up everything. Specifically, you can\u0027t count on it to release non-memory resources such as \"File\"s. For that, there\u0027s the \"IDisposable\" interface, and the contract that \"Dispose\" will always be called on such objects. When an \"IDisposable\" is a class member, then it\u0027s up to that class to call \"Dispose\" on it, ideally in its own \"Dispose\" method. If it\u0027s a local variable, then it should be instantiated with a \"using\" clause to prompt automatic cleanup when it goes out of scope.",
"properties":  {
"severity":  "Warning",
"warningLevel":  "1",
"defaultSeverity":  "Warning",
"title":  "\"IDisposables\" should be disposed",
"category":  "Reliability",
"helpLink":  "http://vs.sonarlint.org/rules/index.html#version=1.7.0\u0026ruleId=S2930",
"isEnabledByDefault":  "True",
"isSuppressedInSource":  "False"
}
},
{
"ruleId":  "S2930",
"locations":  [
{
"analysisTarget":  [
{
"uri":  "Nancy\\src\\Nancy.Tests\\Unit\\Extensions\\RequestExtensionsFixture.cs",
"region":  {
"startLine":  42,
"startColumn":  16,
"endLine":  42,
"endColumn":  23
}
}
]
}
],
"shortMessage":  "\"Dispose\" of \"request\".",
"fullMessage":  "You can\u0027t rely on garbage collection to clean up everything. Specifically, you can\u0027t count on it to release non-memory resources such as \"File\"s. For that, there\u0027s the \"IDisposable\" interface, and the contract that \"Dispose\" will always be called on such objects. When an \"IDisposable\" is a class member, then it\u0027s up to that class to call \"Dispose\" on it, ideally in its own \"Dispose\" method. If it\u0027s a local variable, then it should be instantiated with a \"using\" clause to prompt automatic cleanup when it goes out of scope.",
"properties":  {
"severity":  "Warning",
"warningLevel":  "1",
"defaultSeverity":  "Warning",
"title":  "\"IDisposables\" should be disposed",
"category":  "Reliability",
"helpLink":  "http://vs.sonarlint.org/rules/index.html#version=1.7.0\u0026ruleId=S2930",
"isEnabledByDefault":  "True",
"isSuppressedInSource":  "False"
}
},
{
"ruleId":  "S2930",
"locations":  [
{
"analysisTarget":  [
{
"uri":  "Nancy\\src\\Nancy.Tests\\Unit\\Extensions\\RequestExtensionsFixture.cs",
"region":  {
"startLine":  53,
"startColumn":  16,
"endLine":  53,
"endColumn":  23
}
}
]
}
],
"shortMessage":  "\"Dispose\" of \"request\".",
"fullMessage":  "You can\u0027t rely on garbage collection to clean up everything. Specifically, you can\u0027t count on it to release non-memory resources such as \"File\"s. For that, there\u0027s the \"IDisposable\" interface, and the contract that \"Dispose\" will always be called on such objects. When an \"IDisposable\" is a class member, then it\u0027s up to that class to call \"Dispose\" on it, ideally in its own \"Dispose\" method. If it\u0027s a local variable, then it should be instantiated with a \"using\" clause to prompt automatic cleanup when it goes out of scope.",
"properties":  {
"severity":  "Warning",
"warningLevel":  "1",
"defaultSeverity":  "Warning",
"title":  "\"IDisposables\" should be disposed",
"category":  "Reliability",
"helpLink":  "http://vs.sonarlint.org/rules/index.html#version=1.7.0\u0026ruleId=S2930",
"isEnabledByDefault":  "True",
"isSuppressedInSource":  "False"
}
},
{
"ruleId":  "S2930",
"locations":  [
{
"analysisTarget":  [
{
"uri":  "Nancy\\src\\Nancy.Tests\\Unit\\Extensions\\RequestExtensionsFixture.cs",
"region":  {
"startLine":  63,
"startColumn":  16,
"endLine":  63,
"endColumn":  23
}
}
]
}
],
"shortMessage":  "\"Dispose\" of \"request\".",
"fullMessage":  "You can\u0027t rely on garbage collection to clean up everything. Specifically, you can\u0027t count on it to release non-memory resources such as \"File\"s. For that, there\u0027s the \"IDisposable\" interface, and the contract that \"Dispose\" will always be called on such objects. When an \"IDisposable\" is a class member, then it\u0027s up to that class to call \"Dispose\" on it, ideally in its own \"Dispose\" method. If it\u0027s a local variable, then it should be instantiated with a \"using\" clause to prompt automatic cleanup when it goes out of scope.",
"properties":  {
"severity":  "Warning",
"warningLevel":  "1",
"defaultSeverity":  "Warning",
"title":  "\"IDisposables\" should be disposed",
"category":  "Reliability",
"helpLink":  "http://vs.sonarlint.org/rules/index.html#version=1.7.0\u0026ruleId=S2930",
"isEnabledByDefault":  "True",
"isSuppressedInSource":  "False"
}
},
{
"ruleId":  "S2930",
"locations":  [
{
"analysisTarget":  [
{
"uri":  "Nancy\\src\\Nancy.Tests\\Unit\\Extensions\\RequestExtensionsFixture.cs",
"region":  {
"startLine":  73,
"startColumn":  16,
"endLine":  73,
"endColumn":  23
}
}
]
}
],
"shortMessage":  "\"Dispose\" of \"request\".",
"fullMessage":  "You can\u0027t rely on garbage collection to clean up everything. Specifically, you can\u0027t count on it to release non-memory resources such as \"File\"s. For that, there\u0027s the \"IDisposable\" interface, and the contract that \"Dispose\" will always be called on such objects. When an \"IDisposable\" is a class member, then it\u0027s up to that class to call \"Dispose\" on it, ideally in its own \"Dispose\" method. If it\u0027s a local variable, then it should be instantiated with a \"using\" clause to prompt automatic cleanup when it goes out of scope.",
"properties":  {
"severity":  "Warning",
"warningLevel":  "1",
"defaultSeverity":  "Warning",
"title":  "\"IDisposables\" should be disposed",
"category":  "Reliability",
"helpLink":  "http://vs.sonarlint.org/rules/index.html#version=1.7.0\u0026ruleId=S2930",
"isEnabledByDefault":  "True",
"isSuppressedInSource":  "False"
}
},
{
"ruleId":  "S2930",
"locations":  [
{
"analysisTarget":  [
{
"uri":  "Nancy\\src\\Nancy.Tests\\Unit\\Extensions\\RequestExtensionsFixture.cs",
"region":  {
"startLine":  84,
"startColumn":  16,
"endLine":  84,
"endColumn":  23
}
}
]
}
],
"shortMessage":  "\"Dispose\" of \"request\".",
"fullMessage":  "You can\u0027t rely on garbage collection to clean up everything. Specifically, you can\u0027t count on it to release non-memory resources such as \"File\"s. For that, there\u0027s the \"IDisposable\" interface, and the contract that \"Dispose\" will always be called on such objects. When an \"IDisposable\" is a class member, then it\u0027s up to that class to call \"Dispose\" on it, ideally in its own \"Dispose\" method. If it\u0027s a local variable, then it should be instantiated with a \"using\" clause to prompt automatic cleanup when it goes out of scope.",
"properties":  {
"severity":  "Warning",
"warningLevel":  "1",
"defaultSeverity":  "Warning",
"title":  "\"IDisposables\" should be disposed",
"category":  "Reliability",
"helpLink":  "http://vs.sonarlint.org/rules/index.html#version=1.7.0\u0026ruleId=S2930",
"isEnabledByDefault":  "True",
"isSuppressedInSource":  "False"
}
},
{
"ruleId":  "S2930",
"locations":  [
{
"analysisTarget":  [
{
"uri":  "Nancy\\src\\Nancy.Tests\\Unit\\FormatterExtensionsFixture.cs",
"region":  {
"startLine":  9,
"startColumn":  38,
"endLine":  9,
"endColumn":  45
}
}
]
}
],
"shortMessage":  "\"Dispose\" of \"context\".",
"fullMessage":  "You can\u0027t rely on garbage collection to clean up everything. Specifically, you can\u0027t count on it to release non-memory resources such as \"File\"s. For that, there\u0027s the \"IDisposable\" interface, and the contract that \"Dispose\" will always be called on such objects. When an \"IDisposable\" is a class member, then it\u0027s up to that class to call \"Dispose\" on it, ideally in its own \"Dispose\" method. If it\u0027s a local variable, then it should be instantiated with a \"using\" clause to prompt automatic cleanup when it goes out of scope.",
"properties":  {
"severity":  "Warning",
"warningLevel":  "1",
"defaultSeverity":  "Warning",
"title":  "\"IDisposables\" should be disposed",
"category":  "Reliability",
"helpLink":  "http://vs.sonarlint.org/rules/index.html#version=1.7.0\u0026ruleId=S2930",
"isEnabledByDefault":  "True",
"isSuppressedInSource":  "False"
}
},
{
"ruleId":  "S2930",
"locations":  [
{
"analysisTarget":  [
{
"uri":  "Nancy\\src\\Nancy.Tests\\Unit\\HttpMultipartBoundaryFixture.cs",
"region":  {
"startLine":  160,
"startColumn":  16,
"endLine":  160,
"endColumn":  22
}
}
]
}
],
"shortMessage":  "\"Dispose\" of \"memory\".",
"fullMessage":  "You can\u0027t rely on garbage collection to clean up everything. Specifically, you can\u0027t count on it to release non-memory resources such as \"File\"s. For that, there\u0027s the \"IDisposable\" interface, and the contract that \"Dispose\" will always be called on such objects. When an \"IDisposable\" is a class member, then it\u0027s up to that class to call \"Dispose\" on it, ideally in its own \"Dispose\" method. If it\u0027s a local variable, then it should be instantiated with a \"using\" clause to prompt automatic cleanup when it goes out of scope.",
"properties":  {
"severity":  "Warning",
"warningLevel":  "1",
"defaultSeverity":  "Warning",
"title":  "\"IDisposables\" should be disposed",
"category":  "Reliability",
"helpLink":  "http://vs.sonarlint.org/rules/index.html#version=1.7.0\u0026ruleId=S2930",
"isEnabledByDefault":  "True",
"isSuppressedInSource":  "False"
}
},
{
"ruleId":  "S2930",
"locations":  [
{
"analysisTarget":  [
{
"uri":  "Nancy\\src\\Nancy.Tests\\Unit\\HttpMultipartFixture.cs",
"region":  {
"startLine":  51,
"startColumn":  16,
"endLine":  51,
"endColumn":  22
}
}
]
}
],
"shortMessage":  "\"Dispose\" of \"stream\".",
"fullMessage":  "You can\u0027t rely on garbage collection to clean up everything. Specifically, you can\u0027t count on it to release non-memory resources such as \"File\"s. For that, there\u0027s the \"IDisposable\" interface, and the contract that \"Dispose\" will always be called on such objects. When an \"IDisposable\" is a class member, then it\u0027s up to that class to call \"Dispose\" on it, ideally in its own \"Dispose\" method. If it\u0027s a local variable, then it should be instantiated with a \"using\" clause to prompt automatic cleanup when it goes out of scope.",
"properties":  {
"severity":  "Warning",
"warningLevel":  "1",
"defaultSeverity":  "Warning",
"title":  "\"IDisposables\" should be disposed",
"category":  "Reliability",
"helpLink":  "http://vs.sonarlint.org/rules/index.html#version=1.7.0\u0026ruleId=S2930",
"isEnabledByDefault":  "True",
"isSuppressedInSource":  "False"
}
},
{
"ruleId":  "S2930",
"locations":  [
{
"analysisTarget":  [
{
"uri":  "Nancy\\src\\Nancy.Tests\\Unit\\HttpMultipartFixture.cs",
"region":  {
"startLine":  62,
"startColumn":  16,
"endLine":  62,
"endColumn":  23
}
}
]
}
],
"shortMessage":  "\"Dispose\" of \"request\".",
"fullMessage":  "You can\u0027t rely on garbage collection to clean up everything. Specifically, you can\u0027t count on it to release non-memory resources such as \"File\"s. For that, there\u0027s the \"IDisposable\" interface, and the contract that \"Dispose\" will always be called on such objects. When an \"IDisposable\" is a class member, then it\u0027s up to that class to call \"Dispose\" on it, ideally in its own \"Dispose\" method. If it\u0027s a local variable, then it should be instantiated with a \"using\" clause to prompt automatic cleanup when it goes out of scope.",
"properties":  {
"severity":  "Warning",
"warningLevel":  "1",
"defaultSeverity":  "Warning",
"title":  "\"IDisposables\" should be disposed",
"category":  "Reliability",
"helpLink":  "http://vs.sonarlint.org/rules/index.html#version=1.7.0\u0026ruleId=S2930",
"isEnabledByDefault":  "True",
"isSuppressedInSource":  "False"
}
},
{
"ruleId":  "S2930",
"locations":  [
{
"analysisTarget":  [
{
"uri":  "Nancy\\src\\Nancy.Tests\\Unit\\HttpMultipartFixture.cs",
"region":  {
"startLine":  81,
"startColumn":  16,
"endLine":  81,
"endColumn":  22
}
}
]
}
],
"shortMessage":  "\"Dispose\" of \"stream\".",
"fullMessage":  "You can\u0027t rely on garbage collection to clean up everything. Specifically, you can\u0027t count on it to release non-memory resources such as \"File\"s. For that, there\u0027s the \"IDisposable\" interface, and the contract that \"Dispose\" will always be called on such objects. When an \"IDisposable\" is a class member, then it\u0027s up to that class to call \"Dispose\" on it, ideally in its own \"Dispose\" method. If it\u0027s a local variable, then it should be instantiated with a \"using\" clause to prompt automatic cleanup when it goes out of scope.",
"properties":  {
"severity":  "Warning",
"warningLevel":  "1",
"defaultSeverity":  "Warning",
"title":  "\"IDisposables\" should be disposed",
"category":  "Reliability",
"helpLink":  "http://vs.sonarlint.org/rules/index.html#version=1.7.0\u0026ruleId=S2930",
"isEnabledByDefault":  "True",
"isSuppressedInSource":  "False"
}
},
{
"ruleId":  "S2930",
"locations":  [
{
"analysisTarget":  [
{
"uri":  "Nancy\\src\\Nancy.Tests\\Unit\\HttpMultipartFixture.cs",
"region":  {
"startLine":  92,
"startColumn":  16,
"endLine":  92,
"endColumn":  23
}
}
]
}
],
"shortMessage":  "\"Dispose\" of \"request\".",
"fullMessage":  "You can\u0027t rely on garbage collection to clean up everything. Specifically, you can\u0027t count on it to release non-memory resources such as \"File\"s. For that, there\u0027s the \"IDisposable\" interface, and the contract that \"Dispose\" will always be called on such objects. When an \"IDisposable\" is a class member, then it\u0027s up to that class to call \"Dispose\" on it, ideally in its own \"Dispose\" method. If it\u0027s a local variable, then it should be instantiated with a \"using\" clause to prompt automatic cleanup when it goes out of scope.",
"properties":  {
"severity":  "Warning",
"warningLevel":  "1",
"defaultSeverity":  "Warning",
"title":  "\"IDisposables\" should be disposed",
"category":  "Reliability",
"helpLink":  "http://vs.sonarlint.org/rules/index.html#version=1.7.0\u0026ruleId=S2930",
"isEnabledByDefault":  "True",
"isSuppressedInSource":  "False"
}
},
{
"ruleId":  "S2930",
"locations":  [
{
"analysisTarget":  [
{
"uri":  "Nancy\\src\\Nancy.Tests\\Unit\\HttpMultipartFixture.cs",
"region":  {
"startLine":  111,
"startColumn":  16,
"endLine":  111,
"endColumn":  22
}
}
]
}
],
"shortMessage":  "\"Dispose\" of \"stream\".",
"fullMessage":  "You can\u0027t rely on garbage collection to clean up everything. Specifically, you can\u0027t count on it to release non-memory resources such as \"File\"s. For that, there\u0027s the \"IDisposable\" interface, and the contract that \"Dispose\" will always be called on such objects. When an \"IDisposable\" is a class member, then it\u0027s up to that class to call \"Dispose\" on it, ideally in its own \"Dispose\" method. If it\u0027s a local variable, then it should be instantiated with a \"using\" clause to prompt automatic cleanup when it goes out of scope.",
"properties":  {
"severity":  "Warning",
"warningLevel":  "1",
"defaultSeverity":  "Warning",
"title":  "\"IDisposables\" should be disposed",
"category":  "Reliability",
"helpLink":  "http://vs.sonarlint.org/rules/index.html#version=1.7.0\u0026ruleId=S2930",
"isEnabledByDefault":  "True",
"isSuppressedInSource":  "False"
}
},
{
"ruleId":  "S2930",
"locations":  [
{
"analysisTarget":  [
{
"uri":  "Nancy\\src\\Nancy.Tests\\Unit\\HttpMultipartFixture.cs",
"region":  {
"startLine":  122,
"startColumn":  16,
"endLine":  122,
"endColumn":  23
}
}
]
}
],
"shortMessage":  "\"Dispose\" of \"request\".",
"fullMessage":  "You can\u0027t rely on garbage collection to clean up everything. Specifically, you can\u0027t count on it to release non-memory resources such as \"File\"s. For that, there\u0027s the \"IDisposable\" interface, and the contract that \"Dispose\" will always be called on such objects. When an \"IDisposable\" is a class member, then it\u0027s up to that class to call \"Dispose\" on it, ideally in its own \"Dispose\" method. If it\u0027s a local variable, then it should be instantiated with a \"using\" clause to prompt automatic cleanup when it goes out of scope.",
"properties":  {
"severity":  "Warning",
"warningLevel":  "1",
"defaultSeverity":  "Warning",
"title":  "\"IDisposables\" should be disposed",
"category":  "Reliability",
"helpLink":  "http://vs.sonarlint.org/rules/index.html#version=1.7.0\u0026ruleId=S2930",
"isEnabledByDefault":  "True",
"isSuppressedInSource":  "False"
}
},
{
"ruleId":  "S2930",
"locations":  [
{
"analysisTarget":  [
{
"uri":  "Nancy\\src\\Nancy.Tests\\Unit\\HttpMultipartFixture.cs",
"region":  {
"startLine":  142,
"startColumn":  16,
"endLine":  142,
"endColumn":  22
}
}
]
}
],
"shortMessage":  "\"Dispose\" of \"stream\".",
"fullMessage":  "You can\u0027t rely on garbage collection to clean up everything. Specifically, you can\u0027t count on it to release non-memory resources such as \"File\"s. For that, there\u0027s the \"IDisposable\" interface, and the contract that \"Dispose\" will always be called on such objects. When an \"IDisposable\" is a class member, then it\u0027s up to that class to call \"Dispose\" on it, ideally in its own \"Dispose\" method. If it\u0027s a local variable, then it should be instantiated with a \"using\" clause to prompt automatic cleanup when it goes out of scope.",
"properties":  {
"severity":  "Warning",
"warningLevel":  "1",
"defaultSeverity":  "Warning",
"title":  "\"IDisposables\" should be disposed",
"category":  "Reliability",
"helpLink":  "http://vs.sonarlint.org/rules/index.html#version=1.7.0\u0026ruleId=S2930",
"isEnabledByDefault":  "True",
"isSuppressedInSource":  "False"
}
},
{
"ruleId":  "S2930",
"locations":  [
{
"analysisTarget":  [
{
"uri":  "Nancy\\src\\Nancy.Tests\\Unit\\HttpMultipartFixture.cs",
"region":  {
"startLine":  153,
"startColumn":  16,
"endLine":  153,
"endColumn":  23
}
}
]
}
],
"shortMessage":  "\"Dispose\" of \"request\".",
"fullMessage":  "You can\u0027t rely on garbage collection to clean up everything. Specifically, you can\u0027t count on it to release non-memory resources such as \"File\"s. For that, there\u0027s the \"IDisposable\" interface, and the contract that \"Dispose\" will always be called on such objects. When an \"IDisposable\" is a class member, then it\u0027s up to that class to call \"Dispose\" on it, ideally in its own \"Dispose\" method. If it\u0027s a local variable, then it should be instantiated with a \"using\" clause to prompt automatic cleanup when it goes out of scope.",
"properties":  {
"severity":  "Warning",
"warningLevel":  "1",
"defaultSeverity":  "Warning",
"title":  "\"IDisposables\" should be disposed",
"category":  "Reliability",
"helpLink":  "http://vs.sonarlint.org/rules/index.html#version=1.7.0\u0026ruleId=S2930",
"isEnabledByDefault":  "True",
"isSuppressedInSource":  "False"
}
},
{
"ruleId":  "S2930",
"locations":  [
{
"analysisTarget":  [
{
"uri":  "Nancy\\src\\Nancy.Tests\\Unit\\HttpMultipartFixture.cs",
"region":  {
"startLine":  172,
"startColumn":  16,
"endLine":  172,
"endColumn":  22
}
}
]
}
],
"shortMessage":  "\"Dispose\" of \"stream\".",
"fullMessage":  "You can\u0027t rely on garbage collection to clean up everything. Specifically, you can\u0027t count on it to release non-memory resources such as \"File\"s. For that, there\u0027s the \"IDisposable\" interface, and the contract that \"Dispose\" will always be called on such objects. When an \"IDisposable\" is a class member, then it\u0027s up to that class to call \"Dispose\" on it, ideally in its own \"Dispose\" method. If it\u0027s a local variable, then it should be instantiated with a \"using\" clause to prompt automatic cleanup when it goes out of scope.",
"properties":  {
"severity":  "Warning",
"warningLevel":  "1",
"defaultSeverity":  "Warning",
"title":  "\"IDisposables\" should be disposed",
"category":  "Reliability",
"helpLink":  "http://vs.sonarlint.org/rules/index.html#version=1.7.0\u0026ruleId=S2930",
"isEnabledByDefault":  "True",
"isSuppressedInSource":  "False"
}
},
{
"ruleId":  "S2930",
"locations":  [
{
"analysisTarget":  [
{
"uri":  "Nancy\\src\\Nancy.Tests\\Unit\\HttpMultipartFixture.cs",
"region":  {
"startLine":  181,
"startColumn":  16,
"endLine":  181,
"endColumn":  23
}
}
]
}
],
"shortMessage":  "\"Dispose\" of \"request\".",
"fullMessage":  "You can\u0027t rely on garbage collection to clean up everything. Specifically, you can\u0027t count on it to release non-memory resources such as \"File\"s. For that, there\u0027s the \"IDisposable\" interface, and the contract that \"Dispose\" will always be called on such objects. When an \"IDisposable\" is a class member, then it\u0027s up to that class to call \"Dispose\" on it, ideally in its own \"Dispose\" method. If it\u0027s a local variable, then it should be instantiated with a \"using\" clause to prompt automatic cleanup when it goes out of scope.",
"properties":  {
"severity":  "Warning",
"warningLevel":  "1",
"defaultSeverity":  "Warning",
"title":  "\"IDisposables\" should be disposed",
"category":  "Reliability",
"helpLink":  "http://vs.sonarlint.org/rules/index.html#version=1.7.0\u0026ruleId=S2930",
"isEnabledByDefault":  "True",
"isSuppressedInSource":  "False"
}
},
{
"ruleId":  "S2930",
"locations":  [
{
"analysisTarget":  [
{
"uri":  "Nancy\\src\\Nancy.Tests\\Unit\\HttpMultipartFixture.cs",
"region":  {
"startLine":  215,
"startColumn":  16,
"endLine":  215,
"endColumn":  22
}
}
]
}
],
"shortMessage":  "\"Dispose\" of \"memory\".",
"fullMessage":  "You can\u0027t rely on garbage collection to clean up everything. Specifically, you can\u0027t count on it to release non-memory resources such as \"File\"s. For that, there\u0027s the \"IDisposable\" interface, and the contract that \"Dispose\" will always be called on such objects. When an \"IDisposable\" is a class member, then it\u0027s up to that class to call \"Dispose\" on it, ideally in its own \"Dispose\" method. If it\u0027s a local variable, then it should be instantiated with a \"using\" clause to prompt automatic cleanup when it goes out of scope.",
"properties":  {
"severity":  "Warning",
"warningLevel":  "1",
"defaultSeverity":  "Warning",
"title":  "\"IDisposables\" should be disposed",
"category":  "Reliability",
"helpLink":  "http://vs.sonarlint.org/rules/index.html#version=1.7.0\u0026ruleId=S2930",
"isEnabledByDefault":  "True",
"isSuppressedInSource":  "False"
}
},
{
"ruleId":  "S2930",
"locations":  [
{
"analysisTarget":  [
{
"uri":  "Nancy\\src\\Nancy.Tests\\Unit\\IO\\RequestStreamFixture.cs",
"region":  {
"startLine":  17,
"startColumn":  16,
"endLine":  17,
"endColumn":  22
}
}
]
}
],
"shortMessage":  "\"Dispose\" of \"stream\".",
"fullMessage":  "You can\u0027t rely on garbage collection to clean up everything. Specifically, you can\u0027t count on it to release non-memory resources such as \"File\"s. For that, there\u0027s the \"IDisposable\" interface, and the contract that \"Dispose\" will always be called on such objects. When an \"IDisposable\" is a class member, then it\u0027s up to that class to call \"Dispose\" on it, ideally in its own \"Dispose\" method. If it\u0027s a local variable, then it should be instantiated with a \"using\" clause to prompt automatic cleanup when it goes out of scope.",
"properties":  {
"severity":  "Warning",
"warningLevel":  "1",
"defaultSeverity":  "Warning",
"title":  "\"IDisposables\" should be disposed",
"category":  "Reliability",
"helpLink":  "http://vs.sonarlint.org/rules/index.html#version=1.7.0\u0026ruleId=S2930",
"isEnabledByDefault":  "True",
"isSuppressedInSource":  "False"
}
},
{
"ruleId":  "S2930",
"locations":  [
{
"analysisTarget":  [
{
"uri":  "Nancy\\src\\Nancy.Tests\\Unit\\IO\\RequestStreamFixture.cs",
"region":  {
"startLine":  31,
"startColumn":  16,
"endLine":  31,
"endColumn":  22
}
}
]
}
],
"shortMessage":  "\"Dispose\" of \"stream\".",
"fullMessage":  "You can\u0027t rely on garbage collection to clean up everything. Specifically, you can\u0027t count on it to release non-memory resources such as \"File\"s. For that, there\u0027s the \"IDisposable\" interface, and the contract that \"Dispose\" will always be called on such objects. When an \"IDisposable\" is a class member, then it\u0027s up to that class to call \"Dispose\" on it, ideally in its own \"Dispose\" method. If it\u0027s a local variable, then it should be instantiated with a \"using\" clause to prompt automatic cleanup when it goes out of scope.",
"properties":  {
"severity":  "Warning",
"warningLevel":  "1",
"defaultSeverity":  "Warning",
"title":  "\"IDisposables\" should be disposed",
"category":  "Reliability",
"helpLink":  "http://vs.sonarlint.org/rules/index.html#version=1.7.0\u0026ruleId=S2930",
"isEnabledByDefault":  "True",
"isSuppressedInSource":  "False"
}
},
{
"ruleId":  "S2930",
"locations":  [
{
"analysisTarget":  [
{
"uri":  "Nancy\\src\\Nancy.Tests\\Unit\\IO\\RequestStreamFixture.cs",
"region":  {
"startLine":  44,
"startColumn":  16,
"endLine":  44,
"endColumn":  27
}
}
]
}
],
"shortMessage":  "\"Dispose\" of \"inputStream\".",
"fullMessage":  "You can\u0027t rely on garbage collection to clean up everything. Specifically, you can\u0027t count on it to release non-memory resources such as \"File\"s. For that, there\u0027s the \"IDisposable\" interface, and the contract that \"Dispose\" will always be called on such objects. When an \"IDisposable\" is a class member, then it\u0027s up to that class to call \"Dispose\" on it, ideally in its own \"Dispose\" method. If it\u0027s a local variable, then it should be instantiated with a \"using\" clause to prompt automatic cleanup when it goes out of scope.",
"properties":  {
"severity":  "Warning",
"warningLevel":  "1",
"defaultSeverity":  "Warning",
"title":  "\"IDisposables\" should be disposed",
"category":  "Reliability",
"helpLink":  "http://vs.sonarlint.org/rules/index.html#version=1.7.0\u0026ruleId=S2930",
"isEnabledByDefault":  "True",
"isSuppressedInSource":  "False"
}
},
{
"ruleId":  "S2930",
"locations":  [
{
"analysisTarget":  [
{
"uri":  "Nancy\\src\\Nancy.Tests\\Unit\\IO\\RequestStreamFixture.cs",
"region":  {
"startLine":  57,
"startColumn":  16,
"endLine":  57,
"endColumn":  27
}
}
]
}
],
"shortMessage":  "\"Dispose\" of \"inputStream\".",
"fullMessage":  "You can\u0027t rely on garbage collection to clean up everything. Specifically, you can\u0027t count on it to release non-memory resources such as \"File\"s. For that, there\u0027s the \"IDisposable\" interface, and the contract that \"Dispose\" will always be called on such objects. When an \"IDisposable\" is a class member, then it\u0027s up to that class to call \"Dispose\" on it, ideally in its own \"Dispose\" method. If it\u0027s a local variable, then it should be instantiated with a \"using\" clause to prompt automatic cleanup when it goes out of scope.",
"properties":  {
"severity":  "Warning",
"warningLevel":  "1",
"defaultSeverity":  "Warning",
"title":  "\"IDisposables\" should be disposed",
"category":  "Reliability",
"helpLink":  "http://vs.sonarlint.org/rules/index.html#version=1.7.0\u0026ruleId=S2930",
"isEnabledByDefault":  "True",
"isSuppressedInSource":  "False"
}
},
{
"ruleId":  "S2930",
"locations":  [
{
"analysisTarget":  [
{
"uri":  "Nancy\\src\\Nancy.Tests\\Unit\\IO\\RequestStreamFixture.cs",
"region":  {
"startLine":  70,
"startColumn":  16,
"endLine":  70,
"endColumn":  22
}
}
]
}
],
"shortMessage":  "\"Dispose\" of \"stream\".",
"fullMessage":  "You can\u0027t rely on garbage collection to clean up everything. Specifically, you can\u0027t count on it to release non-memory resources such as \"File\"s. For that, there\u0027s the \"IDisposable\" interface, and the contract that \"Dispose\" will always be called on such objects. When an \"IDisposable\" is a class member, then it\u0027s up to that class to call \"Dispose\" on it, ideally in its own \"Dispose\" method. If it\u0027s a local variable, then it should be instantiated with a \"using\" clause to prompt automatic cleanup when it goes out of scope.",
"properties":  {
"severity":  "Warning",
"warningLevel":  "1",
"defaultSeverity":  "Warning",
"title":  "\"IDisposables\" should be disposed",
"category":  "Reliability",
"helpLink":  "http://vs.sonarlint.org/rules/index.html#version=1.7.0\u0026ruleId=S2930",
"isEnabledByDefault":  "True",
"isSuppressedInSource":  "False"
}
},
{
"ruleId":  "S2930",
"locations":  [
{
"analysisTarget":  [
{
"uri":  "Nancy\\src\\Nancy.Tests\\Unit\\IO\\RequestStreamFixture.cs",
"region":  {
"startLine":  83,
"startColumn":  16,
"endLine":  83,
"endColumn":  22
}
}
]
}
],
"shortMessage":  "\"Dispose\" of \"stream\".",
"fullMessage":  "You can\u0027t rely on garbage collection to clean up everything. Specifically, you can\u0027t count on it to release non-memory resources such as \"File\"s. For that, there\u0027s the \"IDisposable\" interface, and the contract that \"Dispose\" will always be called on such objects. When an \"IDisposable\" is a class member, then it\u0027s up to that class to call \"Dispose\" on it, ideally in its own \"Dispose\" method. If it\u0027s a local variable, then it should be instantiated with a \"using\" clause to prompt automatic cleanup when it goes out of scope.",
"properties":  {
"severity":  "Warning",
"warningLevel":  "1",
"defaultSeverity":  "Warning",
"title":  "\"IDisposables\" should be disposed",
"category":  "Reliability",
"helpLink":  "http://vs.sonarlint.org/rules/index.html#version=1.7.0\u0026ruleId=S2930",
"isEnabledByDefault":  "True",
"isSuppressedInSource":  "False"
}
},
{
"ruleId":  "S2930",
"locations":  [
{
"analysisTarget":  [
{
"uri":  "Nancy\\src\\Nancy.Tests\\Unit\\IO\\RequestStreamFixture.cs",
"region":  {
"startLine":  97,
"startColumn":  16,
"endLine":  97,
"endColumn":  22
}
}
]
}
],
"shortMessage":  "\"Dispose\" of \"stream\".",
"fullMessage":  "You can\u0027t rely on garbage collection to clean up everything. Specifically, you can\u0027t count on it to release non-memory resources such as \"File\"s. For that, there\u0027s the \"IDisposable\" interface, and the contract that \"Dispose\" will always be called on such objects. When an \"IDisposable\" is a class member, then it\u0027s up to that class to call \"Dispose\" on it, ideally in its own \"Dispose\" method. If it\u0027s a local variable, then it should be instantiated with a \"using\" clause to prompt automatic cleanup when it goes out of scope.",
"properties":  {
"severity":  "Warning",
"warningLevel":  "1",
"defaultSeverity":  "Warning",
"title":  "\"IDisposables\" should be disposed",
"category":  "Reliability",
"helpLink":  "http://vs.sonarlint.org/rules/index.html#version=1.7.0\u0026ruleId=S2930",
"isEnabledByDefault":  "True",
"isSuppressedInSource":  "False"
}
},
{
"ruleId":  "S2930",
"locations":  [
{
"analysisTarget":  [
{
"uri":  "Nancy\\src\\Nancy.Tests\\Unit\\IO\\RequestStreamFixture.cs",
"region":  {
"startLine":  111,
"startColumn":  16,
"endLine":  111,
"endColumn":  22
}
}
]
}
],
"shortMessage":  "\"Dispose\" of \"stream\".",
"fullMessage":  "You can\u0027t rely on garbage collection to clean up everything. Specifically, you can\u0027t count on it to release non-memory resources such as \"File\"s. For that, there\u0027s the \"IDisposable\" interface, and the contract that \"Dispose\" will always be called on such objects. When an \"IDisposable\" is a class member, then it\u0027s up to that class to call \"Dispose\" on it, ideally in its own \"Dispose\" method. If it\u0027s a local variable, then it should be instantiated with a \"using\" clause to prompt automatic cleanup when it goes out of scope.",
"properties":  {
"severity":  "Warning",
"warningLevel":  "1",
"defaultSeverity":  "Warning",
"title":  "\"IDisposables\" should be disposed",
"category":  "Reliability",
"helpLink":  "http://vs.sonarlint.org/rules/index.html#version=1.7.0\u0026ruleId=S2930",
"isEnabledByDefault":  "True",
"isSuppressedInSource":  "False"
}
},
{
"ruleId":  "S2930",
"locations":  [
{
"analysisTarget":  [
{
"uri":  "Nancy\\src\\Nancy.Tests\\Unit\\IO\\RequestStreamFixture.cs",
"region":  {
"startLine":  125,
"startColumn":  16,
"endLine":  125,
"endColumn":  22
}
}
]
}
],
"shortMessage":  "\"Dispose\" of \"stream\".",
"fullMessage":  "You can\u0027t rely on garbage collection to clean up everything. Specifically, you can\u0027t count on it to release non-memory resources such as \"File\"s. For that, there\u0027s the \"IDisposable\" interface, and the contract that \"Dispose\" will always be called on such objects. When an \"IDisposable\" is a class member, then it\u0027s up to that class to call \"Dispose\" on it, ideally in its own \"Dispose\" method. If it\u0027s a local variable, then it should be instantiated with a \"using\" clause to prompt automatic cleanup when it goes out of scope.",
"properties":  {
"severity":  "Warning",
"warningLevel":  "1",
"defaultSeverity":  "Warning",
"title":  "\"IDisposables\" should be disposed",
"category":  "Reliability",
"helpLink":  "http://vs.sonarlint.org/rules/index.html#version=1.7.0\u0026ruleId=S2930",
"isEnabledByDefault":  "True",
"isSuppressedInSource":  "False"
}
},
{
"ruleId":  "S2930",
"locations":  [
{
"analysisTarget":  [
{
"uri":  "Nancy\\src\\Nancy.Tests\\Unit\\IO\\RequestStreamFixture.cs",
"region":  {
"startLine":  139,
"startColumn":  16,
"endLine":  139,
"endColumn":  22
}
}
]
}
],
"shortMessage":  "\"Dispose\" of \"stream\".",
"fullMessage":  "You can\u0027t rely on garbage collection to clean up everything. Specifically, you can\u0027t count on it to release non-memory resources such as \"File\"s. For that, there\u0027s the \"IDisposable\" interface, and the contract that \"Dispose\" will always be called on such objects. When an \"IDisposable\" is a class member, then it\u0027s up to that class to call \"Dispose\" on it, ideally in its own \"Dispose\" method. If it\u0027s a local variable, then it should be instantiated with a \"using\" clause to prompt automatic cleanup when it goes out of scope.",
"properties":  {
"severity":  "Warning",
"warningLevel":  "1",
"defaultSeverity":  "Warning",
"title":  "\"IDisposables\" should be disposed",
"category":  "Reliability",
"helpLink":  "http://vs.sonarlint.org/rules/index.html#version=1.7.0\u0026ruleId=S2930",
"isEnabledByDefault":  "True",
"isSuppressedInSource":  "False"
}
},
{
"ruleId":  "S2930",
"locations":  [
{
"analysisTarget":  [
{
"uri":  "Nancy\\src\\Nancy.Tests\\Unit\\IO\\RequestStreamFixture.cs",
"region":  {
"startLine":  153,
"startColumn":  16,
"endLine":  153,
"endColumn":  22
}
}
]
}
],
"shortMessage":  "\"Dispose\" of \"stream\".",
"fullMessage":  "You can\u0027t rely on garbage collection to clean up everything. Specifically, you can\u0027t count on it to release non-memory resources such as \"File\"s. For that, there\u0027s the \"IDisposable\" interface, and the contract that \"Dispose\" will always be called on such objects. When an \"IDisposable\" is a class member, then it\u0027s up to that class to call \"Dispose\" on it, ideally in its own \"Dispose\" method. If it\u0027s a local variable, then it should be instantiated with a \"using\" clause to prompt automatic cleanup when it goes out of scope.",
"properties":  {
"severity":  "Warning",
"warningLevel":  "1",
"defaultSeverity":  "Warning",
"title":  "\"IDisposables\" should be disposed",
"category":  "Reliability",
"helpLink":  "http://vs.sonarlint.org/rules/index.html#version=1.7.0\u0026ruleId=S2930",
"isEnabledByDefault":  "True",
"isSuppressedInSource":  "False"
}
},
{
"ruleId":  "S2930",
"locations":  [
{
"analysisTarget":  [
{
"uri":  "Nancy\\src\\Nancy.Tests\\Unit\\IO\\RequestStreamFixture.cs",
"region":  {
"startLine":  167,
"startColumn":  16,
"endLine":  167,
"endColumn":  22
}
}
]
}
],
"shortMessage":  "\"Dispose\" of \"stream\".",
"fullMessage":  "You can\u0027t rely on garbage collection to clean up everything. Specifically, you can\u0027t count on it to release non-memory resources such as \"File\"s. For that, there\u0027s the \"IDisposable\" interface, and the contract that \"Dispose\" will always be called on such objects. When an \"IDisposable\" is a class member, then it\u0027s up to that class to call \"Dispose\" on it, ideally in its own \"Dispose\" method. If it\u0027s a local variable, then it should be instantiated with a \"using\" clause to prompt automatic cleanup when it goes out of scope.",
"properties":  {
"severity":  "Warning",
"warningLevel":  "1",
"defaultSeverity":  "Warning",
"title":  "\"IDisposables\" should be disposed",
"category":  "Reliability",
"helpLink":  "http://vs.sonarlint.org/rules/index.html#version=1.7.0\u0026ruleId=S2930",
"isEnabledByDefault":  "True",
"isSuppressedInSource":  "False"
}
},
{
"ruleId":  "S2930",
"locations":  [
{
"analysisTarget":  [
{
"uri":  "Nancy\\src\\Nancy.Tests\\Unit\\IO\\RequestStreamFixture.cs",
"region":  {
"startLine":  181,
"startColumn":  16,
"endLine":  181,
"endColumn":  22
}
}
]
}
],
"shortMessage":  "\"Dispose\" of \"stream\".",
"fullMessage":  "You can\u0027t rely on garbage collection to clean up everything. Specifically, you can\u0027t count on it to release non-memory resources such as \"File\"s. For that, there\u0027s the \"IDisposable\" interface, and the contract that \"Dispose\" will always be called on such objects. When an \"IDisposable\" is a class member, then it\u0027s up to that class to call \"Dispose\" on it, ideally in its own \"Dispose\" method. If it\u0027s a local variable, then it should be instantiated with a \"using\" clause to prompt automatic cleanup when it goes out of scope.",
"properties":  {
"severity":  "Warning",
"warningLevel":  "1",
"defaultSeverity":  "Warning",
"title":  "\"IDisposables\" should be disposed",
"category":  "Reliability",
"helpLink":  "http://vs.sonarlint.org/rules/index.html#version=1.7.0\u0026ruleId=S2930",
"isEnabledByDefault":  "True",
"isSuppressedInSource":  "False"
}
},
{
"ruleId":  "S2930",
"locations":  [
{
"analysisTarget":  [
{
"uri":  "Nancy\\src\\Nancy.Tests\\Unit\\IO\\RequestStreamFixture.cs",
"region":  {
"startLine":  195,
"startColumn":  16,
"endLine":  195,
"endColumn":  22
}
}
]
}
],
"shortMessage":  "\"Dispose\" of \"stream\".",
"fullMessage":  "You can\u0027t rely on garbage collection to clean up everything. Specifically, you can\u0027t count on it to release non-memory resources such as \"File\"s. For that, there\u0027s the \"IDisposable\" interface, and the contract that \"Dispose\" will always be called on such objects. When an \"IDisposable\" is a class member, then it\u0027s up to that class to call \"Dispose\" on it, ideally in its own \"Dispose\" method. If it\u0027s a local variable, then it should be instantiated with a \"using\" clause to prompt automatic cleanup when it goes out of scope.",
"properties":  {
"severity":  "Warning",
"warningLevel":  "1",
"defaultSeverity":  "Warning",
"title":  "\"IDisposables\" should be disposed",
"category":  "Reliability",
"helpLink":  "http://vs.sonarlint.org/rules/index.html#version=1.7.0\u0026ruleId=S2930",
"isEnabledByDefault":  "True",
"isSuppressedInSource":  "False"
}
},
{
"ruleId":  "S2930",
"locations":  [
{
"analysisTarget":  [
{
"uri":  "Nancy\\src\\Nancy.Tests\\Unit\\IO\\RequestStreamFixture.cs",
"region":  {
"startLine":  210,
"startColumn":  16,
"endLine":  210,
"endColumn":  22
}
}
]
}
],
"shortMessage":  "\"Dispose\" of \"stream\".",
"fullMessage":  "You can\u0027t rely on garbage collection to clean up everything. Specifically, you can\u0027t count on it to release non-memory resources such as \"File\"s. For that, there\u0027s the \"IDisposable\" interface, and the contract that \"Dispose\" will always be called on such objects. When an \"IDisposable\" is a class member, then it\u0027s up to that class to call \"Dispose\" on it, ideally in its own \"Dispose\" method. If it\u0027s a local variable, then it should be instantiated with a \"using\" clause to prompt automatic cleanup when it goes out of scope.",
"properties":  {
"severity":  "Warning",
"warningLevel":  "1",
"defaultSeverity":  "Warning",
"title":  "\"IDisposables\" should be disposed",
"category":  "Reliability",
"helpLink":  "http://vs.sonarlint.org/rules/index.html#version=1.7.0\u0026ruleId=S2930",
"isEnabledByDefault":  "True",
"isSuppressedInSource":  "False"
}
},
{
"ruleId":  "S2930",
"locations":  [
{
"analysisTarget":  [
{
"uri":  "Nancy\\src\\Nancy.Tests\\Unit\\IO\\RequestStreamFixture.cs",
"region":  {
"startLine":  224,
"startColumn":  16,
"endLine":  224,
"endColumn":  22
}
}
]
}
],
"shortMessage":  "\"Dispose\" of \"stream\".",
"fullMessage":  "You can\u0027t rely on garbage collection to clean up everything. Specifically, you can\u0027t count on it to release non-memory resources such as \"File\"s. For that, there\u0027s the \"IDisposable\" interface, and the contract that \"Dispose\" will always be called on such objects. When an \"IDisposable\" is a class member, then it\u0027s up to that class to call \"Dispose\" on it, ideally in its own \"Dispose\" method. If it\u0027s a local variable, then it should be instantiated with a \"using\" clause to prompt automatic cleanup when it goes out of scope.",
"properties":  {
"severity":  "Warning",
"warningLevel":  "1",
"defaultSeverity":  "Warning",
"title":  "\"IDisposables\" should be disposed",
"category":  "Reliability",
"helpLink":  "http://vs.sonarlint.org/rules/index.html#version=1.7.0\u0026ruleId=S2930",
"isEnabledByDefault":  "True",
"isSuppressedInSource":  "False"
}
},
{
"ruleId":  "S2930",
"locations":  [
{
"analysisTarget":  [
{
"uri":  "Nancy\\src\\Nancy.Tests\\Unit\\IO\\RequestStreamFixture.cs",
"region":  {
"startLine":  238,
"startColumn":  16,
"endLine":  238,
"endColumn":  22
}
}
]
}
],
"shortMessage":  "\"Dispose\" of \"stream\".",
"fullMessage":  "You can\u0027t rely on garbage collection to clean up everything. Specifically, you can\u0027t count on it to release non-memory resources such as \"File\"s. For that, there\u0027s the \"IDisposable\" interface, and the contract that \"Dispose\" will always be called on such objects. When an \"IDisposable\" is a class member, then it\u0027s up to that class to call \"Dispose\" on it, ideally in its own \"Dispose\" method. If it\u0027s a local variable, then it should be instantiated with a \"using\" clause to prompt automatic cleanup when it goes out of scope.",
"properties":  {
"severity":  "Warning",
"warningLevel":  "1",
"defaultSeverity":  "Warning",
"title":  "\"IDisposables\" should be disposed",
"category":  "Reliability",
"helpLink":  "http://vs.sonarlint.org/rules/index.html#version=1.7.0\u0026ruleId=S2930",
"isEnabledByDefault":  "True",
"isSuppressedInSource":  "False"
}
},
{
"ruleId":  "S2930",
"locations":  [
{
"analysisTarget":  [
{
"uri":  "Nancy\\src\\Nancy.Tests\\Unit\\IO\\RequestStreamFixture.cs",
"region":  {
"startLine":  252,
"startColumn":  16,
"endLine":  252,
"endColumn":  22
}
}
]
}
],
"shortMessage":  "\"Dispose\" of \"stream\".",
"fullMessage":  "You can\u0027t rely on garbage collection to clean up everything. Specifically, you can\u0027t count on it to release non-memory resources such as \"File\"s. For that, there\u0027s the \"IDisposable\" interface, and the contract that \"Dispose\" will always be called on such objects. When an \"IDisposable\" is a class member, then it\u0027s up to that class to call \"Dispose\" on it, ideally in its own \"Dispose\" method. If it\u0027s a local variable, then it should be instantiated with a \"using\" clause to prompt automatic cleanup when it goes out of scope.",
"properties":  {
"severity":  "Warning",
"warningLevel":  "1",
"defaultSeverity":  "Warning",
"title":  "\"IDisposables\" should be disposed",
"category":  "Reliability",
"helpLink":  "http://vs.sonarlint.org/rules/index.html#version=1.7.0\u0026ruleId=S2930",
"isEnabledByDefault":  "True",
"isSuppressedInSource":  "False"
}
},
{
"ruleId":  "S2930",
"locations":  [
{
"analysisTarget":  [
{
"uri":  "Nancy\\src\\Nancy.Tests\\Unit\\IO\\RequestStreamFixture.cs",
"region":  {
"startLine":  266,
"startColumn":  16,
"endLine":  266,
"endColumn":  22
}
}
]
}
],
"shortMessage":  "\"Dispose\" of \"stream\".",
"fullMessage":  "You can\u0027t rely on garbage collection to clean up everything. Specifically, you can\u0027t count on it to release non-memory resources such as \"File\"s. For that, there\u0027s the \"IDisposable\" interface, and the contract that \"Dispose\" will always be called on such objects. When an \"IDisposable\" is a class member, then it\u0027s up to that class to call \"Dispose\" on it, ideally in its own \"Dispose\" method. If it\u0027s a local variable, then it should be instantiated with a \"using\" clause to prompt automatic cleanup when it goes out of scope.",
"properties":  {
"severity":  "Warning",
"warningLevel":  "1",
"defaultSeverity":  "Warning",
"title":  "\"IDisposables\" should be disposed",
"category":  "Reliability",
"helpLink":  "http://vs.sonarlint.org/rules/index.html#version=1.7.0\u0026ruleId=S2930",
"isEnabledByDefault":  "True",
"isSuppressedInSource":  "False"
}
},
{
"ruleId":  "S2930",
"locations":  [
{
"analysisTarget":  [
{
"uri":  "Nancy\\src\\Nancy.Tests\\Unit\\IO\\RequestStreamFixture.cs",
"region":  {
"startLine":  280,
"startColumn":  16,
"endLine":  280,
"endColumn":  22
}
}
]
}
],
"shortMessage":  "\"Dispose\" of \"stream\".",
"fullMessage":  "You can\u0027t rely on garbage collection to clean up everything. Specifically, you can\u0027t count on it to release non-memory resources such as \"File\"s. For that, there\u0027s the \"IDisposable\" interface, and the contract that \"Dispose\" will always be called on such objects. When an \"IDisposable\" is a class member, then it\u0027s up to that class to call \"Dispose\" on it, ideally in its own \"Dispose\" method. If it\u0027s a local variable, then it should be instantiated with a \"using\" clause to prompt automatic cleanup when it goes out of scope.",
"properties":  {
"severity":  "Warning",
"warningLevel":  "1",
"defaultSeverity":  "Warning",
"title":  "\"IDisposables\" should be disposed",
"category":  "Reliability",
"helpLink":  "http://vs.sonarlint.org/rules/index.html#version=1.7.0\u0026ruleId=S2930",
"isEnabledByDefault":  "True",
"isSuppressedInSource":  "False"
}
},
{
"ruleId":  "S2930",
"locations":  [
{
"analysisTarget":  [
{
"uri":  "Nancy\\src\\Nancy.Tests\\Unit\\IO\\RequestStreamFixture.cs",
"region":  {
"startLine":  293,
"startColumn":  16,
"endLine":  293,
"endColumn":  22
}
}
]
}
],
"shortMessage":  "\"Dispose\" of \"stream\".",
"fullMessage":  "You can\u0027t rely on garbage collection to clean up everything. Specifically, you can\u0027t count on it to release non-memory resources such as \"File\"s. For that, there\u0027s the \"IDisposable\" interface, and the contract that \"Dispose\" will always be called on such objects. When an \"IDisposable\" is a class member, then it\u0027s up to that class to call \"Dispose\" on it, ideally in its own \"Dispose\" method. If it\u0027s a local variable, then it should be instantiated with a \"using\" clause to prompt automatic cleanup when it goes out of scope.",
"properties":  {
"severity":  "Warning",
"warningLevel":  "1",
"defaultSeverity":  "Warning",
"title":  "\"IDisposables\" should be disposed",
"category":  "Reliability",
"helpLink":  "http://vs.sonarlint.org/rules/index.html#version=1.7.0\u0026ruleId=S2930",
"isEnabledByDefault":  "True",
"isSuppressedInSource":  "False"
}
},
{
"ruleId":  "S2930",
"locations":  [
{
"analysisTarget":  [
{
"uri":  "Nancy\\src\\Nancy.Tests\\Unit\\Localization\\ResourceBasedTextResourceFixture.cs",
"region":  {
"startLine":  19,
"startColumn":  16,
"endLine":  19,
"endColumn":  23
}
}
]
}
],
"shortMessage":  "\"Dispose\" of \"context\".",
"fullMessage":  "You can\u0027t rely on garbage collection to clean up everything. Specifically, you can\u0027t count on it to release non-memory resources such as \"File\"s. For that, there\u0027s the \"IDisposable\" interface, and the contract that \"Dispose\" will always be called on such objects. When an \"IDisposable\" is a class member, then it\u0027s up to that class to call \"Dispose\" on it, ideally in its own \"Dispose\" method. If it\u0027s a local variable, then it should be instantiated with a \"using\" clause to prompt automatic cleanup when it goes out of scope.",
"properties":  {
"severity":  "Warning",
"warningLevel":  "1",
"defaultSeverity":  "Warning",
"title":  "\"IDisposables\" should be disposed",
"category":  "Reliability",
"helpLink":  "http://vs.sonarlint.org/rules/index.html#version=1.7.0\u0026ruleId=S2930",
"isEnabledByDefault":  "True",
"isSuppressedInSource":  "False"
}
},
{
"ruleId":  "S2930",
"locations":  [
{
"analysisTarget":  [
{
"uri":  "Nancy\\src\\Nancy.Tests\\Unit\\Localization\\ResourceBasedTextResourceFixture.cs",
"region":  {
"startLine":  36,
"startColumn":  16,
"endLine":  36,
"endColumn":  23
}
}
]
}
],
"shortMessage":  "\"Dispose\" of \"context\".",
"fullMessage":  "You can\u0027t rely on garbage collection to clean up everything. Specifically, you can\u0027t count on it to release non-memory resources such as \"File\"s. For that, there\u0027s the \"IDisposable\" interface, and the contract that \"Dispose\" will always be called on such objects. When an \"IDisposable\" is a class member, then it\u0027s up to that class to call \"Dispose\" on it, ideally in its own \"Dispose\" method. If it\u0027s a local variable, then it should be instantiated with a \"using\" clause to prompt automatic cleanup when it goes out of scope.",
"properties":  {
"severity":  "Warning",
"warningLevel":  "1",
"defaultSeverity":  "Warning",
"title":  "\"IDisposables\" should be disposed",
"category":  "Reliability",
"helpLink":  "http://vs.sonarlint.org/rules/index.html#version=1.7.0\u0026ruleId=S2930",
"isEnabledByDefault":  "True",
"isSuppressedInSource":  "False"
}
},
{
"ruleId":  "S2930",
"locations":  [
{
"analysisTarget":  [
{
"uri":  "Nancy\\src\\Nancy.Tests\\Unit\\Localization\\ResourceBasedTextResourceFixture.cs",
"region":  {
"startLine":  56,
"startColumn":  16,
"endLine":  56,
"endColumn":  23
}
}
]
}
],
"shortMessage":  "\"Dispose\" of \"context\".",
"fullMessage":  "You can\u0027t rely on garbage collection to clean up everything. Specifically, you can\u0027t count on it to release non-memory resources such as \"File\"s. For that, there\u0027s the \"IDisposable\" interface, and the contract that \"Dispose\" will always be called on such objects. When an \"IDisposable\" is a class member, then it\u0027s up to that class to call \"Dispose\" on it, ideally in its own \"Dispose\" method. If it\u0027s a local variable, then it should be instantiated with a \"using\" clause to prompt automatic cleanup when it goes out of scope.",
"properties":  {
"severity":  "Warning",
"warningLevel":  "1",
"defaultSeverity":  "Warning",
"title":  "\"IDisposables\" should be disposed",
"category":  "Reliability",
"helpLink":  "http://vs.sonarlint.org/rules/index.html#version=1.7.0\u0026ruleId=S2930",
"isEnabledByDefault":  "True",
"isSuppressedInSource":  "False"
}
},
{
"ruleId":  "S2930",
"locations":  [
{
"analysisTarget":  [
{
"uri":  "Nancy\\src\\Nancy.Tests\\Unit\\ModelBinding\\DefaultBinderFixture.cs",
"region":  {
"startLine":  266,
"startColumn":  16,
"endLine":  266,
"endColumn":  23
}
}
]
}
],
"shortMessage":  "\"Dispose\" of \"context\".",
"fullMessage":  "You can\u0027t rely on garbage collection to clean up everything. Specifically, you can\u0027t count on it to release non-memory resources such as \"File\"s. For that, there\u0027s the \"IDisposable\" interface, and the contract that \"Dispose\" will always be called on such objects. When an \"IDisposable\" is a class member, then it\u0027s up to that class to call \"Dispose\" on it, ideally in its own \"Dispose\" method. If it\u0027s a local variable, then it should be instantiated with a \"using\" clause to prompt automatic cleanup when it goes out of scope.",
"properties":  {
"severity":  "Warning",
"warningLevel":  "1",
"defaultSeverity":  "Warning",
"title":  "\"IDisposables\" should be disposed",
"category":  "Reliability",
"helpLink":  "http://vs.sonarlint.org/rules/index.html#version=1.7.0\u0026ruleId=S2930",
"isEnabledByDefault":  "True",
"isSuppressedInSource":  "False"
}
},
{
"ruleId":  "S2930",
"locations":  [
{
"analysisTarget":  [
{
"uri":  "Nancy\\src\\Nancy.Tests\\Unit\\ModelBinding\\DefaultBinderFixture.cs",
"region":  {
"startLine":  286,
"startColumn":  16,
"endLine":  286,
"endColumn":  23
}
}
]
}
],
"shortMessage":  "\"Dispose\" of \"context\".",
"fullMessage":  "You can\u0027t rely on garbage collection to clean up everything. Specifically, you can\u0027t count on it to release non-memory resources such as \"File\"s. For that, there\u0027s the \"IDisposable\" interface, and the contract that \"Dispose\" will always be called on such objects. When an \"IDisposable\" is a class member, then it\u0027s up to that class to call \"Dispose\" on it, ideally in its own \"Dispose\" method. If it\u0027s a local variable, then it should be instantiated with a \"using\" clause to prompt automatic cleanup when it goes out of scope.",
"properties":  {
"severity":  "Warning",
"warningLevel":  "1",
"defaultSeverity":  "Warning",
"title":  "\"IDisposables\" should be disposed",
"category":  "Reliability",
"helpLink":  "http://vs.sonarlint.org/rules/index.html#version=1.7.0\u0026ruleId=S2930",
"isEnabledByDefault":  "True",
"isSuppressedInSource":  "False"
}
},
{
"ruleId":  "S2930",
"locations":  [
{
"analysisTarget":  [
{
"uri":  "Nancy\\src\\Nancy.Tests\\Unit\\ModelBinding\\DefaultBinderFixture.cs",
"region":  {
"startLine":  302,
"startColumn":  16,
"endLine":  302,
"endColumn":  23
}
}
]
}
],
"shortMessage":  "\"Dispose\" of \"context\".",
"fullMessage":  "You can\u0027t rely on garbage collection to clean up everything. Specifically, you can\u0027t count on it to release non-memory resources such as \"File\"s. For that, there\u0027s the \"IDisposable\" interface, and the contract that \"Dispose\" will always be called on such objects. When an \"IDisposable\" is a class member, then it\u0027s up to that class to call \"Dispose\" on it, ideally in its own \"Dispose\" method. If it\u0027s a local variable, then it should be instantiated with a \"using\" clause to prompt automatic cleanup when it goes out of scope.",
"properties":  {
"severity":  "Warning",
"warningLevel":  "1",
"defaultSeverity":  "Warning",
"title":  "\"IDisposables\" should be disposed",
"category":  "Reliability",
"helpLink":  "http://vs.sonarlint.org/rules/index.html#version=1.7.0\u0026ruleId=S2930",
"isEnabledByDefault":  "True",
"isSuppressedInSource":  "False"
}
},
{
"ruleId":  "S2930",
"locations":  [
{
"analysisTarget":  [
{
"uri":  "Nancy\\src\\Nancy.Tests\\Unit\\ModelBinding\\DefaultBinderFixture.cs",
"region":  {
"startLine":  321,
"startColumn":  16,
"endLine":  321,
"endColumn":  23
}
}
]
}
],
"shortMessage":  "\"Dispose\" of \"context\".",
"fullMessage":  "You can\u0027t rely on garbage collection to clean up everything. Specifically, you can\u0027t count on it to release non-memory resources such as \"File\"s. For that, there\u0027s the \"IDisposable\" interface, and the contract that \"Dispose\" will always be called on such objects. When an \"IDisposable\" is a class member, then it\u0027s up to that class to call \"Dispose\" on it, ideally in its own \"Dispose\" method. If it\u0027s a local variable, then it should be instantiated with a \"using\" clause to prompt automatic cleanup when it goes out of scope.",
"properties":  {
"severity":  "Warning",
"warningLevel":  "1",
"defaultSeverity":  "Warning",
"title":  "\"IDisposables\" should be disposed",
"category":  "Reliability",
"helpLink":  "http://vs.sonarlint.org/rules/index.html#version=1.7.0\u0026ruleId=S2930",
"isEnabledByDefault":  "True",
"isSuppressedInSource":  "False"
}
},
{
"ruleId":  "S2930",
"locations":  [
{
"analysisTarget":  [
{
"uri":  "Nancy\\src\\Nancy.Tests\\Unit\\ModelBinding\\DefaultBinderFixture.cs",
"region":  {
"startLine":  346,
"startColumn":  16,
"endLine":  346,
"endColumn":  23
}
}
]
}
],
"shortMessage":  "\"Dispose\" of \"context\".",
"fullMessage":  "You can\u0027t rely on garbage collection to clean up everything. Specifically, you can\u0027t count on it to release non-memory resources such as \"File\"s. For that, there\u0027s the \"IDisposable\" interface, and the contract that \"Dispose\" will always be called on such objects. When an \"IDisposable\" is a class member, then it\u0027s up to that class to call \"Dispose\" on it, ideally in its own \"Dispose\" method. If it\u0027s a local variable, then it should be instantiated with a \"using\" clause to prompt automatic cleanup when it goes out of scope.",
"properties":  {
"severity":  "Warning",
"warningLevel":  "1",
"defaultSeverity":  "Warning",
"title":  "\"IDisposables\" should be disposed",
"category":  "Reliability",
"helpLink":  "http://vs.sonarlint.org/rules/index.html#version=1.7.0\u0026ruleId=S2930",
"isEnabledByDefault":  "True",
"isSuppressedInSource":  "False"
}
},
{
"ruleId":  "S2930",
"locations":  [
{
"analysisTarget":  [
{
"uri":  "Nancy\\src\\Nancy.Tests\\Unit\\ModelBinding\\DefaultBinderFixture.cs",
"region":  {
"startLine":  362,
"startColumn":  16,
"endLine":  362,
"endColumn":  23
}
}
]
}
],
"shortMessage":  "\"Dispose\" of \"context\".",
"fullMessage":  "You can\u0027t rely on garbage collection to clean up everything. Specifically, you can\u0027t count on it to release non-memory resources such as \"File\"s. For that, there\u0027s the \"IDisposable\" interface, and the contract that \"Dispose\" will always be called on such objects. When an \"IDisposable\" is a class member, then it\u0027s up to that class to call \"Dispose\" on it, ideally in its own \"Dispose\" method. If it\u0027s a local variable, then it should be instantiated with a \"using\" clause to prompt automatic cleanup when it goes out of scope.",
"properties":  {
"severity":  "Warning",
"warningLevel":  "1",
"defaultSeverity":  "Warning",
"title":  "\"IDisposables\" should be disposed",
"category":  "Reliability",
"helpLink":  "http://vs.sonarlint.org/rules/index.html#version=1.7.0\u0026ruleId=S2930",
"isEnabledByDefault":  "True",
"isSuppressedInSource":  "False"
}
},
{
"ruleId":  "S2930",
"locations":  [
{
"analysisTarget":  [
{
"uri":  "Nancy\\src\\Nancy.Tests\\Unit\\ModelBinding\\DefaultBinderFixture.cs",
"region":  {
"startLine":  424,
"startColumn":  16,
"endLine":  424,
"endColumn":  23
}
}
]
}
],
"shortMessage":  "\"Dispose\" of \"context\".",
"fullMessage":  "You can\u0027t rely on garbage collection to clean up everything. Specifically, you can\u0027t count on it to release non-memory resources such as \"File\"s. For that, there\u0027s the \"IDisposable\" interface, and the contract that \"Dispose\" will always be called on such objects. When an \"IDisposable\" is a class member, then it\u0027s up to that class to call \"Dispose\" on it, ideally in its own \"Dispose\" method. If it\u0027s a local variable, then it should be instantiated with a \"using\" clause to prompt automatic cleanup when it goes out of scope.",
"properties":  {
"severity":  "Warning",
"warningLevel":  "1",
"defaultSeverity":  "Warning",
"title":  "\"IDisposables\" should be disposed",
"category":  "Reliability",
"helpLink":  "http://vs.sonarlint.org/rules/index.html#version=1.7.0\u0026ruleId=S2930",
"isEnabledByDefault":  "True",
"isSuppressedInSource":  "False"
}
},
{
"ruleId":  "S2930",
"locations":  [
{
"analysisTarget":  [
{
"uri":  "Nancy\\src\\Nancy.Tests\\Unit\\ModelBinding\\DefaultBinderFixture.cs",
"region":  {
"startLine":  441,
"startColumn":  16,
"endLine":  441,
"endColumn":  23
}
}
]
}
],
"shortMessage":  "\"Dispose\" of \"context\".",
"fullMessage":  "You can\u0027t rely on garbage collection to clean up everything. Specifically, you can\u0027t count on it to release non-memory resources such as \"File\"s. For that, there\u0027s the \"IDisposable\" interface, and the contract that \"Dispose\" will always be called on such objects. When an \"IDisposable\" is a class member, then it\u0027s up to that class to call \"Dispose\" on it, ideally in its own \"Dispose\" method. If it\u0027s a local variable, then it should be instantiated with a \"using\" clause to prompt automatic cleanup when it goes out of scope.",
"properties":  {
"severity":  "Warning",
"warningLevel":  "1",
"defaultSeverity":  "Warning",
"title":  "\"IDisposables\" should be disposed",
"category":  "Reliability",
"helpLink":  "http://vs.sonarlint.org/rules/index.html#version=1.7.0\u0026ruleId=S2930",
"isEnabledByDefault":  "True",
"isSuppressedInSource":  "False"
}
},
{
"ruleId":  "S2930",
"locations":  [
{
"analysisTarget":  [
{
"uri":  "Nancy\\src\\Nancy.Tests\\Unit\\ModelBinding\\DefaultBinderFixture.cs",
"region":  {
"startLine":  458,
"startColumn":  16,
"endLine":  458,
"endColumn":  23
}
}
]
}
],
"shortMessage":  "\"Dispose\" of \"context\".",
"fullMessage":  "You can\u0027t rely on garbage collection to clean up everything. Specifically, you can\u0027t count on it to release non-memory resources such as \"File\"s. For that, there\u0027s the \"IDisposable\" interface, and the contract that \"Dispose\" will always be called on such objects. When an \"IDisposable\" is a class member, then it\u0027s up to that class to call \"Dispose\" on it, ideally in its own \"Dispose\" method. If it\u0027s a local variable, then it should be instantiated with a \"using\" clause to prompt automatic cleanup when it goes out of scope.",
"properties":  {
"severity":  "Warning",
"warningLevel":  "1",
"defaultSeverity":  "Warning",
"title":  "\"IDisposables\" should be disposed",
"category":  "Reliability",
"helpLink":  "http://vs.sonarlint.org/rules/index.html#version=1.7.0\u0026ruleId=S2930",
"isEnabledByDefault":  "True",
"isSuppressedInSource":  "False"
}
},
{
"ruleId":  "S2930",
"locations":  [
{
"analysisTarget":  [
{
"uri":  "Nancy\\src\\Nancy.Tests\\Unit\\ModelBinding\\DefaultBinderFixture.cs",
"region":  {
"startLine":  504,
"startColumn":  16,
"endLine":  504,
"endColumn":  23
}
}
]
}
],
"shortMessage":  "\"Dispose\" of \"context\".",
"fullMessage":  "You can\u0027t rely on garbage collection to clean up everything. Specifically, you can\u0027t count on it to release non-memory resources such as \"File\"s. For that, there\u0027s the \"IDisposable\" interface, and the contract that \"Dispose\" will always be called on such objects. When an \"IDisposable\" is a class member, then it\u0027s up to that class to call \"Dispose\" on it, ideally in its own \"Dispose\" method. If it\u0027s a local variable, then it should be instantiated with a \"using\" clause to prompt automatic cleanup when it goes out of scope.",
"properties":  {
"severity":  "Warning",
"warningLevel":  "1",
"defaultSeverity":  "Warning",
"title":  "\"IDisposables\" should be disposed",
"category":  "Reliability",
"helpLink":  "http://vs.sonarlint.org/rules/index.html#version=1.7.0\u0026ruleId=S2930",
"isEnabledByDefault":  "True",
"isSuppressedInSource":  "False"
}
},
{
"ruleId":  "S2930",
"locations":  [
{
"analysisTarget":  [
{
"uri":  "Nancy\\src\\Nancy.Tests\\Unit\\ModelBinding\\DefaultBinderFixture.cs",
"region":  {
"startLine":  552,
"startColumn":  16,
"endLine":  552,
"endColumn":  23
}
}
]
}
],
"shortMessage":  "\"Dispose\" of \"context\".",
"fullMessage":  "You can\u0027t rely on garbage collection to clean up everything. Specifically, you can\u0027t count on it to release non-memory resources such as \"File\"s. For that, there\u0027s the \"IDisposable\" interface, and the contract that \"Dispose\" will always be called on such objects. When an \"IDisposable\" is a class member, then it\u0027s up to that class to call \"Dispose\" on it, ideally in its own \"Dispose\" method. If it\u0027s a local variable, then it should be instantiated with a \"using\" clause to prompt automatic cleanup when it goes out of scope.",
"properties":  {
"severity":  "Warning",
"warningLevel":  "1",
"defaultSeverity":  "Warning",
"title":  "\"IDisposables\" should be disposed",
"category":  "Reliability",
"helpLink":  "http://vs.sonarlint.org/rules/index.html#version=1.7.0\u0026ruleId=S2930",
"isEnabledByDefault":  "True",
"isSuppressedInSource":  "False"
}
},
{
"ruleId":  "S2930",
"locations":  [
{
"analysisTarget":  [
{
"uri":  "Nancy\\src\\Nancy.Tests\\Unit\\ModelBinding\\DefaultBodyDeserializers\\JsonBodyDeserializerFixture.cs",
"region":  {
"startLine":  112,
"startColumn":  16,
"endLine":  112,
"endColumn":  26
}
}
]
}
],
"shortMessage":  "\"Dispose\" of \"bodyStream\".",
"fullMessage":  "You can\u0027t rely on garbage collection to clean up everything. Specifically, you can\u0027t count on it to release non-memory resources such as \"File\"s. For that, there\u0027s the \"IDisposable\" interface, and the contract that \"Dispose\" will always be called on such objects. When an \"IDisposable\" is a class member, then it\u0027s up to that class to call \"Dispose\" on it, ideally in its own \"Dispose\" method. If it\u0027s a local variable, then it should be instantiated with a \"using\" clause to prompt automatic cleanup when it goes out of scope.",
"properties":  {
"severity":  "Warning",
"warningLevel":  "1",
"defaultSeverity":  "Warning",
"title":  "\"IDisposables\" should be disposed",
"category":  "Reliability",
"helpLink":  "http://vs.sonarlint.org/rules/index.html#version=1.7.0\u0026ruleId=S2930",
"isEnabledByDefault":  "True",
"isSuppressedInSource":  "False"
}
},
{
"ruleId":  "S2930",
"locations":  [
{
"analysisTarget":  [
{
"uri":  "Nancy\\src\\Nancy.Tests\\Unit\\ModelBinding\\DefaultBodyDeserializers\\JsonBodyDeserializerFixture.cs",
"region":  {
"startLine":  134,
"startColumn":  16,
"endLine":  134,
"endColumn":  26
}
}
]
}
],
"shortMessage":  "\"Dispose\" of \"bodyStream\".",
"fullMessage":  "You can\u0027t rely on garbage collection to clean up everything. Specifically, you can\u0027t count on it to release non-memory resources such as \"File\"s. For that, there\u0027s the \"IDisposable\" interface, and the contract that \"Dispose\" will always be called on such objects. When an \"IDisposable\" is a class member, then it\u0027s up to that class to call \"Dispose\" on it, ideally in its own \"Dispose\" method. If it\u0027s a local variable, then it should be instantiated with a \"using\" clause to prompt automatic cleanup when it goes out of scope.",
"properties":  {
"severity":  "Warning",
"warningLevel":  "1",
"defaultSeverity":  "Warning",
"title":  "\"IDisposables\" should be disposed",
"category":  "Reliability",
"helpLink":  "http://vs.sonarlint.org/rules/index.html#version=1.7.0\u0026ruleId=S2930",
"isEnabledByDefault":  "True",
"isSuppressedInSource":  "False"
}
},
{
"ruleId":  "S2930",
"locations":  [
{
"analysisTarget":  [
{
"uri":  "Nancy\\src\\Nancy.Tests\\Unit\\ModelBinding\\DefaultBodyDeserializers\\JsonBodyDeserializerFixture.cs",
"region":  {
"startLine":  166,
"startColumn":  16,
"endLine":  166,
"endColumn":  26
}
}
]
}
],
"shortMessage":  "\"Dispose\" of \"bodyStream\".",
"fullMessage":  "You can\u0027t rely on garbage collection to clean up everything. Specifically, you can\u0027t count on it to release non-memory resources such as \"File\"s. For that, there\u0027s the \"IDisposable\" interface, and the contract that \"Dispose\" will always be called on such objects. When an \"IDisposable\" is a class member, then it\u0027s up to that class to call \"Dispose\" on it, ideally in its own \"Dispose\" method. If it\u0027s a local variable, then it should be instantiated with a \"using\" clause to prompt automatic cleanup when it goes out of scope.",
"properties":  {
"severity":  "Warning",
"warningLevel":  "1",
"defaultSeverity":  "Warning",
"title":  "\"IDisposables\" should be disposed",
"category":  "Reliability",
"helpLink":  "http://vs.sonarlint.org/rules/index.html#version=1.7.0\u0026ruleId=S2930",
"isEnabledByDefault":  "True",
"isSuppressedInSource":  "False"
}
},
{
"ruleId":  "S2930",
"locations":  [
{
"analysisTarget":  [
{
"uri":  "Nancy\\src\\Nancy.Tests\\Unit\\ModelBinding\\DefaultBodyDeserializers\\JsonBodyDeserializerFixture.cs",
"region":  {
"startLine":  197,
"startColumn":  16,
"endLine":  197,
"endColumn":  26
}
}
]
}
],
"shortMessage":  "\"Dispose\" of \"bodyStream\".",
"fullMessage":  "You can\u0027t rely on garbage collection to clean up everything. Specifically, you can\u0027t count on it to release non-memory resources such as \"File\"s. For that, there\u0027s the \"IDisposable\" interface, and the contract that \"Dispose\" will always be called on such objects. When an \"IDisposable\" is a class member, then it\u0027s up to that class to call \"Dispose\" on it, ideally in its own \"Dispose\" method. If it\u0027s a local variable, then it should be instantiated with a \"using\" clause to prompt automatic cleanup when it goes out of scope.",
"properties":  {
"severity":  "Warning",
"warningLevel":  "1",
"defaultSeverity":  "Warning",
"title":  "\"IDisposables\" should be disposed",
"category":  "Reliability",
"helpLink":  "http://vs.sonarlint.org/rules/index.html#version=1.7.0\u0026ruleId=S2930",
"isEnabledByDefault":  "True",
"isSuppressedInSource":  "False"
}
},
{
"ruleId":  "S2930",
"locations":  [
{
"analysisTarget":  [
{
"uri":  "Nancy\\src\\Nancy.Tests\\Unit\\ModelBinding\\DefaultBodyDeserializers\\JsonBodyDeserializerFixture.cs",
"region":  {
"startLine":  244,
"startColumn":  16,
"endLine":  244,
"endColumn":  26
}
}
]
}
],
"shortMessage":  "\"Dispose\" of \"bodyStream\".",
"fullMessage":  "You can\u0027t rely on garbage collection to clean up everything. Specifically, you can\u0027t count on it to release non-memory resources such as \"File\"s. For that, there\u0027s the \"IDisposable\" interface, and the contract that \"Dispose\" will always be called on such objects. When an \"IDisposable\" is a class member, then it\u0027s up to that class to call \"Dispose\" on it, ideally in its own \"Dispose\" method. If it\u0027s a local variable, then it should be instantiated with a \"using\" clause to prompt automatic cleanup when it goes out of scope.",
"properties":  {
"severity":  "Warning",
"warningLevel":  "1",
"defaultSeverity":  "Warning",
"title":  "\"IDisposables\" should be disposed",
"category":  "Reliability",
"helpLink":  "http://vs.sonarlint.org/rules/index.html#version=1.7.0\u0026ruleId=S2930",
"isEnabledByDefault":  "True",
"isSuppressedInSource":  "False"
}
},
{
"ruleId":  "S2930",
"locations":  [
{
"analysisTarget":  [
{
"uri":  "Nancy\\src\\Nancy.Tests\\Unit\\ModelBinding\\DefaultBodyDeserializers\\XmlBodyDeserializerfixture.cs",
"region":  {
"startLine":  83,
"startColumn":  16,
"endLine":  83,
"endColumn":  26
}
}
]
}
],
"shortMessage":  "\"Dispose\" of \"bodyStream\".",
"fullMessage":  "You can\u0027t rely on garbage collection to clean up everything. Specifically, you can\u0027t count on it to release non-memory resources such as \"File\"s. For that, there\u0027s the \"IDisposable\" interface, and the contract that \"Dispose\" will always be called on such objects. When an \"IDisposable\" is a class member, then it\u0027s up to that class to call \"Dispose\" on it, ideally in its own \"Dispose\" method. If it\u0027s a local variable, then it should be instantiated with a \"using\" clause to prompt automatic cleanup when it goes out of scope.",
"properties":  {
"severity":  "Warning",
"warningLevel":  "1",
"defaultSeverity":  "Warning",
"title":  "\"IDisposables\" should be disposed",
"category":  "Reliability",
"helpLink":  "http://vs.sonarlint.org/rules/index.html#version=1.7.0\u0026ruleId=S2930",
"isEnabledByDefault":  "True",
"isSuppressedInSource":  "False"
}
},
{
"ruleId":  "S2930",
"locations":  [
{
"analysisTarget":  [
{
"uri":  "Nancy\\src\\Nancy.Tests\\Unit\\ModelBinding\\DefaultBodyDeserializers\\XmlBodyDeserializerfixture.cs",
"region":  {
"startLine":  90,
"startColumn":  16,
"endLine":  90,
"endColumn":  22
}
}
]
}
],
"shortMessage":  "\"Dispose\" of \"reader\".",
"fullMessage":  "You can\u0027t rely on garbage collection to clean up everything. Specifically, you can\u0027t count on it to release non-memory resources such as \"File\"s. For that, there\u0027s the \"IDisposable\" interface, and the contract that \"Dispose\" will always be called on such objects. When an \"IDisposable\" is a class member, then it\u0027s up to that class to call \"Dispose\" on it, ideally in its own \"Dispose\" method. If it\u0027s a local variable, then it should be instantiated with a \"using\" clause to prompt automatic cleanup when it goes out of scope.",
"properties":  {
"severity":  "Warning",
"warningLevel":  "1",
"defaultSeverity":  "Warning",
"title":  "\"IDisposables\" should be disposed",
"category":  "Reliability",
"helpLink":  "http://vs.sonarlint.org/rules/index.html#version=1.7.0\u0026ruleId=S2930",
"isEnabledByDefault":  "True",
"isSuppressedInSource":  "False"
}
},
{
"ruleId":  "S2930",
"locations":  [
{
"analysisTarget":  [
{
"uri":  "Nancy\\src\\Nancy.Tests\\Unit\\ModelBinding\\DefaultBodyDeserializers\\XmlBodyDeserializerfixture.cs",
"region":  {
"startLine":  109,
"startColumn":  16,
"endLine":  109,
"endColumn":  26
}
}
]
}
],
"shortMessage":  "\"Dispose\" of \"bodyStream\".",
"fullMessage":  "You can\u0027t rely on garbage collection to clean up everything. Specifically, you can\u0027t count on it to release non-memory resources such as \"File\"s. For that, there\u0027s the \"IDisposable\" interface, and the contract that \"Dispose\" will always be called on such objects. When an \"IDisposable\" is a class member, then it\u0027s up to that class to call \"Dispose\" on it, ideally in its own \"Dispose\" method. If it\u0027s a local variable, then it should be instantiated with a \"using\" clause to prompt automatic cleanup when it goes out of scope.",
"properties":  {
"severity":  "Warning",
"warningLevel":  "1",
"defaultSeverity":  "Warning",
"title":  "\"IDisposables\" should be disposed",
"category":  "Reliability",
"helpLink":  "http://vs.sonarlint.org/rules/index.html#version=1.7.0\u0026ruleId=S2930",
"isEnabledByDefault":  "True",
"isSuppressedInSource":  "False"
}
},
{
"ruleId":  "S2930",
"locations":  [
{
"analysisTarget":  [
{
"uri":  "Nancy\\src\\Nancy.Tests\\Unit\\ModelBinding\\DynamicModelBinderAdapterFixture.cs",
"region":  {
"startLine":  65,
"startColumn":  16,
"endLine":  65,
"endColumn":  23
}
}
]
}
],
"shortMessage":  "\"Dispose\" of \"context\".",
"fullMessage":  "You can\u0027t rely on garbage collection to clean up everything. Specifically, you can\u0027t count on it to release non-memory resources such as \"File\"s. For that, there\u0027s the \"IDisposable\" interface, and the contract that \"Dispose\" will always be called on such objects. When an \"IDisposable\" is a class member, then it\u0027s up to that class to call \"Dispose\" on it, ideally in its own \"Dispose\" method. If it\u0027s a local variable, then it should be instantiated with a \"using\" clause to prompt automatic cleanup when it goes out of scope.",
"properties":  {
"severity":  "Warning",
"warningLevel":  "1",
"defaultSeverity":  "Warning",
"title":  "\"IDisposables\" should be disposed",
"category":  "Reliability",
"helpLink":  "http://vs.sonarlint.org/rules/index.html#version=1.7.0\u0026ruleId=S2930",
"isEnabledByDefault":  "True",
"isSuppressedInSource":  "False"
}
},
{
"ruleId":  "S2930",
"locations":  [
{
"analysisTarget":  [
{
"uri":  "Nancy\\src\\Nancy.Tests\\Unit\\ModelBinding\\DynamicModelBinderAdapterFixture.cs",
"region":  {
"startLine":  140,
"startColumn":  16,
"endLine":  140,
"endColumn":  23
}
}
]
}
],
"shortMessage":  "\"Dispose\" of \"context\".",
"fullMessage":  "You can\u0027t rely on garbage collection to clean up everything. Specifically, you can\u0027t count on it to release non-memory resources such as \"File\"s. For that, there\u0027s the \"IDisposable\" interface, and the contract that \"Dispose\" will always be called on such objects. When an \"IDisposable\" is a class member, then it\u0027s up to that class to call \"Dispose\" on it, ideally in its own \"Dispose\" method. If it\u0027s a local variable, then it should be instantiated with a \"using\" clause to prompt automatic cleanup when it goes out of scope.",
"properties":  {
"severity":  "Warning",
"warningLevel":  "1",
"defaultSeverity":  "Warning",
"title":  "\"IDisposables\" should be disposed",
"category":  "Reliability",
"helpLink":  "http://vs.sonarlint.org/rules/index.html#version=1.7.0\u0026ruleId=S2930",
"isEnabledByDefault":  "True",
"isSuppressedInSource":  "False"
}
},
{
"ruleId":  "S2930",
"locations":  [
{
"analysisTarget":  [
{
"uri":  "Nancy\\src\\Nancy.Tests\\Unit\\ModelBinding\\DynamicModelBinderAdapterFixture.cs",
"region":  {
"startLine":  161,
"startColumn":  16,
"endLine":  161,
"endColumn":  23
}
}
]
}
],
"shortMessage":  "\"Dispose\" of \"context\".",
"fullMessage":  "You can\u0027t rely on garbage collection to clean up everything. Specifically, you can\u0027t count on it to release non-memory resources such as \"File\"s. For that, there\u0027s the \"IDisposable\" interface, and the contract that \"Dispose\" will always be called on such objects. When an \"IDisposable\" is a class member, then it\u0027s up to that class to call \"Dispose\" on it, ideally in its own \"Dispose\" method. If it\u0027s a local variable, then it should be instantiated with a \"using\" clause to prompt automatic cleanup when it goes out of scope.",
"properties":  {
"severity":  "Warning",
"warningLevel":  "1",
"defaultSeverity":  "Warning",
"title":  "\"IDisposables\" should be disposed",
"category":  "Reliability",
"helpLink":  "http://vs.sonarlint.org/rules/index.html#version=1.7.0\u0026ruleId=S2930",
"isEnabledByDefault":  "True",
"isSuppressedInSource":  "False"
}
},
{
"ruleId":  "S2930",
"locations":  [
{
"analysisTarget":  [
{
"uri":  "Nancy\\src\\Nancy.Tests\\Unit\\ModelBinding\\DynamicModelBinderAdapterFixture.cs",
"region":  {
"startLine":  182,
"startColumn":  16,
"endLine":  182,
"endColumn":  23
}
}
]
}
],
"shortMessage":  "\"Dispose\" of \"context\".",
"fullMessage":  "You can\u0027t rely on garbage collection to clean up everything. Specifically, you can\u0027t count on it to release non-memory resources such as \"File\"s. For that, there\u0027s the \"IDisposable\" interface, and the contract that \"Dispose\" will always be called on such objects. When an \"IDisposable\" is a class member, then it\u0027s up to that class to call \"Dispose\" on it, ideally in its own \"Dispose\" method. If it\u0027s a local variable, then it should be instantiated with a \"using\" clause to prompt automatic cleanup when it goes out of scope.",
"properties":  {
"severity":  "Warning",
"warningLevel":  "1",
"defaultSeverity":  "Warning",
"title":  "\"IDisposables\" should be disposed",
"category":  "Reliability",
"helpLink":  "http://vs.sonarlint.org/rules/index.html#version=1.7.0\u0026ruleId=S2930",
"isEnabledByDefault":  "True",
"isSuppressedInSource":  "False"
}
},
{
"ruleId":  "S2930",
"locations":  [
{
"analysisTarget":  [
{
"uri":  "Nancy\\src\\Nancy.Tests\\Unit\\ModelBinding\\DynamicModelBinderAdapterFixture.cs",
"region":  {
"startLine":  204,
"startColumn":  16,
"endLine":  204,
"endColumn":  23
}
}
]
}
],
"shortMessage":  "\"Dispose\" of \"context\".",
"fullMessage":  "You can\u0027t rely on garbage collection to clean up everything. Specifically, you can\u0027t count on it to release non-memory resources such as \"File\"s. For that, there\u0027s the \"IDisposable\" interface, and the contract that \"Dispose\" will always be called on such objects. When an \"IDisposable\" is a class member, then it\u0027s up to that class to call \"Dispose\" on it, ideally in its own \"Dispose\" method. If it\u0027s a local variable, then it should be instantiated with a \"using\" clause to prompt automatic cleanup when it goes out of scope.",
"properties":  {
"severity":  "Warning",
"warningLevel":  "1",
"defaultSeverity":  "Warning",
"title":  "\"IDisposables\" should be disposed",
"category":  "Reliability",
"helpLink":  "http://vs.sonarlint.org/rules/index.html#version=1.7.0\u0026ruleId=S2930",
"isEnabledByDefault":  "True",
"isSuppressedInSource":  "False"
}
},
{
"ruleId":  "S2930",
"locations":  [
{
"analysisTarget":  [
{
"uri":  "Nancy\\src\\Nancy.Tests\\Unit\\ModelBinding\\DynamicModelBinderAdapterFixture.cs",
"region":  {
"startLine":  228,
"startColumn":  16,
"endLine":  228,
"endColumn":  23
}
}
]
}
],
"shortMessage":  "\"Dispose\" of \"context\".",
"fullMessage":  "You can\u0027t rely on garbage collection to clean up everything. Specifically, you can\u0027t count on it to release non-memory resources such as \"File\"s. For that, there\u0027s the \"IDisposable\" interface, and the contract that \"Dispose\" will always be called on such objects. When an \"IDisposable\" is a class member, then it\u0027s up to that class to call \"Dispose\" on it, ideally in its own \"Dispose\" method. If it\u0027s a local variable, then it should be instantiated with a \"using\" clause to prompt automatic cleanup when it goes out of scope.",
"properties":  {
"severity":  "Warning",
"warningLevel":  "1",
"defaultSeverity":  "Warning",
"title":  "\"IDisposables\" should be disposed",
"category":  "Reliability",
"helpLink":  "http://vs.sonarlint.org/rules/index.html#version=1.7.0\u0026ruleId=S2930",
"isEnabledByDefault":  "True",
"isSuppressedInSource":  "False"
}
},
{
"ruleId":  "S2930",
"locations":  [
{
"analysisTarget":  [
{
"uri":  "Nancy\\src\\Nancy.Tests\\Unit\\NancyContextFixture.cs",
"region":  {
"startLine":  77,
"startColumn":  16,
"endLine":  77,
"endColumn":  24
}
}
]
}
],
"shortMessage":  "\"Dispose\" of \"response\".",
"fullMessage":  "You can\u0027t rely on garbage collection to clean up everything. Specifically, you can\u0027t count on it to release non-memory resources such as \"File\"s. For that, there\u0027s the \"IDisposable\" interface, and the contract that \"Dispose\" will always be called on such objects. When an \"IDisposable\" is a class member, then it\u0027s up to that class to call \"Dispose\" on it, ideally in its own \"Dispose\" method. If it\u0027s a local variable, then it should be instantiated with a \"using\" clause to prompt automatic cleanup when it goes out of scope.",
"properties":  {
"severity":  "Warning",
"warningLevel":  "1",
"defaultSeverity":  "Warning",
"title":  "\"IDisposables\" should be disposed",
"category":  "Reliability",
"helpLink":  "http://vs.sonarlint.org/rules/index.html#version=1.7.0\u0026ruleId=S2930",
"isEnabledByDefault":  "True",
"isSuppressedInSource":  "False"
}
},
{
"ruleId":  "S2930",
"locations":  [
{
"analysisTarget":  [
{
"uri":  "Nancy\\src\\Nancy.Tests\\Unit\\NancyEngineFixture.cs",
"region":  {
"startLine":  23,
"startColumn":  38,
"endLine":  23,
"endColumn":  44
}
}
]
}
],
"shortMessage":  "\"Dispose\" of \"engine\".",
"fullMessage":  "You can\u0027t rely on garbage collection to clean up everything. Specifically, you can\u0027t count on it to release non-memory resources such as \"File\"s. For that, there\u0027s the \"IDisposable\" interface, and the contract that \"Dispose\" will always be called on such objects. When an \"IDisposable\" is a class member, then it\u0027s up to that class to call \"Dispose\" on it, ideally in its own \"Dispose\" method. If it\u0027s a local variable, then it should be instantiated with a \"using\" clause to prompt automatic cleanup when it goes out of scope.",
"properties":  {
"severity":  "Warning",
"warningLevel":  "1",
"defaultSeverity":  "Warning",
"title":  "\"IDisposables\" should be disposed",
"category":  "Reliability",
"helpLink":  "http://vs.sonarlint.org/rules/index.html#version=1.7.0\u0026ruleId=S2930",
"isEnabledByDefault":  "True",
"isSuppressedInSource":  "False"
}
},
{
"ruleId":  "S2930",
"locations":  [
{
"analysisTarget":  [
{
"uri":  "Nancy\\src\\Nancy.Tests\\Unit\\NancyEngineFixture.cs",
"region":  {
"startLine":  26,
"startColumn":  38,
"endLine":  26,
"endColumn":  45
}
}
]
}
],
"shortMessage":  "\"Dispose\" of \"context\".",
"fullMessage":  "You can\u0027t rely on garbage collection to clean up everything. Specifically, you can\u0027t count on it to release non-memory resources such as \"File\"s. For that, there\u0027s the \"IDisposable\" interface, and the contract that \"Dispose\" will always be called on such objects. When an \"IDisposable\" is a class member, then it\u0027s up to that class to call \"Dispose\" on it, ideally in its own \"Dispose\" method. If it\u0027s a local variable, then it should be instantiated with a \"using\" clause to prompt automatic cleanup when it goes out of scope.",
"properties":  {
"severity":  "Warning",
"warningLevel":  "1",
"defaultSeverity":  "Warning",
"title":  "\"IDisposables\" should be disposed",
"category":  "Reliability",
"helpLink":  "http://vs.sonarlint.org/rules/index.html#version=1.7.0\u0026ruleId=S2930",
"isEnabledByDefault":  "True",
"isSuppressedInSource":  "False"
}
},
{
"ruleId":  "S2930",
"locations":  [
{
"analysisTarget":  [
{
"uri":  "Nancy\\src\\Nancy.Tests\\Unit\\NancyEngineFixture.cs",
"region":  {
"startLine":  28,
"startColumn":  34,
"endLine":  28,
"endColumn":  42
}
}
]
}
],
"shortMessage":  "\"Dispose\" of \"response\".",
"fullMessage":  "You can\u0027t rely on garbage collection to clean up everything. Specifically, you can\u0027t count on it to release non-memory resources such as \"File\"s. For that, there\u0027s the \"IDisposable\" interface, and the contract that \"Dispose\" will always be called on such objects. When an \"IDisposable\" is a class member, then it\u0027s up to that class to call \"Dispose\" on it, ideally in its own \"Dispose\" method. If it\u0027s a local variable, then it should be instantiated with a \"using\" clause to prompt automatic cleanup when it goes out of scope.",
"properties":  {
"severity":  "Warning",
"warningLevel":  "1",
"defaultSeverity":  "Warning",
"title":  "\"IDisposables\" should be disposed",
"category":  "Reliability",
"helpLink":  "http://vs.sonarlint.org/rules/index.html#version=1.7.0\u0026ruleId=S2930",
"isEnabledByDefault":  "True",
"isSuppressedInSource":  "False"
}
},
{
"ruleId":  "S2930",
"locations":  [
{
"analysisTarget":  [
{
"uri":  "Nancy\\src\\Nancy.Tests\\Unit\\NancyEngineFixture.cs",
"region":  {
"startLine":  121,
"startColumn":  16,
"endLine":  121,
"endColumn":  23
}
}
]
}
],
"shortMessage":  "\"Dispose\" of \"request\".",
"fullMessage":  "You can\u0027t rely on garbage collection to clean up everything. Specifically, you can\u0027t count on it to release non-memory resources such as \"File\"s. For that, there\u0027s the \"IDisposable\" interface, and the contract that \"Dispose\" will always be called on such objects. When an \"IDisposable\" is a class member, then it\u0027s up to that class to call \"Dispose\" on it, ideally in its own \"Dispose\" method. If it\u0027s a local variable, then it should be instantiated with a \"using\" clause to prompt automatic cleanup when it goes out of scope.",
"properties":  {
"severity":  "Warning",
"warningLevel":  "1",
"defaultSeverity":  "Warning",
"title":  "\"IDisposables\" should be disposed",
"category":  "Reliability",
"helpLink":  "http://vs.sonarlint.org/rules/index.html#version=1.7.0\u0026ruleId=S2930",
"isEnabledByDefault":  "True",
"isSuppressedInSource":  "False"
}
},
{
"ruleId":  "S2930",
"locations":  [
{
"analysisTarget":  [
{
"uri":  "Nancy\\src\\Nancy.Tests\\Unit\\NancyEngineFixture.cs",
"region":  {
"startLine":  134,
"startColumn":  16,
"endLine":  134,
"endColumn":  23
}
}
]
}
],
"shortMessage":  "\"Dispose\" of \"request\".",
"fullMessage":  "You can\u0027t rely on garbage collection to clean up everything. Specifically, you can\u0027t count on it to release non-memory resources such as \"File\"s. For that, there\u0027s the \"IDisposable\" interface, and the contract that \"Dispose\" will always be called on such objects. When an \"IDisposable\" is a class member, then it\u0027s up to that class to call \"Dispose\" on it, ideally in its own \"Dispose\" method. If it\u0027s a local variable, then it should be instantiated with a \"using\" clause to prompt automatic cleanup when it goes out of scope.",
"properties":  {
"severity":  "Warning",
"warningLevel":  "1",
"defaultSeverity":  "Warning",
"title":  "\"IDisposables\" should be disposed",
"category":  "Reliability",
"helpLink":  "http://vs.sonarlint.org/rules/index.html#version=1.7.0\u0026ruleId=S2930",
"isEnabledByDefault":  "True",
"isSuppressedInSource":  "False"
}
},
{
"ruleId":  "S2930",
"locations":  [
{
"analysisTarget":  [
{
"uri":  "Nancy\\src\\Nancy.Tests\\Unit\\NancyEngineFixture.cs",
"region":  {
"startLine":  151,
"startColumn":  16,
"endLine":  151,
"endColumn":  23
}
}
]
}
],
"shortMessage":  "\"Dispose\" of \"request\".",
"fullMessage":  "You can\u0027t rely on garbage collection to clean up everything. Specifically, you can\u0027t count on it to release non-memory resources such as \"File\"s. For that, there\u0027s the \"IDisposable\" interface, and the contract that \"Dispose\" will always be called on such objects. When an \"IDisposable\" is a class member, then it\u0027s up to that class to call \"Dispose\" on it, ideally in its own \"Dispose\" method. If it\u0027s a local variable, then it should be instantiated with a \"using\" clause to prompt automatic cleanup when it goes out of scope.",
"properties":  {
"severity":  "Warning",
"warningLevel":  "1",
"defaultSeverity":  "Warning",
"title":  "\"IDisposables\" should be disposed",
"category":  "Reliability",
"helpLink":  "http://vs.sonarlint.org/rules/index.html#version=1.7.0\u0026ruleId=S2930",
"isEnabledByDefault":  "True",
"isSuppressedInSource":  "False"
}
},
{
"ruleId":  "S2930",
"locations":  [
{
"analysisTarget":  [
{
"uri":  "Nancy\\src\\Nancy.Tests\\Unit\\NancyEngineFixture.cs",
"region":  {
"startLine":  168,
"startColumn":  16,
"endLine":  168,
"endColumn":  23
}
}
]
}
],
"shortMessage":  "\"Dispose\" of \"request\".",
"fullMessage":  "You can\u0027t rely on garbage collection to clean up everything. Specifically, you can\u0027t count on it to release non-memory resources such as \"File\"s. For that, there\u0027s the \"IDisposable\" interface, and the contract that \"Dispose\" will always be called on such objects. When an \"IDisposable\" is a class member, then it\u0027s up to that class to call \"Dispose\" on it, ideally in its own \"Dispose\" method. If it\u0027s a local variable, then it should be instantiated with a \"using\" clause to prompt automatic cleanup when it goes out of scope.",
"properties":  {
"severity":  "Warning",
"warningLevel":  "1",
"defaultSeverity":  "Warning",
"title":  "\"IDisposables\" should be disposed",
"category":  "Reliability",
"helpLink":  "http://vs.sonarlint.org/rules/index.html#version=1.7.0\u0026ruleId=S2930",
"isEnabledByDefault":  "True",
"isSuppressedInSource":  "False"
}
},
{
"ruleId":  "S2930",
"locations":  [
{
"analysisTarget":  [
{
"uri":  "Nancy\\src\\Nancy.Tests\\Unit\\NancyEngineFixture.cs",
"region":  {
"startLine":  182,
"startColumn":  16,
"endLine":  182,
"endColumn":  23
}
}
]
}
],
"shortMessage":  "\"Dispose\" of \"request\".",
"fullMessage":  "You can\u0027t rely on garbage collection to clean up everything. Specifically, you can\u0027t count on it to release non-memory resources such as \"File\"s. For that, there\u0027s the \"IDisposable\" interface, and the contract that \"Dispose\" will always be called on such objects. When an \"IDisposable\" is a class member, then it\u0027s up to that class to call \"Dispose\" on it, ideally in its own \"Dispose\" method. If it\u0027s a local variable, then it should be instantiated with a \"using\" clause to prompt automatic cleanup when it goes out of scope.",
"properties":  {
"severity":  "Warning",
"warningLevel":  "1",
"defaultSeverity":  "Warning",
"title":  "\"IDisposables\" should be disposed",
"category":  "Reliability",
"helpLink":  "http://vs.sonarlint.org/rules/index.html#version=1.7.0\u0026ruleId=S2930",
"isEnabledByDefault":  "True",
"isSuppressedInSource":  "False"
}
},
{
"ruleId":  "S2930",
"locations":  [
{
"analysisTarget":  [
{
"uri":  "Nancy\\src\\Nancy.Tests\\Unit\\NancyEngineFixture.cs",
"region":  {
"startLine":  203,
"startColumn":  16,
"endLine":  203,
"endColumn":  23
}
}
]
}
],
"shortMessage":  "\"Dispose\" of \"request\".",
"fullMessage":  "You can\u0027t rely on garbage collection to clean up everything. Specifically, you can\u0027t count on it to release non-memory resources such as \"File\"s. For that, there\u0027s the \"IDisposable\" interface, and the contract that \"Dispose\" will always be called on such objects. When an \"IDisposable\" is a class member, then it\u0027s up to that class to call \"Dispose\" on it, ideally in its own \"Dispose\" method. If it\u0027s a local variable, then it should be instantiated with a \"using\" clause to prompt automatic cleanup when it goes out of scope.",
"properties":  {
"severity":  "Warning",
"warningLevel":  "1",
"defaultSeverity":  "Warning",
"title":  "\"IDisposables\" should be disposed",
"category":  "Reliability",
"helpLink":  "http://vs.sonarlint.org/rules/index.html#version=1.7.0\u0026ruleId=S2930",
"isEnabledByDefault":  "True",
"isSuppressedInSource":  "False"
}
},
{
"ruleId":  "S2930",
"locations":  [
{
"analysisTarget":  [
{
"uri":  "Nancy\\src\\Nancy.Tests\\Unit\\NancyEngineFixture.cs",
"region":  {
"startLine":  225,
"startColumn":  16,
"endLine":  225,
"endColumn":  23
}
}
]
}
],
"shortMessage":  "\"Dispose\" of \"request\".",
"fullMessage":  "You can\u0027t rely on garbage collection to clean up everything. Specifically, you can\u0027t count on it to release non-memory resources such as \"File\"s. For that, there\u0027s the \"IDisposable\" interface, and the contract that \"Dispose\" will always be called on such objects. When an \"IDisposable\" is a class member, then it\u0027s up to that class to call \"Dispose\" on it, ideally in its own \"Dispose\" method. If it\u0027s a local variable, then it should be instantiated with a \"using\" clause to prompt automatic cleanup when it goes out of scope.",
"properties":  {
"severity":  "Warning",
"warningLevel":  "1",
"defaultSeverity":  "Warning",
"title":  "\"IDisposables\" should be disposed",
"category":  "Reliability",
"helpLink":  "http://vs.sonarlint.org/rules/index.html#version=1.7.0\u0026ruleId=S2930",
"isEnabledByDefault":  "True",
"isSuppressedInSource":  "False"
}
},
{
"ruleId":  "S2930",
"locations":  [
{
"analysisTarget":  [
{
"uri":  "Nancy\\src\\Nancy.Tests\\Unit\\NancyEngineFixture.cs",
"region":  {
"startLine":  247,
"startColumn":  16,
"endLine":  247,
"endColumn":  23
}
}
]
}
],
"shortMessage":  "\"Dispose\" of \"request\".",
"fullMessage":  "You can\u0027t rely on garbage collection to clean up everything. Specifically, you can\u0027t count on it to release non-memory resources such as \"File\"s. For that, there\u0027s the \"IDisposable\" interface, and the contract that \"Dispose\" will always be called on such objects. When an \"IDisposable\" is a class member, then it\u0027s up to that class to call \"Dispose\" on it, ideally in its own \"Dispose\" method. If it\u0027s a local variable, then it should be instantiated with a \"using\" clause to prompt automatic cleanup when it goes out of scope.",
"properties":  {
"severity":  "Warning",
"warningLevel":  "1",
"defaultSeverity":  "Warning",
"title":  "\"IDisposables\" should be disposed",
"category":  "Reliability",
"helpLink":  "http://vs.sonarlint.org/rules/index.html#version=1.7.0\u0026ruleId=S2930",
"isEnabledByDefault":  "True",
"isSuppressedInSource":  "False"
}
},
{
"ruleId":  "S2930",
"locations":  [
{
"analysisTarget":  [
{
"uri":  "Nancy\\src\\Nancy.Tests\\Unit\\NancyEngineFixture.cs",
"region":  {
"startLine":  260,
"startColumn":  16,
"endLine":  260,
"endColumn":  27
}
}
]
}
],
"shortMessage":  "\"Dispose\" of \"newResponse\".",
"fullMessage":  "You can\u0027t rely on garbage collection to clean up everything. Specifically, you can\u0027t count on it to release non-memory resources such as \"File\"s. For that, there\u0027s the \"IDisposable\" interface, and the contract that \"Dispose\" will always be called on such objects. When an \"IDisposable\" is a class member, then it\u0027s up to that class to call \"Dispose\" on it, ideally in its own \"Dispose\" method. If it\u0027s a local variable, then it should be instantiated with a \"using\" clause to prompt automatic cleanup when it goes out of scope.",
"properties":  {
"severity":  "Warning",
"warningLevel":  "1",
"defaultSeverity":  "Warning",
"title":  "\"IDisposables\" should be disposed",
"category":  "Reliability",
"helpLink":  "http://vs.sonarlint.org/rules/index.html#version=1.7.0\u0026ruleId=S2930",
"isEnabledByDefault":  "True",
"isSuppressedInSource":  "False"
}
},
{
"ruleId":  "S2930",
"locations":  [
{
"analysisTarget":  [
{
"uri":  "Nancy\\src\\Nancy.Tests\\Unit\\NancyEngineFixture.cs",
"region":  {
"startLine":  266,
"startColumn":  16,
"endLine":  266,
"endColumn":  23
}
}
]
}
],
"shortMessage":  "\"Dispose\" of \"request\".",
"fullMessage":  "You can\u0027t rely on garbage collection to clean up everything. Specifically, you can\u0027t count on it to release non-memory resources such as \"File\"s. For that, there\u0027s the \"IDisposable\" interface, and the contract that \"Dispose\" will always be called on such objects. When an \"IDisposable\" is a class member, then it\u0027s up to that class to call \"Dispose\" on it, ideally in its own \"Dispose\" method. If it\u0027s a local variable, then it should be instantiated with a \"using\" clause to prompt automatic cleanup when it goes out of scope.",
"properties":  {
"severity":  "Warning",
"warningLevel":  "1",
"defaultSeverity":  "Warning",
"title":  "\"IDisposables\" should be disposed",
"category":  "Reliability",
"helpLink":  "http://vs.sonarlint.org/rules/index.html#version=1.7.0\u0026ruleId=S2930",
"isEnabledByDefault":  "True",
"isSuppressedInSource":  "False"
}
},
{
"ruleId":  "S2930",
"locations":  [
{
"analysisTarget":  [
{
"uri":  "Nancy\\src\\Nancy.Tests\\Unit\\NancyEngineFixture.cs",
"region":  {
"startLine":  288,
"startColumn":  16,
"endLine":  288,
"endColumn":  23
}
}
]
}
],
"shortMessage":  "\"Dispose\" of \"request\".",
"fullMessage":  "You can\u0027t rely on garbage collection to clean up everything. Specifically, you can\u0027t count on it to release non-memory resources such as \"File\"s. For that, there\u0027s the \"IDisposable\" interface, and the contract that \"Dispose\" will always be called on such objects. When an \"IDisposable\" is a class member, then it\u0027s up to that class to call \"Dispose\" on it, ideally in its own \"Dispose\" method. If it\u0027s a local variable, then it should be instantiated with a \"using\" clause to prompt automatic cleanup when it goes out of scope.",
"properties":  {
"severity":  "Warning",
"warningLevel":  "1",
"defaultSeverity":  "Warning",
"title":  "\"IDisposables\" should be disposed",
"category":  "Reliability",
"helpLink":  "http://vs.sonarlint.org/rules/index.html#version=1.7.0\u0026ruleId=S2930",
"isEnabledByDefault":  "True",
"isSuppressedInSource":  "False"
}
},
{
"ruleId":  "S2930",
"locations":  [
{
"analysisTarget":  [
{
"uri":  "Nancy\\src\\Nancy.Tests\\Unit\\NancyEngineFixture.cs",
"region":  {
"startLine":  301,
"startColumn":  16,
"endLine":  301,
"endColumn":  23
}
}
]
}
],
"shortMessage":  "\"Dispose\" of \"request\".",
"fullMessage":  "You can\u0027t rely on garbage collection to clean up everything. Specifically, you can\u0027t count on it to release non-memory resources such as \"File\"s. For that, there\u0027s the \"IDisposable\" interface, and the contract that \"Dispose\" will always be called on such objects. When an \"IDisposable\" is a class member, then it\u0027s up to that class to call \"Dispose\" on it, ideally in its own \"Dispose\" method. If it\u0027s a local variable, then it should be instantiated with a \"using\" clause to prompt automatic cleanup when it goes out of scope.",
"properties":  {
"severity":  "Warning",
"warningLevel":  "1",
"defaultSeverity":  "Warning",
"title":  "\"IDisposables\" should be disposed",
"category":  "Reliability",
"helpLink":  "http://vs.sonarlint.org/rules/index.html#version=1.7.0\u0026ruleId=S2930",
"isEnabledByDefault":  "True",
"isSuppressedInSource":  "False"
}
},
{
"ruleId":  "S2930",
"locations":  [
{
"analysisTarget":  [
{
"uri":  "Nancy\\src\\Nancy.Tests\\Unit\\NancyEngineFixture.cs",
"region":  {
"startLine":  314,
"startColumn":  16,
"endLine":  314,
"endColumn":  23
}
}
]
}
],
"shortMessage":  "\"Dispose\" of \"request\".",
"fullMessage":  "You can\u0027t rely on garbage collection to clean up everything. Specifically, you can\u0027t count on it to release non-memory resources such as \"File\"s. For that, there\u0027s the \"IDisposable\" interface, and the contract that \"Dispose\" will always be called on such objects. When an \"IDisposable\" is a class member, then it\u0027s up to that class to call \"Dispose\" on it, ideally in its own \"Dispose\" method. If it\u0027s a local variable, then it should be instantiated with a \"using\" clause to prompt automatic cleanup when it goes out of scope.",
"properties":  {
"severity":  "Warning",
"warningLevel":  "1",
"defaultSeverity":  "Warning",
"title":  "\"IDisposables\" should be disposed",
"category":  "Reliability",
"helpLink":  "http://vs.sonarlint.org/rules/index.html#version=1.7.0\u0026ruleId=S2930",
"isEnabledByDefault":  "True",
"isSuppressedInSource":  "False"
}
},
{
"ruleId":  "S2930",
"locations":  [
{
"analysisTarget":  [
{
"uri":  "Nancy\\src\\Nancy.Tests\\Unit\\NancyEngineFixture.cs",
"region":  {
"startLine":  327,
"startColumn":  16,
"endLine":  327,
"endColumn":  23
}
}
]
}
],
"shortMessage":  "\"Dispose\" of \"request\".",
"fullMessage":  "You can\u0027t rely on garbage collection to clean up everything. Specifically, you can\u0027t count on it to release non-memory resources such as \"File\"s. For that, there\u0027s the \"IDisposable\" interface, and the contract that \"Dispose\" will always be called on such objects. When an \"IDisposable\" is a class member, then it\u0027s up to that class to call \"Dispose\" on it, ideally in its own \"Dispose\" method. If it\u0027s a local variable, then it should be instantiated with a \"using\" clause to prompt automatic cleanup when it goes out of scope.",
"properties":  {
"severity":  "Warning",
"warningLevel":  "1",
"defaultSeverity":  "Warning",
"title":  "\"IDisposables\" should be disposed",
"category":  "Reliability",
"helpLink":  "http://vs.sonarlint.org/rules/index.html#version=1.7.0\u0026ruleId=S2930",
"isEnabledByDefault":  "True",
"isSuppressedInSource":  "False"
}
},
{
"ruleId":  "S2930",
"locations":  [
{
"analysisTarget":  [
{
"uri":  "Nancy\\src\\Nancy.Tests\\Unit\\NancyEngineFixture.cs",
"region":  {
"startLine":  353,
"startColumn":  16,
"endLine":  353,
"endColumn":  23
}
}
]
}
],
"shortMessage":  "\"Dispose\" of \"request\".",
"fullMessage":  "You can\u0027t rely on garbage collection to clean up everything. Specifically, you can\u0027t count on it to release non-memory resources such as \"File\"s. For that, there\u0027s the \"IDisposable\" interface, and the contract that \"Dispose\" will always be called on such objects. When an \"IDisposable\" is a class member, then it\u0027s up to that class to call \"Dispose\" on it, ideally in its own \"Dispose\" method. If it\u0027s a local variable, then it should be instantiated with a \"using\" clause to prompt automatic cleanup when it goes out of scope.",
"properties":  {
"severity":  "Warning",
"warningLevel":  "1",
"defaultSeverity":  "Warning",
"title":  "\"IDisposables\" should be disposed",
"category":  "Reliability",
"helpLink":  "http://vs.sonarlint.org/rules/index.html#version=1.7.0\u0026ruleId=S2930",
"isEnabledByDefault":  "True",
"isSuppressedInSource":  "False"
}
},
{
"ruleId":  "S2930",
"locations":  [
{
"analysisTarget":  [
{
"uri":  "Nancy\\src\\Nancy.Tests\\Unit\\NancyEngineFixture.cs",
"region":  {
"startLine":  378,
"startColumn":  16,
"endLine":  378,
"endColumn":  23
}
}
]
}
],
"shortMessage":  "\"Dispose\" of \"request\".",
"fullMessage":  "You can\u0027t rely on garbage collection to clean up everything. Specifically, you can\u0027t count on it to release non-memory resources such as \"File\"s. For that, there\u0027s the \"IDisposable\" interface, and the contract that \"Dispose\" will always be called on such objects. When an \"IDisposable\" is a class member, then it\u0027s up to that class to call \"Dispose\" on it, ideally in its own \"Dispose\" method. If it\u0027s a local variable, then it should be instantiated with a \"using\" clause to prompt automatic cleanup when it goes out of scope.",
"properties":  {
"severity":  "Warning",
"warningLevel":  "1",
"defaultSeverity":  "Warning",
"title":  "\"IDisposables\" should be disposed",
"category":  "Reliability",
"helpLink":  "http://vs.sonarlint.org/rules/index.html#version=1.7.0\u0026ruleId=S2930",
"isEnabledByDefault":  "True",
"isSuppressedInSource":  "False"
}
},
{
"ruleId":  "S2930",
"locations":  [
{
"analysisTarget":  [
{
"uri":  "Nancy\\src\\Nancy.Tests\\Unit\\NancyEngineFixture.cs",
"region":  {
"startLine":  427,
"startColumn":  16,
"endLine":  427,
"endColumn":  23
}
}
]
}
],
"shortMessage":  "\"Dispose\" of \"request\".",
"fullMessage":  "You can\u0027t rely on garbage collection to clean up everything. Specifically, you can\u0027t count on it to release non-memory resources such as \"File\"s. For that, there\u0027s the \"IDisposable\" interface, and the contract that \"Dispose\" will always be called on such objects. When an \"IDisposable\" is a class member, then it\u0027s up to that class to call \"Dispose\" on it, ideally in its own \"Dispose\" method. If it\u0027s a local variable, then it should be instantiated with a \"using\" clause to prompt automatic cleanup when it goes out of scope.",
"properties":  {
"severity":  "Warning",
"warningLevel":  "1",
"defaultSeverity":  "Warning",
"title":  "\"IDisposables\" should be disposed",
"category":  "Reliability",
"helpLink":  "http://vs.sonarlint.org/rules/index.html#version=1.7.0\u0026ruleId=S2930",
"isEnabledByDefault":  "True",
"isSuppressedInSource":  "False"
}
},
{
"ruleId":  "S2930",
"locations":  [
{
"analysisTarget":  [
{
"uri":  "Nancy\\src\\Nancy.Tests\\Unit\\NancyEngineFixture.cs",
"region":  {
"startLine":  460,
"startColumn":  16,
"endLine":  460,
"endColumn":  23
}
}
]
}
],
"shortMessage":  "\"Dispose\" of \"request\".",
"fullMessage":  "You can\u0027t rely on garbage collection to clean up everything. Specifically, you can\u0027t count on it to release non-memory resources such as \"File\"s. For that, there\u0027s the \"IDisposable\" interface, and the contract that \"Dispose\" will always be called on such objects. When an \"IDisposable\" is a class member, then it\u0027s up to that class to call \"Dispose\" on it, ideally in its own \"Dispose\" method. If it\u0027s a local variable, then it should be instantiated with a \"using\" clause to prompt automatic cleanup when it goes out of scope.",
"properties":  {
"severity":  "Warning",
"warningLevel":  "1",
"defaultSeverity":  "Warning",
"title":  "\"IDisposables\" should be disposed",
"category":  "Reliability",
"helpLink":  "http://vs.sonarlint.org/rules/index.html#version=1.7.0\u0026ruleId=S2930",
"isEnabledByDefault":  "True",
"isSuppressedInSource":  "False"
}
},
{
"ruleId":  "S2930",
"locations":  [
{
"analysisTarget":  [
{
"uri":  "Nancy\\src\\Nancy.Tests\\Unit\\NancyEngineFixture.cs",
"region":  {
"startLine":  492,
"startColumn":  16,
"endLine":  492,
"endColumn":  23
}
}
]
}
],
"shortMessage":  "\"Dispose\" of \"request\".",
"fullMessage":  "You can\u0027t rely on garbage collection to clean up everything. Specifically, you can\u0027t count on it to release non-memory resources such as \"File\"s. For that, there\u0027s the \"IDisposable\" interface, and the contract that \"Dispose\" will always be called on such objects. When an \"IDisposable\" is a class member, then it\u0027s up to that class to call \"Dispose\" on it, ideally in its own \"Dispose\" method. If it\u0027s a local variable, then it should be instantiated with a \"using\" clause to prompt automatic cleanup when it goes out of scope.",
"properties":  {
"severity":  "Warning",
"warningLevel":  "1",
"defaultSeverity":  "Warning",
"title":  "\"IDisposables\" should be disposed",
"category":  "Reliability",
"helpLink":  "http://vs.sonarlint.org/rules/index.html#version=1.7.0\u0026ruleId=S2930",
"isEnabledByDefault":  "True",
"isSuppressedInSource":  "False"
}
},
{
"ruleId":  "S2930",
"locations":  [
{
"analysisTarget":  [
{
"uri":  "Nancy\\src\\Nancy.Tests\\Unit\\NancyEngineFixture.cs",
"region":  {
"startLine":  523,
"startColumn":  16,
"endLine":  523,
"endColumn":  23
}
}
]
}
],
"shortMessage":  "\"Dispose\" of \"request\".",
"fullMessage":  "You can\u0027t rely on garbage collection to clean up everything. Specifically, you can\u0027t count on it to release non-memory resources such as \"File\"s. For that, there\u0027s the \"IDisposable\" interface, and the contract that \"Dispose\" will always be called on such objects. When an \"IDisposable\" is a class member, then it\u0027s up to that class to call \"Dispose\" on it, ideally in its own \"Dispose\" method. If it\u0027s a local variable, then it should be instantiated with a \"using\" clause to prompt automatic cleanup when it goes out of scope.",
"properties":  {
"severity":  "Warning",
"warningLevel":  "1",
"defaultSeverity":  "Warning",
"title":  "\"IDisposables\" should be disposed",
"category":  "Reliability",
"helpLink":  "http://vs.sonarlint.org/rules/index.html#version=1.7.0\u0026ruleId=S2930",
"isEnabledByDefault":  "True",
"isSuppressedInSource":  "False"
}
},
{
"ruleId":  "S2930",
"locations":  [
{
"analysisTarget":  [
{
"uri":  "Nancy\\src\\Nancy.Tests\\Unit\\NancyEngineFixture.cs",
"region":  {
"startLine":  536,
"startColumn":  16,
"endLine":  536,
"endColumn":  29
}
}
]
}
],
"shortMessage":  "\"Dispose\" of \"localResponse\".",
"fullMessage":  "You can\u0027t rely on garbage collection to clean up everything. Specifically, you can\u0027t count on it to release non-memory resources such as \"File\"s. For that, there\u0027s the \"IDisposable\" interface, and the contract that \"Dispose\" will always be called on such objects. When an \"IDisposable\" is a class member, then it\u0027s up to that class to call \"Dispose\" on it, ideally in its own \"Dispose\" method. If it\u0027s a local variable, then it should be instantiated with a \"using\" clause to prompt automatic cleanup when it goes out of scope.",
"properties":  {
"severity":  "Warning",
"warningLevel":  "1",
"defaultSeverity":  "Warning",
"title":  "\"IDisposables\" should be disposed",
"category":  "Reliability",
"helpLink":  "http://vs.sonarlint.org/rules/index.html#version=1.7.0\u0026ruleId=S2930",
"isEnabledByDefault":  "True",
"isSuppressedInSource":  "False"
}
},
{
"ruleId":  "S2930",
"locations":  [
{
"analysisTarget":  [
{
"uri":  "Nancy\\src\\Nancy.Tests\\Unit\\NancyEngineFixture.cs",
"region":  {
"startLine":  540,
"startColumn":  16,
"endLine":  540,
"endColumn":  27
}
}
]
}
],
"shortMessage":  "\"Dispose\" of \"localEngine\".",
"fullMessage":  "You can\u0027t rely on garbage collection to clean up everything. Specifically, you can\u0027t count on it to release non-memory resources such as \"File\"s. For that, there\u0027s the \"IDisposable\" interface, and the contract that \"Dispose\" will always be called on such objects. When an \"IDisposable\" is a class member, then it\u0027s up to that class to call \"Dispose\" on it, ideally in its own \"Dispose\" method. If it\u0027s a local variable, then it should be instantiated with a \"using\" clause to prompt automatic cleanup when it goes out of scope.",
"properties":  {
"severity":  "Warning",
"warningLevel":  "1",
"defaultSeverity":  "Warning",
"title":  "\"IDisposables\" should be disposed",
"category":  "Reliability",
"helpLink":  "http://vs.sonarlint.org/rules/index.html#version=1.7.0\u0026ruleId=S2930",
"isEnabledByDefault":  "True",
"isSuppressedInSource":  "False"
}
},
{
"ruleId":  "S2930",
"locations":  [
{
"analysisTarget":  [
{
"uri":  "Nancy\\src\\Nancy.Tests\\Unit\\NancyEngineFixture.cs",
"region":  {
"startLine":  547,
"startColumn":  16,
"endLine":  547,
"endColumn":  23
}
}
]
}
],
"shortMessage":  "\"Dispose\" of \"request\".",
"fullMessage":  "You can\u0027t rely on garbage collection to clean up everything. Specifically, you can\u0027t count on it to release non-memory resources such as \"File\"s. For that, there\u0027s the \"IDisposable\" interface, and the contract that \"Dispose\" will always be called on such objects. When an \"IDisposable\" is a class member, then it\u0027s up to that class to call \"Dispose\" on it, ideally in its own \"Dispose\" method. If it\u0027s a local variable, then it should be instantiated with a \"using\" clause to prompt automatic cleanup when it goes out of scope.",
"properties":  {
"severity":  "Warning",
"warningLevel":  "1",
"defaultSeverity":  "Warning",
"title":  "\"IDisposables\" should be disposed",
"category":  "Reliability",
"helpLink":  "http://vs.sonarlint.org/rules/index.html#version=1.7.0\u0026ruleId=S2930",
"isEnabledByDefault":  "True",
"isSuppressedInSource":  "False"
}
},
{
"ruleId":  "S2930",
"locations":  [
{
"analysisTarget":  [
{
"uri":  "Nancy\\src\\Nancy.Tests\\Unit\\NancyEngineFixture.cs",
"region":  {
"startLine":  570,
"startColumn":  16,
"endLine":  570,
"endColumn":  23
}
}
]
}
],
"shortMessage":  "\"Dispose\" of \"request\".",
"fullMessage":  "You can\u0027t rely on garbage collection to clean up everything. Specifically, you can\u0027t count on it to release non-memory resources such as \"File\"s. For that, there\u0027s the \"IDisposable\" interface, and the contract that \"Dispose\" will always be called on such objects. When an \"IDisposable\" is a class member, then it\u0027s up to that class to call \"Dispose\" on it, ideally in its own \"Dispose\" method. If it\u0027s a local variable, then it should be instantiated with a \"using\" clause to prompt automatic cleanup when it goes out of scope.",
"properties":  {
"severity":  "Warning",
"warningLevel":  "1",
"defaultSeverity":  "Warning",
"title":  "\"IDisposables\" should be disposed",
"category":  "Reliability",
"helpLink":  "http://vs.sonarlint.org/rules/index.html#version=1.7.0\u0026ruleId=S2930",
"isEnabledByDefault":  "True",
"isSuppressedInSource":  "False"
}
},
{
"ruleId":  "S2930",
"locations":  [
{
"analysisTarget":  [
{
"uri":  "Nancy\\src\\Nancy.Tests\\Unit\\NancyEngineFixture.cs",
"region":  {
"startLine":  583,
"startColumn":  16,
"endLine":  583,
"endColumn":  23
}
}
]
}
],
"shortMessage":  "\"Dispose\" of \"request\".",
"fullMessage":  "You can\u0027t rely on garbage collection to clean up everything. Specifically, you can\u0027t count on it to release non-memory resources such as \"File\"s. For that, there\u0027s the \"IDisposable\" interface, and the contract that \"Dispose\" will always be called on such objects. When an \"IDisposable\" is a class member, then it\u0027s up to that class to call \"Dispose\" on it, ideally in its own \"Dispose\" method. If it\u0027s a local variable, then it should be instantiated with a \"using\" clause to prompt automatic cleanup when it goes out of scope.",
"properties":  {
"severity":  "Warning",
"warningLevel":  "1",
"defaultSeverity":  "Warning",
"title":  "\"IDisposables\" should be disposed",
"category":  "Reliability",
"helpLink":  "http://vs.sonarlint.org/rules/index.html#version=1.7.0\u0026ruleId=S2930",
"isEnabledByDefault":  "True",
"isSuppressedInSource":  "False"
}
},
{
"ruleId":  "S2930",
"locations":  [
{
"analysisTarget":  [
{
"uri":  "Nancy\\src\\Nancy.Tests\\Unit\\NancyMiddlewareFixture.cs",
"region":  {
"startLine":  61,
"startColumn":  16,
"endLine":  61,
"endColumn":  28
}
}
]
}
],
"shortMessage":  "\"Dispose\" of \"fakeResponse\".",
"fullMessage":  "You can\u0027t rely on garbage collection to clean up everything. Specifically, you can\u0027t count on it to release non-memory resources such as \"File\"s. For that, there\u0027s the \"IDisposable\" interface, and the contract that \"Dispose\" will always be called on such objects. When an \"IDisposable\" is a class member, then it\u0027s up to that class to call \"Dispose\" on it, ideally in its own \"Dispose\" method. If it\u0027s a local variable, then it should be instantiated with a \"using\" clause to prompt automatic cleanup when it goes out of scope.",
"properties":  {
"severity":  "Warning",
"warningLevel":  "1",
"defaultSeverity":  "Warning",
"title":  "\"IDisposables\" should be disposed",
"category":  "Reliability",
"helpLink":  "http://vs.sonarlint.org/rules/index.html#version=1.7.0\u0026ruleId=S2930",
"isEnabledByDefault":  "True",
"isSuppressedInSource":  "False"
}
},
{
"ruleId":  "S2930",
"locations":  [
{
"analysisTarget":  [
{
"uri":  "Nancy\\src\\Nancy.Tests\\Unit\\NancyMiddlewareFixture.cs",
"region":  {
"startLine":  62,
"startColumn":  16,
"endLine":  62,
"endColumn":  27
}
}
]
}
],
"shortMessage":  "\"Dispose\" of \"fakeContext\".",
"fullMessage":  "You can\u0027t rely on garbage collection to clean up everything. Specifically, you can\u0027t count on it to release non-memory resources such as \"File\"s. For that, there\u0027s the \"IDisposable\" interface, and the contract that \"Dispose\" will always be called on such objects. When an \"IDisposable\" is a class member, then it\u0027s up to that class to call \"Dispose\" on it, ideally in its own \"Dispose\" method. If it\u0027s a local variable, then it should be instantiated with a \"using\" clause to prompt automatic cleanup when it goes out of scope.",
"properties":  {
"severity":  "Warning",
"warningLevel":  "1",
"defaultSeverity":  "Warning",
"title":  "\"IDisposables\" should be disposed",
"category":  "Reliability",
"helpLink":  "http://vs.sonarlint.org/rules/index.html#version=1.7.0\u0026ruleId=S2930",
"isEnabledByDefault":  "True",
"isSuppressedInSource":  "False"
}
},
{
"ruleId":  "S2930",
"locations":  [
{
"analysisTarget":  [
{
"uri":  "Nancy\\src\\Nancy.Tests\\Unit\\NancyMiddlewareFixture.cs",
"region":  {
"startLine":  80,
"startColumn":  16,
"endLine":  80,
"endColumn":  28
}
}
]
}
],
"shortMessage":  "\"Dispose\" of \"fakeResponse\".",
"fullMessage":  "You can\u0027t rely on garbage collection to clean up everything. Specifically, you can\u0027t count on it to release non-memory resources such as \"File\"s. For that, there\u0027s the \"IDisposable\" interface, and the contract that \"Dispose\" will always be called on such objects. When an \"IDisposable\" is a class member, then it\u0027s up to that class to call \"Dispose\" on it, ideally in its own \"Dispose\" method. If it\u0027s a local variable, then it should be instantiated with a \"using\" clause to prompt automatic cleanup when it goes out of scope.",
"properties":  {
"severity":  "Warning",
"warningLevel":  "1",
"defaultSeverity":  "Warning",
"title":  "\"IDisposables\" should be disposed",
"category":  "Reliability",
"helpLink":  "http://vs.sonarlint.org/rules/index.html#version=1.7.0\u0026ruleId=S2930",
"isEnabledByDefault":  "True",
"isSuppressedInSource":  "False"
}
},
{
"ruleId":  "S2930",
"locations":  [
{
"analysisTarget":  [
{
"uri":  "Nancy\\src\\Nancy.Tests\\Unit\\NancyMiddlewareFixture.cs",
"region":  {
"startLine":  81,
"startColumn":  16,
"endLine":  81,
"endColumn":  27
}
}
]
}
],
"shortMessage":  "\"Dispose\" of \"fakeContext\".",
"fullMessage":  "You can\u0027t rely on garbage collection to clean up everything. Specifically, you can\u0027t count on it to release non-memory resources such as \"File\"s. For that, there\u0027s the \"IDisposable\" interface, and the contract that \"Dispose\" will always be called on such objects. When an \"IDisposable\" is a class member, then it\u0027s up to that class to call \"Dispose\" on it, ideally in its own \"Dispose\" method. If it\u0027s a local variable, then it should be instantiated with a \"using\" clause to prompt automatic cleanup when it goes out of scope.",
"properties":  {
"severity":  "Warning",
"warningLevel":  "1",
"defaultSeverity":  "Warning",
"title":  "\"IDisposables\" should be disposed",
"category":  "Reliability",
"helpLink":  "http://vs.sonarlint.org/rules/index.html#version=1.7.0\u0026ruleId=S2930",
"isEnabledByDefault":  "True",
"isSuppressedInSource":  "False"
}
},
{
"ruleId":  "S2930",
"locations":  [
{
"analysisTarget":  [
{
"uri":  "Nancy\\src\\Nancy.Tests\\Unit\\NancyMiddlewareFixture.cs",
"region":  {
"startLine":  95,
"startColumn":  16,
"endLine":  95,
"endColumn":  28
}
}
]
}
],
"shortMessage":  "\"Dispose\" of \"fakeResponse\".",
"fullMessage":  "You can\u0027t rely on garbage collection to clean up everything. Specifically, you can\u0027t count on it to release non-memory resources such as \"File\"s. For that, there\u0027s the \"IDisposable\" interface, and the contract that \"Dispose\" will always be called on such objects. When an \"IDisposable\" is a class member, then it\u0027s up to that class to call \"Dispose\" on it, ideally in its own \"Dispose\" method. If it\u0027s a local variable, then it should be instantiated with a \"using\" clause to prompt automatic cleanup when it goes out of scope.",
"properties":  {
"severity":  "Warning",
"warningLevel":  "1",
"defaultSeverity":  "Warning",
"title":  "\"IDisposables\" should be disposed",
"category":  "Reliability",
"helpLink":  "http://vs.sonarlint.org/rules/index.html#version=1.7.0\u0026ruleId=S2930",
"isEnabledByDefault":  "True",
"isSuppressedInSource":  "False"
}
},
{
"ruleId":  "S2930",
"locations":  [
{
"analysisTarget":  [
{
"uri":  "Nancy\\src\\Nancy.Tests\\Unit\\NancyMiddlewareFixture.cs",
"region":  {
"startLine":  101,
"startColumn":  16,
"endLine":  101,
"endColumn":  27
}
}
]
}
],
"shortMessage":  "\"Dispose\" of \"fakeContext\".",
"fullMessage":  "You can\u0027t rely on garbage collection to clean up everything. Specifically, you can\u0027t count on it to release non-memory resources such as \"File\"s. For that, there\u0027s the \"IDisposable\" interface, and the contract that \"Dispose\" will always be called on such objects. When an \"IDisposable\" is a class member, then it\u0027s up to that class to call \"Dispose\" on it, ideally in its own \"Dispose\" method. If it\u0027s a local variable, then it should be instantiated with a \"using\" clause to prompt automatic cleanup when it goes out of scope.",
"properties":  {
"severity":  "Warning",
"warningLevel":  "1",
"defaultSeverity":  "Warning",
"title":  "\"IDisposables\" should be disposed",
"category":  "Reliability",
"helpLink":  "http://vs.sonarlint.org/rules/index.html#version=1.7.0\u0026ruleId=S2930",
"isEnabledByDefault":  "True",
"isSuppressedInSource":  "False"
}
},
{
"ruleId":  "S2930",
"locations":  [
{
"analysisTarget":  [
{
"uri":  "Nancy\\src\\Nancy.Tests\\Unit\\NancyMiddlewareFixture.cs",
"region":  {
"startLine":  130,
"startColumn":  16,
"endLine":  130,
"endColumn":  27
}
}
]
}
],
"shortMessage":  "\"Dispose\" of \"fakeContext\".",
"fullMessage":  "You can\u0027t rely on garbage collection to clean up everything. Specifically, you can\u0027t count on it to release non-memory resources such as \"File\"s. For that, there\u0027s the \"IDisposable\" interface, and the contract that \"Dispose\" will always be called on such objects. When an \"IDisposable\" is a class member, then it\u0027s up to that class to call \"Dispose\" on it, ideally in its own \"Dispose\" method. If it\u0027s a local variable, then it should be instantiated with a \"using\" clause to prompt automatic cleanup when it goes out of scope.",
"properties":  {
"severity":  "Warning",
"warningLevel":  "1",
"defaultSeverity":  "Warning",
"title":  "\"IDisposables\" should be disposed",
"category":  "Reliability",
"helpLink":  "http://vs.sonarlint.org/rules/index.html#version=1.7.0\u0026ruleId=S2930",
"isEnabledByDefault":  "True",
"isSuppressedInSource":  "False"
}
},
{
"ruleId":  "S2930",
"locations":  [
{
"analysisTarget":  [
{
"uri":  "Nancy\\src\\Nancy.Tests\\Unit\\NancyMiddlewareFixture.cs",
"region":  {
"startLine":  148,
"startColumn":  16,
"endLine":  148,
"endColumn":  27
}
}
]
}
],
"shortMessage":  "\"Dispose\" of \"fakeContext\".",
"fullMessage":  "You can\u0027t rely on garbage collection to clean up everything. Specifically, you can\u0027t count on it to release non-memory resources such as \"File\"s. For that, there\u0027s the \"IDisposable\" interface, and the contract that \"Dispose\" will always be called on such objects. When an \"IDisposable\" is a class member, then it\u0027s up to that class to call \"Dispose\" on it, ideally in its own \"Dispose\" method. If it\u0027s a local variable, then it should be instantiated with a \"using\" clause to prompt automatic cleanup when it goes out of scope.",
"properties":  {
"severity":  "Warning",
"warningLevel":  "1",
"defaultSeverity":  "Warning",
"title":  "\"IDisposables\" should be disposed",
"category":  "Reliability",
"helpLink":  "http://vs.sonarlint.org/rules/index.html#version=1.7.0\u0026ruleId=S2930",
"isEnabledByDefault":  "True",
"isSuppressedInSource":  "False"
}
},
{
"ruleId":  "S2930",
"locations":  [
{
"analysisTarget":  [
{
"uri":  "Nancy\\src\\Nancy.Tests\\Unit\\NancyMiddlewareFixture.cs",
"region":  {
"startLine":  164,
"startColumn":  16,
"endLine":  164,
"endColumn":  28
}
}
]
}
],
"shortMessage":  "\"Dispose\" of \"fakeResponse\".",
"fullMessage":  "You can\u0027t rely on garbage collection to clean up everything. Specifically, you can\u0027t count on it to release non-memory resources such as \"File\"s. For that, there\u0027s the \"IDisposable\" interface, and the contract that \"Dispose\" will always be called on such objects. When an \"IDisposable\" is a class member, then it\u0027s up to that class to call \"Dispose\" on it, ideally in its own \"Dispose\" method. If it\u0027s a local variable, then it should be instantiated with a \"using\" clause to prompt automatic cleanup when it goes out of scope.",
"properties":  {
"severity":  "Warning",
"warningLevel":  "1",
"defaultSeverity":  "Warning",
"title":  "\"IDisposables\" should be disposed",
"category":  "Reliability",
"helpLink":  "http://vs.sonarlint.org/rules/index.html#version=1.7.0\u0026ruleId=S2930",
"isEnabledByDefault":  "True",
"isSuppressedInSource":  "False"
}
},
{
"ruleId":  "S2930",
"locations":  [
{
"analysisTarget":  [
{
"uri":  "Nancy\\src\\Nancy.Tests\\Unit\\NancyMiddlewareFixture.cs",
"region":  {
"startLine":  167,
"startColumn":  16,
"endLine":  167,
"endColumn":  27
}
}
]
}
],
"shortMessage":  "\"Dispose\" of \"fakeContext\".",
"fullMessage":  "You can\u0027t rely on garbage collection to clean up everything. Specifically, you can\u0027t count on it to release non-memory resources such as \"File\"s. For that, there\u0027s the \"IDisposable\" interface, and the contract that \"Dispose\" will always be called on such objects. When an \"IDisposable\" is a class member, then it\u0027s up to that class to call \"Dispose\" on it, ideally in its own \"Dispose\" method. If it\u0027s a local variable, then it should be instantiated with a \"using\" clause to prompt automatic cleanup when it goes out of scope.",
"properties":  {
"severity":  "Warning",
"warningLevel":  "1",
"defaultSeverity":  "Warning",
"title":  "\"IDisposables\" should be disposed",
"category":  "Reliability",
"helpLink":  "http://vs.sonarlint.org/rules/index.html#version=1.7.0\u0026ruleId=S2930",
"isEnabledByDefault":  "True",
"isSuppressedInSource":  "False"
}
},
{
"ruleId":  "S2930",
"locations":  [
{
"analysisTarget":  [
{
"uri":  "Nancy\\src\\Nancy.Tests\\Unit\\NancyMiddlewareFixture.cs",
"region":  {
"startLine":  189,
"startColumn":  16,
"endLine":  189,
"endColumn":  28
}
}
]
}
],
"shortMessage":  "\"Dispose\" of \"fakeResponse\".",
"fullMessage":  "You can\u0027t rely on garbage collection to clean up everything. Specifically, you can\u0027t count on it to release non-memory resources such as \"File\"s. For that, there\u0027s the \"IDisposable\" interface, and the contract that \"Dispose\" will always be called on such objects. When an \"IDisposable\" is a class member, then it\u0027s up to that class to call \"Dispose\" on it, ideally in its own \"Dispose\" method. If it\u0027s a local variable, then it should be instantiated with a \"using\" clause to prompt automatic cleanup when it goes out of scope.",
"properties":  {
"severity":  "Warning",
"warningLevel":  "1",
"defaultSeverity":  "Warning",
"title":  "\"IDisposables\" should be disposed",
"category":  "Reliability",
"helpLink":  "http://vs.sonarlint.org/rules/index.html#version=1.7.0\u0026ruleId=S2930",
"isEnabledByDefault":  "True",
"isSuppressedInSource":  "False"
}
},
{
"ruleId":  "S2930",
"locations":  [
{
"analysisTarget":  [
{
"uri":  "Nancy\\src\\Nancy.Tests\\Unit\\NancyMiddlewareFixture.cs",
"region":  {
"startLine":  191,
"startColumn":  16,
"endLine":  191,
"endColumn":  27
}
}
]
}
],
"shortMessage":  "\"Dispose\" of \"fakeContext\".",
"fullMessage":  "You can\u0027t rely on garbage collection to clean up everything. Specifically, you can\u0027t count on it to release non-memory resources such as \"File\"s. For that, there\u0027s the \"IDisposable\" interface, and the contract that \"Dispose\" will always be called on such objects. When an \"IDisposable\" is a class member, then it\u0027s up to that class to call \"Dispose\" on it, ideally in its own \"Dispose\" method. If it\u0027s a local variable, then it should be instantiated with a \"using\" clause to prompt automatic cleanup when it goes out of scope.",
"properties":  {
"severity":  "Warning",
"warningLevel":  "1",
"defaultSeverity":  "Warning",
"title":  "\"IDisposables\" should be disposed",
"category":  "Reliability",
"helpLink":  "http://vs.sonarlint.org/rules/index.html#version=1.7.0\u0026ruleId=S2930",
"isEnabledByDefault":  "True",
"isSuppressedInSource":  "False"
}
},
{
"ruleId":  "S2930",
"locations":  [
{
"analysisTarget":  [
{
"uri":  "Nancy\\src\\Nancy.Tests\\Unit\\NancyMiddlewareFixture.cs",
"region":  {
"startLine":  211,
"startColumn":  16,
"endLine":  211,
"endColumn":  28
}
}
]
}
],
"shortMessage":  "\"Dispose\" of \"fakeResponse\".",
"fullMessage":  "You can\u0027t rely on garbage collection to clean up everything. Specifically, you can\u0027t count on it to release non-memory resources such as \"File\"s. For that, there\u0027s the \"IDisposable\" interface, and the contract that \"Dispose\" will always be called on such objects. When an \"IDisposable\" is a class member, then it\u0027s up to that class to call \"Dispose\" on it, ideally in its own \"Dispose\" method. If it\u0027s a local variable, then it should be instantiated with a \"using\" clause to prompt automatic cleanup when it goes out of scope.",
"properties":  {
"severity":  "Warning",
"warningLevel":  "1",
"defaultSeverity":  "Warning",
"title":  "\"IDisposables\" should be disposed",
"category":  "Reliability",
"helpLink":  "http://vs.sonarlint.org/rules/index.html#version=1.7.0\u0026ruleId=S2930",
"isEnabledByDefault":  "True",
"isSuppressedInSource":  "False"
}
},
{
"ruleId":  "S2930",
"locations":  [
{
"analysisTarget":  [
{
"uri":  "Nancy\\src\\Nancy.Tests\\Unit\\NancyMiddlewareFixture.cs",
"region":  {
"startLine":  212,
"startColumn":  16,
"endLine":  212,
"endColumn":  27
}
}
]
}
],
"shortMessage":  "\"Dispose\" of \"fakeContext\".",
"fullMessage":  "You can\u0027t rely on garbage collection to clean up everything. Specifically, you can\u0027t count on it to release non-memory resources such as \"File\"s. For that, there\u0027s the \"IDisposable\" interface, and the contract that \"Dispose\" will always be called on such objects. When an \"IDisposable\" is a class member, then it\u0027s up to that class to call \"Dispose\" on it, ideally in its own \"Dispose\" method. If it\u0027s a local variable, then it should be instantiated with a \"using\" clause to prompt automatic cleanup when it goes out of scope.",
"properties":  {
"severity":  "Warning",
"warningLevel":  "1",
"defaultSeverity":  "Warning",
"title":  "\"IDisposables\" should be disposed",
"category":  "Reliability",
"helpLink":  "http://vs.sonarlint.org/rules/index.html#version=1.7.0\u0026ruleId=S2930",
"isEnabledByDefault":  "True",
"isSuppressedInSource":  "False"
}
},
{
"ruleId":  "S2930",
"locations":  [
{
"analysisTarget":  [
{
"uri":  "Nancy\\src\\Nancy.Tests\\Unit\\NancyMiddlewareFixture.cs",
"region":  {
"startLine":  229,
"startColumn":  16,
"endLine":  229,
"endColumn":  28
}
}
]
}
],
"shortMessage":  "\"Dispose\" of \"fakeResponse\".",
"fullMessage":  "You can\u0027t rely on garbage collection to clean up everything. Specifically, you can\u0027t count on it to release non-memory resources such as \"File\"s. For that, there\u0027s the \"IDisposable\" interface, and the contract that \"Dispose\" will always be called on such objects. When an \"IDisposable\" is a class member, then it\u0027s up to that class to call \"Dispose\" on it, ideally in its own \"Dispose\" method. If it\u0027s a local variable, then it should be instantiated with a \"using\" clause to prompt automatic cleanup when it goes out of scope.",
"properties":  {
"severity":  "Warning",
"warningLevel":  "1",
"defaultSeverity":  "Warning",
"title":  "\"IDisposables\" should be disposed",
"category":  "Reliability",
"helpLink":  "http://vs.sonarlint.org/rules/index.html#version=1.7.0\u0026ruleId=S2930",
"isEnabledByDefault":  "True",
"isSuppressedInSource":  "False"
}
},
{
"ruleId":  "S2930",
"locations":  [
{
"analysisTarget":  [
{
"uri":  "Nancy\\src\\Nancy.Tests\\Unit\\NancyMiddlewareFixture.cs",
"region":  {
"startLine":  230,
"startColumn":  16,
"endLine":  230,
"endColumn":  27
}
}
]
}
],
"shortMessage":  "\"Dispose\" of \"fakeContext\".",
"fullMessage":  "You can\u0027t rely on garbage collection to clean up everything. Specifically, you can\u0027t count on it to release non-memory resources such as \"File\"s. For that, there\u0027s the \"IDisposable\" interface, and the contract that \"Dispose\" will always be called on such objects. When an \"IDisposable\" is a class member, then it\u0027s up to that class to call \"Dispose\" on it, ideally in its own \"Dispose\" method. If it\u0027s a local variable, then it should be instantiated with a \"using\" clause to prompt automatic cleanup when it goes out of scope.",
"properties":  {
"severity":  "Warning",
"warningLevel":  "1",
"defaultSeverity":  "Warning",
"title":  "\"IDisposables\" should be disposed",
"category":  "Reliability",
"helpLink":  "http://vs.sonarlint.org/rules/index.html#version=1.7.0\u0026ruleId=S2930",
"isEnabledByDefault":  "True",
"isSuppressedInSource":  "False"
}
},
{
"ruleId":  "S2930",
"locations":  [
{
"analysisTarget":  [
{
"uri":  "Nancy\\src\\Nancy.Tests\\Unit\\NancyOptionsExtensionsFixture.cs",
"region":  {
"startLine":  14,
"startColumn":  16,
"endLine":  14,
"endColumn":  28
}
}
]
}
],
"shortMessage":  "\"Dispose\" of \"nancyContext\".",
"fullMessage":  "You can\u0027t rely on garbage collection to clean up everything. Specifically, you can\u0027t count on it to release non-memory resources such as \"File\"s. For that, there\u0027s the \"IDisposable\" interface, and the contract that \"Dispose\" will always be called on such objects. When an \"IDisposable\" is a class member, then it\u0027s up to that class to call \"Dispose\" on it, ideally in its own \"Dispose\" method. If it\u0027s a local variable, then it should be instantiated with a \"using\" clause to prompt automatic cleanup when it goes out of scope.",
"properties":  {
"severity":  "Warning",
"warningLevel":  "1",
"defaultSeverity":  "Warning",
"title":  "\"IDisposables\" should be disposed",
"category":  "Reliability",
"helpLink":  "http://vs.sonarlint.org/rules/index.html#version=1.7.0\u0026ruleId=S2930",
"isEnabledByDefault":  "True",
"isSuppressedInSource":  "False"
}
},
{
"ruleId":  "S2930",
"locations":  [
{
"analysisTarget":  [
{
"uri":  "Nancy\\src\\Nancy.Tests\\Unit\\NancyOptionsFixture.cs",
"region":  {
"startLine":  20,
"startColumn":  16,
"endLine":  20,
"endColumn":  28
}
}
]
}
],
"shortMessage":  "\"Dispose\" of \"bootstrapper\".",
"fullMessage":  "You can\u0027t rely on garbage collection to clean up everything. Specifically, you can\u0027t count on it to release non-memory resources such as \"File\"s. For that, there\u0027s the \"IDisposable\" interface, and the contract that \"Dispose\" will always be called on such objects. When an \"IDisposable\" is a class member, then it\u0027s up to that class to call \"Dispose\" on it, ideally in its own \"Dispose\" method. If it\u0027s a local variable, then it should be instantiated with a \"using\" clause to prompt automatic cleanup when it goes out of scope.",
"properties":  {
"severity":  "Warning",
"warningLevel":  "1",
"defaultSeverity":  "Warning",
"title":  "\"IDisposables\" should be disposed",
"category":  "Reliability",
"helpLink":  "http://vs.sonarlint.org/rules/index.html#version=1.7.0\u0026ruleId=S2930",
"isEnabledByDefault":  "True",
"isSuppressedInSource":  "False"
}
},
{
"ruleId":  "S2930",
"locations":  [
{
"analysisTarget":  [
{
"uri":  "Nancy\\src\\Nancy.Tests\\Unit\\NancyOptionsFixture.cs",
"region":  {
"startLine":  33,
"startColumn":  16,
"endLine":  33,
"endColumn":  28
}
}
]
}
],
"shortMessage":  "\"Dispose\" of \"bootstrapper\".",
"fullMessage":  "You can\u0027t rely on garbage collection to clean up everything. Specifically, you can\u0027t count on it to release non-memory resources such as \"File\"s. For that, there\u0027s the \"IDisposable\" interface, and the contract that \"Dispose\" will always be called on such objects. When an \"IDisposable\" is a class member, then it\u0027s up to that class to call \"Dispose\" on it, ideally in its own \"Dispose\" method. If it\u0027s a local variable, then it should be instantiated with a \"using\" clause to prompt automatic cleanup when it goes out of scope.",
"properties":  {
"severity":  "Warning",
"warningLevel":  "1",
"defaultSeverity":  "Warning",
"title":  "\"IDisposables\" should be disposed",
"category":  "Reliability",
"helpLink":  "http://vs.sonarlint.org/rules/index.html#version=1.7.0\u0026ruleId=S2930",
"isEnabledByDefault":  "True",
"isSuppressedInSource":  "False"
}
},
{
"ruleId":  "S2930",
"locations":  [
{
"analysisTarget":  [
{
"uri":  "Nancy\\src\\Nancy.Tests\\Unit\\NancyOptionsFixture.cs",
"region":  {
"startLine":  34,
"startColumn":  16,
"endLine":  34,
"endColumn":  36
}
}
]
}
],
"shortMessage":  "\"Dispose\" of \"specificBootstrapper\".",
"fullMessage":  "You can\u0027t rely on garbage collection to clean up everything. Specifically, you can\u0027t count on it to release non-memory resources such as \"File\"s. For that, there\u0027s the \"IDisposable\" interface, and the contract that \"Dispose\" will always be called on such objects. When an \"IDisposable\" is a class member, then it\u0027s up to that class to call \"Dispose\" on it, ideally in its own \"Dispose\" method. If it\u0027s a local variable, then it should be instantiated with a \"using\" clause to prompt automatic cleanup when it goes out of scope.",
"properties":  {
"severity":  "Warning",
"warningLevel":  "1",
"defaultSeverity":  "Warning",
"title":  "\"IDisposables\" should be disposed",
"category":  "Reliability",
"helpLink":  "http://vs.sonarlint.org/rules/index.html#version=1.7.0\u0026ruleId=S2930",
"isEnabledByDefault":  "True",
"isSuppressedInSource":  "False"
}
},
{
"ruleId":  "S2930",
"locations":  [
{
"analysisTarget":  [
{
"uri":  "Nancy\\src\\Nancy.Tests\\Unit\\RequestFixture.cs",
"region":  {
"startLine":  53,
"startColumn":  16,
"endLine":  53,
"endColumn":  22
}
}
]
}
],
"shortMessage":  "\"Dispose\" of \"writer\".",
"fullMessage":  "You can\u0027t rely on garbage collection to clean up everything. Specifically, you can\u0027t count on it to release non-memory resources such as \"File\"s. For that, there\u0027s the \"IDisposable\" interface, and the contract that \"Dispose\" will always be called on such objects. When an \"IDisposable\" is a class member, then it\u0027s up to that class to call \"Dispose\" on it, ideally in its own \"Dispose\" method. If it\u0027s a local variable, then it should be instantiated with a \"using\" clause to prompt automatic cleanup when it goes out of scope.",
"properties":  {
"severity":  "Warning",
"warningLevel":  "1",
"defaultSeverity":  "Warning",
"title":  "\"IDisposables\" should be disposed",
"category":  "Reliability",
"helpLink":  "http://vs.sonarlint.org/rules/index.html#version=1.7.0\u0026ruleId=S2930",
"isEnabledByDefault":  "True",
"isSuppressedInSource":  "False"
}
},
{
"ruleId":  "S2930",
"locations":  [
{
"analysisTarget":  [
{
"uri":  "Nancy\\src\\Nancy.Tests\\Unit\\RequestFixture.cs",
"region":  {
"startLine":  62,
"startColumn":  16,
"endLine":  62,
"endColumn":  23
}
}
]
}
],
"shortMessage":  "\"Dispose\" of \"request\".",
"fullMessage":  "You can\u0027t rely on garbage collection to clean up everything. Specifically, you can\u0027t count on it to release non-memory resources such as \"File\"s. For that, there\u0027s the \"IDisposable\" interface, and the contract that \"Dispose\" will always be called on such objects. When an \"IDisposable\" is a class member, then it\u0027s up to that class to call \"Dispose\" on it, ideally in its own \"Dispose\" method. If it\u0027s a local variable, then it should be instantiated with a \"using\" clause to prompt automatic cleanup when it goes out of scope.",
"properties":  {
"severity":  "Warning",
"warningLevel":  "1",
"defaultSeverity":  "Warning",
"title":  "\"IDisposables\" should be disposed",
"category":  "Reliability",
"helpLink":  "http://vs.sonarlint.org/rules/index.html#version=1.7.0\u0026ruleId=S2930",
"isEnabledByDefault":  "True",
"isSuppressedInSource":  "False"
}
},
{
"ruleId":  "S2930",
"locations":  [
{
"analysisTarget":  [
{
"uri":  "Nancy\\src\\Nancy.Tests\\Unit\\RequestFixture.cs",
"region":  {
"startLine":  78,
"startColumn":  16,
"endLine":  78,
"endColumn":  22
}
}
]
}
],
"shortMessage":  "\"Dispose\" of \"writer\".",
"fullMessage":  "You can\u0027t rely on garbage collection to clean up everything. Specifically, you can\u0027t count on it to release non-memory resources such as \"File\"s. For that, there\u0027s the \"IDisposable\" interface, and the contract that \"Dispose\" will always be called on such objects. When an \"IDisposable\" is a class member, then it\u0027s up to that class to call \"Dispose\" on it, ideally in its own \"Dispose\" method. If it\u0027s a local variable, then it should be instantiated with a \"using\" clause to prompt automatic cleanup when it goes out of scope.",
"properties":  {
"severity":  "Warning",
"warningLevel":  "1",
"defaultSeverity":  "Warning",
"title":  "\"IDisposables\" should be disposed",
"category":  "Reliability",
"helpLink":  "http://vs.sonarlint.org/rules/index.html#version=1.7.0\u0026ruleId=S2930",
"isEnabledByDefault":  "True",
"isSuppressedInSource":  "False"
}
},
{
"ruleId":  "S2930",
"locations":  [
{
"analysisTarget":  [
{
"uri":  "Nancy\\src\\Nancy.Tests\\Unit\\RequestFixture.cs",
"region":  {
"startLine":  87,
"startColumn":  16,
"endLine":  87,
"endColumn":  23
}
}
]
}
],
"shortMessage":  "\"Dispose\" of \"request\".",
"fullMessage":  "You can\u0027t rely on garbage collection to clean up everything. Specifically, you can\u0027t count on it to release non-memory resources such as \"File\"s. For that, there\u0027s the \"IDisposable\" interface, and the contract that \"Dispose\" will always be called on such objects. When an \"IDisposable\" is a class member, then it\u0027s up to that class to call \"Dispose\" on it, ideally in its own \"Dispose\" method. If it\u0027s a local variable, then it should be instantiated with a \"using\" clause to prompt automatic cleanup when it goes out of scope.",
"properties":  {
"severity":  "Warning",
"warningLevel":  "1",
"defaultSeverity":  "Warning",
"title":  "\"IDisposables\" should be disposed",
"category":  "Reliability",
"helpLink":  "http://vs.sonarlint.org/rules/index.html#version=1.7.0\u0026ruleId=S2930",
"isEnabledByDefault":  "True",
"isSuppressedInSource":  "False"
}
},
{
"ruleId":  "S2930",
"locations":  [
{
"analysisTarget":  [
{
"uri":  "Nancy\\src\\Nancy.Tests\\Unit\\RequestFixture.cs",
"region":  {
"startLine":  133,
"startColumn":  16,
"endLine":  133,
"endColumn":  23
}
}
]
}
],
"shortMessage":  "\"Dispose\" of \"request\".",
"fullMessage":  "You can\u0027t rely on garbage collection to clean up everything. Specifically, you can\u0027t count on it to release non-memory resources such as \"File\"s. For that, there\u0027s the \"IDisposable\" interface, and the contract that \"Dispose\" will always be called on such objects. When an \"IDisposable\" is a class member, then it\u0027s up to that class to call \"Dispose\" on it, ideally in its own \"Dispose\" method. If it\u0027s a local variable, then it should be instantiated with a \"using\" clause to prompt automatic cleanup when it goes out of scope.",
"properties":  {
"severity":  "Warning",
"warningLevel":  "1",
"defaultSeverity":  "Warning",
"title":  "\"IDisposables\" should be disposed",
"category":  "Reliability",
"helpLink":  "http://vs.sonarlint.org/rules/index.html#version=1.7.0\u0026ruleId=S2930",
"isEnabledByDefault":  "True",
"isSuppressedInSource":  "False"
}
},
{
"ruleId":  "S2930",
"locations":  [
{
"analysisTarget":  [
{
"uri":  "Nancy\\src\\Nancy.Tests\\Unit\\RequestFixture.cs",
"region":  {
"startLine":  146,
"startColumn":  16,
"endLine":  146,
"endColumn":  23
}
}
]
}
],
"shortMessage":  "\"Dispose\" of \"request\".",
"fullMessage":  "You can\u0027t rely on garbage collection to clean up everything. Specifically, you can\u0027t count on it to release non-memory resources such as \"File\"s. For that, there\u0027s the \"IDisposable\" interface, and the contract that \"Dispose\" will always be called on such objects. When an \"IDisposable\" is a class member, then it\u0027s up to that class to call \"Dispose\" on it, ideally in its own \"Dispose\" method. If it\u0027s a local variable, then it should be instantiated with a \"using\" clause to prompt automatic cleanup when it goes out of scope.",
"properties":  {
"severity":  "Warning",
"warningLevel":  "1",
"defaultSeverity":  "Warning",
"title":  "\"IDisposables\" should be disposed",
"category":  "Reliability",
"helpLink":  "http://vs.sonarlint.org/rules/index.html#version=1.7.0\u0026ruleId=S2930",
"isEnabledByDefault":  "True",
"isSuppressedInSource":  "False"
}
},
{
"ruleId":  "S2930",
"locations":  [
{
"analysisTarget":  [
{
"uri":  "Nancy\\src\\Nancy.Tests\\Unit\\RequestFixture.cs",
"region":  {
"startLine":  162,
"startColumn":  16,
"endLine":  162,
"endColumn":  23
}
}
]
}
],
"shortMessage":  "\"Dispose\" of \"request\".",
"fullMessage":  "You can\u0027t rely on garbage collection to clean up everything. Specifically, you can\u0027t count on it to release non-memory resources such as \"File\"s. For that, there\u0027s the \"IDisposable\" interface, and the contract that \"Dispose\" will always be called on such objects. When an \"IDisposable\" is a class member, then it\u0027s up to that class to call \"Dispose\" on it, ideally in its own \"Dispose\" method. If it\u0027s a local variable, then it should be instantiated with a \"using\" clause to prompt automatic cleanup when it goes out of scope.",
"properties":  {
"severity":  "Warning",
"warningLevel":  "1",
"defaultSeverity":  "Warning",
"title":  "\"IDisposables\" should be disposed",
"category":  "Reliability",
"helpLink":  "http://vs.sonarlint.org/rules/index.html#version=1.7.0\u0026ruleId=S2930",
"isEnabledByDefault":  "True",
"isSuppressedInSource":  "False"
}
},
{
"ruleId":  "S2930",
"locations":  [
{
"analysisTarget":  [
{
"uri":  "Nancy\\src\\Nancy.Tests\\Unit\\RequestFixture.cs",
"region":  {
"startLine":  175,
"startColumn":  16,
"endLine":  175,
"endColumn":  23
}
}
]
}
],
"shortMessage":  "\"Dispose\" of \"request\".",
"fullMessage":  "You can\u0027t rely on garbage collection to clean up everything. Specifically, you can\u0027t count on it to release non-memory resources such as \"File\"s. For that, there\u0027s the \"IDisposable\" interface, and the contract that \"Dispose\" will always be called on such objects. When an \"IDisposable\" is a class member, then it\u0027s up to that class to call \"Dispose\" on it, ideally in its own \"Dispose\" method. If it\u0027s a local variable, then it should be instantiated with a \"using\" clause to prompt automatic cleanup when it goes out of scope.",
"properties":  {
"severity":  "Warning",
"warningLevel":  "1",
"defaultSeverity":  "Warning",
"title":  "\"IDisposables\" should be disposed",
"category":  "Reliability",
"helpLink":  "http://vs.sonarlint.org/rules/index.html#version=1.7.0\u0026ruleId=S2930",
"isEnabledByDefault":  "True",
"isSuppressedInSource":  "False"
}
},
{
"ruleId":  "S2930",
"locations":  [
{
"analysisTarget":  [
{
"uri":  "Nancy\\src\\Nancy.Tests\\Unit\\RequestFixture.cs",
"region":  {
"startLine":  187,
"startColumn":  16,
"endLine":  187,
"endColumn":  22
}
}
]
}
],
"shortMessage":  "\"Dispose\" of \"writer\".",
"fullMessage":  "You can\u0027t rely on garbage collection to clean up everything. Specifically, you can\u0027t count on it to release non-memory resources such as \"File\"s. For that, there\u0027s the \"IDisposable\" interface, and the contract that \"Dispose\" will always be called on such objects. When an \"IDisposable\" is a class member, then it\u0027s up to that class to call \"Dispose\" on it, ideally in its own \"Dispose\" method. If it\u0027s a local variable, then it should be instantiated with a \"using\" clause to prompt automatic cleanup when it goes out of scope.",
"properties":  {
"severity":  "Warning",
"warningLevel":  "1",
"defaultSeverity":  "Warning",
"title":  "\"IDisposables\" should be disposed",
"category":  "Reliability",
"helpLink":  "http://vs.sonarlint.org/rules/index.html#version=1.7.0\u0026ruleId=S2930",
"isEnabledByDefault":  "True",
"isSuppressedInSource":  "False"
}
},
{
"ruleId":  "S2930",
"locations":  [
{
"analysisTarget":  [
{
"uri":  "Nancy\\src\\Nancy.Tests\\Unit\\RequestFixture.cs",
"region":  {
"startLine":  199,
"startColumn":  16,
"endLine":  199,
"endColumn":  23
}
}
]
}
],
"shortMessage":  "\"Dispose\" of \"request\".",
"fullMessage":  "You can\u0027t rely on garbage collection to clean up everything. Specifically, you can\u0027t count on it to release non-memory resources such as \"File\"s. For that, there\u0027s the \"IDisposable\" interface, and the contract that \"Dispose\" will always be called on such objects. When an \"IDisposable\" is a class member, then it\u0027s up to that class to call \"Dispose\" on it, ideally in its own \"Dispose\" method. If it\u0027s a local variable, then it should be instantiated with a \"using\" clause to prompt automatic cleanup when it goes out of scope.",
"properties":  {
"severity":  "Warning",
"warningLevel":  "1",
"defaultSeverity":  "Warning",
"title":  "\"IDisposables\" should be disposed",
"category":  "Reliability",
"helpLink":  "http://vs.sonarlint.org/rules/index.html#version=1.7.0\u0026ruleId=S2930",
"isEnabledByDefault":  "True",
"isSuppressedInSource":  "False"
}
},
{
"ruleId":  "S2930",
"locations":  [
{
"analysisTarget":  [
{
"uri":  "Nancy\\src\\Nancy.Tests\\Unit\\RequestFixture.cs",
"region":  {
"startLine":  211,
"startColumn":  16,
"endLine":  211,
"endColumn":  22
}
}
]
}
],
"shortMessage":  "\"Dispose\" of \"writer\".",
"fullMessage":  "You can\u0027t rely on garbage collection to clean up everything. Specifically, you can\u0027t count on it to release non-memory resources such as \"File\"s. For that, there\u0027s the \"IDisposable\" interface, and the contract that \"Dispose\" will always be called on such objects. When an \"IDisposable\" is a class member, then it\u0027s up to that class to call \"Dispose\" on it, ideally in its own \"Dispose\" method. If it\u0027s a local variable, then it should be instantiated with a \"using\" clause to prompt automatic cleanup when it goes out of scope.",
"properties":  {
"severity":  "Warning",
"warningLevel":  "1",
"defaultSeverity":  "Warning",
"title":  "\"IDisposables\" should be disposed",
"category":  "Reliability",
"helpLink":  "http://vs.sonarlint.org/rules/index.html#version=1.7.0\u0026ruleId=S2930",
"isEnabledByDefault":  "True",
"isSuppressedInSource":  "False"
}
},
{
"ruleId":  "S2930",
"locations":  [
{
"analysisTarget":  [
{
"uri":  "Nancy\\src\\Nancy.Tests\\Unit\\RequestFixture.cs",
"region":  {
"startLine":  223,
"startColumn":  16,
"endLine":  223,
"endColumn":  23
}
}
]
}
],
"shortMessage":  "\"Dispose\" of \"request\".",
"fullMessage":  "You can\u0027t rely on garbage collection to clean up everything. Specifically, you can\u0027t count on it to release non-memory resources such as \"File\"s. For that, there\u0027s the \"IDisposable\" interface, and the contract that \"Dispose\" will always be called on such objects. When an \"IDisposable\" is a class member, then it\u0027s up to that class to call \"Dispose\" on it, ideally in its own \"Dispose\" method. If it\u0027s a local variable, then it should be instantiated with a \"using\" clause to prompt automatic cleanup when it goes out of scope.",
"properties":  {
"severity":  "Warning",
"warningLevel":  "1",
"defaultSeverity":  "Warning",
"title":  "\"IDisposables\" should be disposed",
"category":  "Reliability",
"helpLink":  "http://vs.sonarlint.org/rules/index.html#version=1.7.0\u0026ruleId=S2930",
"isEnabledByDefault":  "True",
"isSuppressedInSource":  "False"
}
},
{
"ruleId":  "S2930",
"locations":  [
{
"analysisTarget":  [
{
"uri":  "Nancy\\src\\Nancy.Tests\\Unit\\RequestFixture.cs",
"region":  {
"startLine":  233,
"startColumn":  16,
"endLine":  233,
"endColumn":  22
}
}
]
}
],
"shortMessage":  "\"Dispose\" of \"memory\".",
"fullMessage":  "You can\u0027t rely on garbage collection to clean up everything. Specifically, you can\u0027t count on it to release non-memory resources such as \"File\"s. For that, there\u0027s the \"IDisposable\" interface, and the contract that \"Dispose\" will always be called on such objects. When an \"IDisposable\" is a class member, then it\u0027s up to that class to call \"Dispose\" on it, ideally in its own \"Dispose\" method. If it\u0027s a local variable, then it should be instantiated with a \"using\" clause to prompt automatic cleanup when it goes out of scope.",
"properties":  {
"severity":  "Warning",
"warningLevel":  "1",
"defaultSeverity":  "Warning",
"title":  "\"IDisposables\" should be disposed",
"category":  "Reliability",
"helpLink":  "http://vs.sonarlint.org/rules/index.html#version=1.7.0\u0026ruleId=S2930",
"isEnabledByDefault":  "True",
"isSuppressedInSource":  "False"
}
},
{
"ruleId":  "S2930",
"locations":  [
{
"analysisTarget":  [
{
"uri":  "Nancy\\src\\Nancy.Tests\\Unit\\RequestFixture.cs",
"region":  {
"startLine":  247,
"startColumn":  16,
"endLine":  247,
"endColumn":  23
}
}
]
}
],
"shortMessage":  "\"Dispose\" of \"request\".",
"fullMessage":  "You can\u0027t rely on garbage collection to clean up everything. Specifically, you can\u0027t count on it to release non-memory resources such as \"File\"s. For that, there\u0027s the \"IDisposable\" interface, and the contract that \"Dispose\" will always be called on such objects. When an \"IDisposable\" is a class member, then it\u0027s up to that class to call \"Dispose\" on it, ideally in its own \"Dispose\" method. If it\u0027s a local variable, then it should be instantiated with a \"using\" clause to prompt automatic cleanup when it goes out of scope.",
"properties":  {
"severity":  "Warning",
"warningLevel":  "1",
"defaultSeverity":  "Warning",
"title":  "\"IDisposables\" should be disposed",
"category":  "Reliability",
"helpLink":  "http://vs.sonarlint.org/rules/index.html#version=1.7.0\u0026ruleId=S2930",
"isEnabledByDefault":  "True",
"isSuppressedInSource":  "False"
}
},
{
"ruleId":  "S2930",
"locations":  [
{
"analysisTarget":  [
{
"uri":  "Nancy\\src\\Nancy.Tests\\Unit\\RequestFixture.cs",
"region":  {
"startLine":  261,
"startColumn":  16,
"endLine":  261,
"endColumn":  22
}
}
]
}
],
"shortMessage":  "\"Dispose\" of \"writer\".",
"fullMessage":  "You can\u0027t rely on garbage collection to clean up everything. Specifically, you can\u0027t count on it to release non-memory resources such as \"File\"s. For that, there\u0027s the \"IDisposable\" interface, and the contract that \"Dispose\" will always be called on such objects. When an \"IDisposable\" is a class member, then it\u0027s up to that class to call \"Dispose\" on it, ideally in its own \"Dispose\" method. If it\u0027s a local variable, then it should be instantiated with a \"using\" clause to prompt automatic cleanup when it goes out of scope.",
"properties":  {
"severity":  "Warning",
"warningLevel":  "1",
"defaultSeverity":  "Warning",
"title":  "\"IDisposables\" should be disposed",
"category":  "Reliability",
"helpLink":  "http://vs.sonarlint.org/rules/index.html#version=1.7.0\u0026ruleId=S2930",
"isEnabledByDefault":  "True",
"isSuppressedInSource":  "False"
}
},
{
"ruleId":  "S2930",
"locations":  [
{
"analysisTarget":  [
{
"uri":  "Nancy\\src\\Nancy.Tests\\Unit\\RequestFixture.cs",
"region":  {
"startLine":  273,
"startColumn":  16,
"endLine":  273,
"endColumn":  23
}
}
]
}
],
"shortMessage":  "\"Dispose\" of \"request\".",
"fullMessage":  "You can\u0027t rely on garbage collection to clean up everything. Specifically, you can\u0027t count on it to release non-memory resources such as \"File\"s. For that, there\u0027s the \"IDisposable\" interface, and the contract that \"Dispose\" will always be called on such objects. When an \"IDisposable\" is a class member, then it\u0027s up to that class to call \"Dispose\" on it, ideally in its own \"Dispose\" method. If it\u0027s a local variable, then it should be instantiated with a \"using\" clause to prompt automatic cleanup when it goes out of scope.",
"properties":  {
"severity":  "Warning",
"warningLevel":  "1",
"defaultSeverity":  "Warning",
"title":  "\"IDisposables\" should be disposed",
"category":  "Reliability",
"helpLink":  "http://vs.sonarlint.org/rules/index.html#version=1.7.0\u0026ruleId=S2930",
"isEnabledByDefault":  "True",
"isSuppressedInSource":  "False"
}
},
{
"ruleId":  "S2930",
"locations":  [
{
"analysisTarget":  [
{
"uri":  "Nancy\\src\\Nancy.Tests\\Unit\\RequestFixture.cs",
"region":  {
"startLine":  287,
"startColumn":  16,
"endLine":  287,
"endColumn":  22
}
}
]
}
],
"shortMessage":  "\"Dispose\" of \"writer\".",
"fullMessage":  "You can\u0027t rely on garbage collection to clean up everything. Specifically, you can\u0027t count on it to release non-memory resources such as \"File\"s. For that, there\u0027s the \"IDisposable\" interface, and the contract that \"Dispose\" will always be called on such objects. When an \"IDisposable\" is a class member, then it\u0027s up to that class to call \"Dispose\" on it, ideally in its own \"Dispose\" method. If it\u0027s a local variable, then it should be instantiated with a \"using\" clause to prompt automatic cleanup when it goes out of scope.",
"properties":  {
"severity":  "Warning",
"warningLevel":  "1",
"defaultSeverity":  "Warning",
"title":  "\"IDisposables\" should be disposed",
"category":  "Reliability",
"helpLink":  "http://vs.sonarlint.org/rules/index.html#version=1.7.0\u0026ruleId=S2930",
"isEnabledByDefault":  "True",
"isSuppressedInSource":  "False"
}
},
{
"ruleId":  "S2930",
"locations":  [
{
"analysisTarget":  [
{
"uri":  "Nancy\\src\\Nancy.Tests\\Unit\\RequestFixture.cs",
"region":  {
"startLine":  299,
"startColumn":  16,
"endLine":  299,
"endColumn":  23
}
}
]
}
],
"shortMessage":  "\"Dispose\" of \"request\".",
"fullMessage":  "You can\u0027t rely on garbage collection to clean up everything. Specifically, you can\u0027t count on it to release non-memory resources such as \"File\"s. For that, there\u0027s the \"IDisposable\" interface, and the contract that \"Dispose\" will always be called on such objects. When an \"IDisposable\" is a class member, then it\u0027s up to that class to call \"Dispose\" on it, ideally in its own \"Dispose\" method. If it\u0027s a local variable, then it should be instantiated with a \"using\" clause to prompt automatic cleanup when it goes out of scope.",
"properties":  {
"severity":  "Warning",
"warningLevel":  "1",
"defaultSeverity":  "Warning",
"title":  "\"IDisposables\" should be disposed",
"category":  "Reliability",
"helpLink":  "http://vs.sonarlint.org/rules/index.html#version=1.7.0\u0026ruleId=S2930",
"isEnabledByDefault":  "True",
"isSuppressedInSource":  "False"
}
},
{
"ruleId":  "S2930",
"locations":  [
{
"analysisTarget":  [
{
"uri":  "Nancy\\src\\Nancy.Tests\\Unit\\RequestFixture.cs",
"region":  {
"startLine":  311,
"startColumn":  16,
"endLine":  311,
"endColumn":  22
}
}
]
}
],
"shortMessage":  "\"Dispose\" of \"memory\".",
"fullMessage":  "You can\u0027t rely on garbage collection to clean up everything. Specifically, you can\u0027t count on it to release non-memory resources such as \"File\"s. For that, there\u0027s the \"IDisposable\" interface, and the contract that \"Dispose\" will always be called on such objects. When an \"IDisposable\" is a class member, then it\u0027s up to that class to call \"Dispose\" on it, ideally in its own \"Dispose\" method. If it\u0027s a local variable, then it should be instantiated with a \"using\" clause to prompt automatic cleanup when it goes out of scope.",
"properties":  {
"severity":  "Warning",
"warningLevel":  "1",
"defaultSeverity":  "Warning",
"title":  "\"IDisposables\" should be disposed",
"category":  "Reliability",
"helpLink":  "http://vs.sonarlint.org/rules/index.html#version=1.7.0\u0026ruleId=S2930",
"isEnabledByDefault":  "True",
"isSuppressedInSource":  "False"
}
},
{
"ruleId":  "S2930",
"locations":  [
{
"analysisTarget":  [
{
"uri":  "Nancy\\src\\Nancy.Tests\\Unit\\RequestFixture.cs",
"region":  {
"startLine":  325,
"startColumn":  16,
"endLine":  325,
"endColumn":  23
}
}
]
}
],
"shortMessage":  "\"Dispose\" of \"request\".",
"fullMessage":  "You can\u0027t rely on garbage collection to clean up everything. Specifically, you can\u0027t count on it to release non-memory resources such as \"File\"s. For that, there\u0027s the \"IDisposable\" interface, and the contract that \"Dispose\" will always be called on such objects. When an \"IDisposable\" is a class member, then it\u0027s up to that class to call \"Dispose\" on it, ideally in its own \"Dispose\" method. If it\u0027s a local variable, then it should be instantiated with a \"using\" clause to prompt automatic cleanup when it goes out of scope.",
"properties":  {
"severity":  "Warning",
"warningLevel":  "1",
"defaultSeverity":  "Warning",
"title":  "\"IDisposables\" should be disposed",
"category":  "Reliability",
"helpLink":  "http://vs.sonarlint.org/rules/index.html#version=1.7.0\u0026ruleId=S2930",
"isEnabledByDefault":  "True",
"isSuppressedInSource":  "False"
}
},
{
"ruleId":  "S2930",
"locations":  [
{
"analysisTarget":  [
{
"uri":  "Nancy\\src\\Nancy.Tests\\Unit\\RequestFixture.cs",
"region":  {
"startLine":  337,
"startColumn":  16,
"endLine":  337,
"endColumn":  22
}
}
]
}
],
"shortMessage":  "\"Dispose\" of \"memory\".",
"fullMessage":  "You can\u0027t rely on garbage collection to clean up everything. Specifically, you can\u0027t count on it to release non-memory resources such as \"File\"s. For that, there\u0027s the \"IDisposable\" interface, and the contract that \"Dispose\" will always be called on such objects. When an \"IDisposable\" is a class member, then it\u0027s up to that class to call \"Dispose\" on it, ideally in its own \"Dispose\" method. If it\u0027s a local variable, then it should be instantiated with a \"using\" clause to prompt automatic cleanup when it goes out of scope.",
"properties":  {
"severity":  "Warning",
"warningLevel":  "1",
"defaultSeverity":  "Warning",
"title":  "\"IDisposables\" should be disposed",
"category":  "Reliability",
"helpLink":  "http://vs.sonarlint.org/rules/index.html#version=1.7.0\u0026ruleId=S2930",
"isEnabledByDefault":  "True",
"isSuppressedInSource":  "False"
}
},
{
"ruleId":  "S2930",
"locations":  [
{
"analysisTarget":  [
{
"uri":  "Nancy\\src\\Nancy.Tests\\Unit\\RequestFixture.cs",
"region":  {
"startLine":  351,
"startColumn":  16,
"endLine":  351,
"endColumn":  23
}
}
]
}
],
"shortMessage":  "\"Dispose\" of \"request\".",
"fullMessage":  "You can\u0027t rely on garbage collection to clean up everything. Specifically, you can\u0027t count on it to release non-memory resources such as \"File\"s. For that, there\u0027s the \"IDisposable\" interface, and the contract that \"Dispose\" will always be called on such objects. When an \"IDisposable\" is a class member, then it\u0027s up to that class to call \"Dispose\" on it, ideally in its own \"Dispose\" method. If it\u0027s a local variable, then it should be instantiated with a \"using\" clause to prompt automatic cleanup when it goes out of scope.",
"properties":  {
"severity":  "Warning",
"warningLevel":  "1",
"defaultSeverity":  "Warning",
"title":  "\"IDisposables\" should be disposed",
"category":  "Reliability",
"helpLink":  "http://vs.sonarlint.org/rules/index.html#version=1.7.0\u0026ruleId=S2930",
"isEnabledByDefault":  "True",
"isSuppressedInSource":  "False"
}
},
{
"ruleId":  "S2930",
"locations":  [
{
"analysisTarget":  [
{
"uri":  "Nancy\\src\\Nancy.Tests\\Unit\\RequestFixture.cs",
"region":  {
"startLine":  362,
"startColumn":  16,
"endLine":  362,
"endColumn":  22
}
}
]
}
],
"shortMessage":  "\"Dispose\" of \"memory\".",
"fullMessage":  "You can\u0027t rely on garbage collection to clean up everything. Specifically, you can\u0027t count on it to release non-memory resources such as \"File\"s. For that, there\u0027s the \"IDisposable\" interface, and the contract that \"Dispose\" will always be called on such objects. When an \"IDisposable\" is a class member, then it\u0027s up to that class to call \"Dispose\" on it, ideally in its own \"Dispose\" method. If it\u0027s a local variable, then it should be instantiated with a \"using\" clause to prompt automatic cleanup when it goes out of scope.",
"properties":  {
"severity":  "Warning",
"warningLevel":  "1",
"defaultSeverity":  "Warning",
"title":  "\"IDisposables\" should be disposed",
"category":  "Reliability",
"helpLink":  "http://vs.sonarlint.org/rules/index.html#version=1.7.0\u0026ruleId=S2930",
"isEnabledByDefault":  "True",
"isSuppressedInSource":  "False"
}
},
{
"ruleId":  "S2930",
"locations":  [
{
"analysisTarget":  [
{
"uri":  "Nancy\\src\\Nancy.Tests\\Unit\\RequestFixture.cs",
"region":  {
"startLine":  375,
"startColumn":  16,
"endLine":  375,
"endColumn":  23
}
}
]
}
],
"shortMessage":  "\"Dispose\" of \"request\".",
"fullMessage":  "You can\u0027t rely on garbage collection to clean up everything. Specifically, you can\u0027t count on it to release non-memory resources such as \"File\"s. For that, there\u0027s the \"IDisposable\" interface, and the contract that \"Dispose\" will always be called on such objects. When an \"IDisposable\" is a class member, then it\u0027s up to that class to call \"Dispose\" on it, ideally in its own \"Dispose\" method. If it\u0027s a local variable, then it should be instantiated with a \"using\" clause to prompt automatic cleanup when it goes out of scope.",
"properties":  {
"severity":  "Warning",
"warningLevel":  "1",
"defaultSeverity":  "Warning",
"title":  "\"IDisposables\" should be disposed",
"category":  "Reliability",
"helpLink":  "http://vs.sonarlint.org/rules/index.html#version=1.7.0\u0026ruleId=S2930",
"isEnabledByDefault":  "True",
"isSuppressedInSource":  "False"
}
},
{
"ruleId":  "S2930",
"locations":  [
{
"analysisTarget":  [
{
"uri":  "Nancy\\src\\Nancy.Tests\\Unit\\RequestFixture.cs",
"region":  {
"startLine":  385,
"startColumn":  16,
"endLine":  385,
"endColumn":  22
}
}
]
}
],
"shortMessage":  "\"Dispose\" of \"memory\".",
"fullMessage":  "You can\u0027t rely on garbage collection to clean up everything. Specifically, you can\u0027t count on it to release non-memory resources such as \"File\"s. For that, there\u0027s the \"IDisposable\" interface, and the contract that \"Dispose\" will always be called on such objects. When an \"IDisposable\" is a class member, then it\u0027s up to that class to call \"Dispose\" on it, ideally in its own \"Dispose\" method. If it\u0027s a local variable, then it should be instantiated with a \"using\" clause to prompt automatic cleanup when it goes out of scope.",
"properties":  {
"severity":  "Warning",
"warningLevel":  "1",
"defaultSeverity":  "Warning",
"title":  "\"IDisposables\" should be disposed",
"category":  "Reliability",
"helpLink":  "http://vs.sonarlint.org/rules/index.html#version=1.7.0\u0026ruleId=S2930",
"isEnabledByDefault":  "True",
"isSuppressedInSource":  "False"
}
},
{
"ruleId":  "S2930",
"locations":  [
{
"analysisTarget":  [
{
"uri":  "Nancy\\src\\Nancy.Tests\\Unit\\RequestFixture.cs",
"region":  {
"startLine":  398,
"startColumn":  16,
"endLine":  398,
"endColumn":  23
}
}
]
}
],
"shortMessage":  "\"Dispose\" of \"request\".",
"fullMessage":  "You can\u0027t rely on garbage collection to clean up everything. Specifically, you can\u0027t count on it to release non-memory resources such as \"File\"s. For that, there\u0027s the \"IDisposable\" interface, and the contract that \"Dispose\" will always be called on such objects. When an \"IDisposable\" is a class member, then it\u0027s up to that class to call \"Dispose\" on it, ideally in its own \"Dispose\" method. If it\u0027s a local variable, then it should be instantiated with a \"using\" clause to prompt automatic cleanup when it goes out of scope.",
"properties":  {
"severity":  "Warning",
"warningLevel":  "1",
"defaultSeverity":  "Warning",
"title":  "\"IDisposables\" should be disposed",
"category":  "Reliability",
"helpLink":  "http://vs.sonarlint.org/rules/index.html#version=1.7.0\u0026ruleId=S2930",
"isEnabledByDefault":  "True",
"isSuppressedInSource":  "False"
}
},
{
"ruleId":  "S2930",
"locations":  [
{
"analysisTarget":  [
{
"uri":  "Nancy\\src\\Nancy.Tests\\Unit\\RequestFixture.cs",
"region":  {
"startLine":  408,
"startColumn":  16,
"endLine":  408,
"endColumn":  22
}
}
]
}
],
"shortMessage":  "\"Dispose\" of \"memory\".",
"fullMessage":  "You can\u0027t rely on garbage collection to clean up everything. Specifically, you can\u0027t count on it to release non-memory resources such as \"File\"s. For that, there\u0027s the \"IDisposable\" interface, and the contract that \"Dispose\" will always be called on such objects. When an \"IDisposable\" is a class member, then it\u0027s up to that class to call \"Dispose\" on it, ideally in its own \"Dispose\" method. If it\u0027s a local variable, then it should be instantiated with a \"using\" clause to prompt automatic cleanup when it goes out of scope.",
"properties":  {
"severity":  "Warning",
"warningLevel":  "1",
"defaultSeverity":  "Warning",
"title":  "\"IDisposables\" should be disposed",
"category":  "Reliability",
"helpLink":  "http://vs.sonarlint.org/rules/index.html#version=1.7.0\u0026ruleId=S2930",
"isEnabledByDefault":  "True",
"isSuppressedInSource":  "False"
}
},
{
"ruleId":  "S2930",
"locations":  [
{
"analysisTarget":  [
{
"uri":  "Nancy\\src\\Nancy.Tests\\Unit\\RequestFixture.cs",
"region":  {
"startLine":  421,
"startColumn":  16,
"endLine":  421,
"endColumn":  23
}
}
]
}
],
"shortMessage":  "\"Dispose\" of \"request\".",
"fullMessage":  "You can\u0027t rely on garbage collection to clean up everything. Specifically, you can\u0027t count on it to release non-memory resources such as \"File\"s. For that, there\u0027s the \"IDisposable\" interface, and the contract that \"Dispose\" will always be called on such objects. When an \"IDisposable\" is a class member, then it\u0027s up to that class to call \"Dispose\" on it, ideally in its own \"Dispose\" method. If it\u0027s a local variable, then it should be instantiated with a \"using\" clause to prompt automatic cleanup when it goes out of scope.",
"properties":  {
"severity":  "Warning",
"warningLevel":  "1",
"defaultSeverity":  "Warning",
"title":  "\"IDisposables\" should be disposed",
"category":  "Reliability",
"helpLink":  "http://vs.sonarlint.org/rules/index.html#version=1.7.0\u0026ruleId=S2930",
"isEnabledByDefault":  "True",
"isSuppressedInSource":  "False"
}
},
{
"ruleId":  "S2930",
"locations":  [
{
"analysisTarget":  [
{
"uri":  "Nancy\\src\\Nancy.Tests\\Unit\\RequestFixture.cs",
"region":  {
"startLine":  431,
"startColumn":  16,
"endLine":  431,
"endColumn":  22
}
}
]
}
],
"shortMessage":  "\"Dispose\" of \"memory\".",
"fullMessage":  "You can\u0027t rely on garbage collection to clean up everything. Specifically, you can\u0027t count on it to release non-memory resources such as \"File\"s. For that, there\u0027s the \"IDisposable\" interface, and the contract that \"Dispose\" will always be called on such objects. When an \"IDisposable\" is a class member, then it\u0027s up to that class to call \"Dispose\" on it, ideally in its own \"Dispose\" method. If it\u0027s a local variable, then it should be instantiated with a \"using\" clause to prompt automatic cleanup when it goes out of scope.",
"properties":  {
"severity":  "Warning",
"warningLevel":  "1",
"defaultSeverity":  "Warning",
"title":  "\"IDisposables\" should be disposed",
"category":  "Reliability",
"helpLink":  "http://vs.sonarlint.org/rules/index.html#version=1.7.0\u0026ruleId=S2930",
"isEnabledByDefault":  "True",
"isSuppressedInSource":  "False"
}
},
{
"ruleId":  "S2930",
"locations":  [
{
"analysisTarget":  [
{
"uri":  "Nancy\\src\\Nancy.Tests\\Unit\\RequestFixture.cs",
"region":  {
"startLine":  444,
"startColumn":  16,
"endLine":  444,
"endColumn":  23
}
}
]
}
],
"shortMessage":  "\"Dispose\" of \"request\".",
"fullMessage":  "You can\u0027t rely on garbage collection to clean up everything. Specifically, you can\u0027t count on it to release non-memory resources such as \"File\"s. For that, there\u0027s the \"IDisposable\" interface, and the contract that \"Dispose\" will always be called on such objects. When an \"IDisposable\" is a class member, then it\u0027s up to that class to call \"Dispose\" on it, ideally in its own \"Dispose\" method. If it\u0027s a local variable, then it should be instantiated with a \"using\" clause to prompt automatic cleanup when it goes out of scope.",
"properties":  {
"severity":  "Warning",
"warningLevel":  "1",
"defaultSeverity":  "Warning",
"title":  "\"IDisposables\" should be disposed",
"category":  "Reliability",
"helpLink":  "http://vs.sonarlint.org/rules/index.html#version=1.7.0\u0026ruleId=S2930",
"isEnabledByDefault":  "True",
"isSuppressedInSource":  "False"
}
},
{
"ruleId":  "S2930",
"locations":  [
{
"analysisTarget":  [
{
"uri":  "Nancy\\src\\Nancy.Tests\\Unit\\RequestFixture.cs",
"region":  {
"startLine":  454,
"startColumn":  16,
"endLine":  454,
"endColumn":  22
}
}
]
}
],
"shortMessage":  "\"Dispose\" of \"memory\".",
"fullMessage":  "You can\u0027t rely on garbage collection to clean up everything. Specifically, you can\u0027t count on it to release non-memory resources such as \"File\"s. For that, there\u0027s the \"IDisposable\" interface, and the contract that \"Dispose\" will always be called on such objects. When an \"IDisposable\" is a class member, then it\u0027s up to that class to call \"Dispose\" on it, ideally in its own \"Dispose\" method. If it\u0027s a local variable, then it should be instantiated with a \"using\" clause to prompt automatic cleanup when it goes out of scope.",
"properties":  {
"severity":  "Warning",
"warningLevel":  "1",
"defaultSeverity":  "Warning",
"title":  "\"IDisposables\" should be disposed",
"category":  "Reliability",
"helpLink":  "http://vs.sonarlint.org/rules/index.html#version=1.7.0\u0026ruleId=S2930",
"isEnabledByDefault":  "True",
"isSuppressedInSource":  "False"
}
},
{
"ruleId":  "S2930",
"locations":  [
{
"analysisTarget":  [
{
"uri":  "Nancy\\src\\Nancy.Tests\\Unit\\RequestFixture.cs",
"region":  {
"startLine":  467,
"startColumn":  16,
"endLine":  467,
"endColumn":  23
}
}
]
}
],
"shortMessage":  "\"Dispose\" of \"request\".",
"fullMessage":  "You can\u0027t rely on garbage collection to clean up everything. Specifically, you can\u0027t count on it to release non-memory resources such as \"File\"s. For that, there\u0027s the \"IDisposable\" interface, and the contract that \"Dispose\" will always be called on such objects. When an \"IDisposable\" is a class member, then it\u0027s up to that class to call \"Dispose\" on it, ideally in its own \"Dispose\" method. If it\u0027s a local variable, then it should be instantiated with a \"using\" clause to prompt automatic cleanup when it goes out of scope.",
"properties":  {
"severity":  "Warning",
"warningLevel":  "1",
"defaultSeverity":  "Warning",
"title":  "\"IDisposables\" should be disposed",
"category":  "Reliability",
"helpLink":  "http://vs.sonarlint.org/rules/index.html#version=1.7.0\u0026ruleId=S2930",
"isEnabledByDefault":  "True",
"isSuppressedInSource":  "False"
}
},
{
"ruleId":  "S2930",
"locations":  [
{
"analysisTarget":  [
{
"uri":  "Nancy\\src\\Nancy.Tests\\Unit\\RequestFixture.cs",
"region":  {
"startLine":  483,
"startColumn":  16,
"endLine":  483,
"endColumn":  22
}
}
]
}
],
"shortMessage":  "\"Dispose\" of \"memory\".",
"fullMessage":  "You can\u0027t rely on garbage collection to clean up everything. Specifically, you can\u0027t count on it to release non-memory resources such as \"File\"s. For that, there\u0027s the \"IDisposable\" interface, and the contract that \"Dispose\" will always be called on such objects. When an \"IDisposable\" is a class member, then it\u0027s up to that class to call \"Dispose\" on it, ideally in its own \"Dispose\" method. If it\u0027s a local variable, then it should be instantiated with a \"using\" clause to prompt automatic cleanup when it goes out of scope.",
"properties":  {
"severity":  "Warning",
"warningLevel":  "1",
"defaultSeverity":  "Warning",
"title":  "\"IDisposables\" should be disposed",
"category":  "Reliability",
"helpLink":  "http://vs.sonarlint.org/rules/index.html#version=1.7.0\u0026ruleId=S2930",
"isEnabledByDefault":  "True",
"isSuppressedInSource":  "False"
}
},
{
"ruleId":  "S2930",
"locations":  [
{
"analysisTarget":  [
{
"uri":  "Nancy\\src\\Nancy.Tests\\Unit\\RequestFixture.cs",
"region":  {
"startLine":  484,
"startColumn":  16,
"endLine":  484,
"endColumn":  22
}
}
]
}
],
"shortMessage":  "\"Dispose\" of \"writer\".",
"fullMessage":  "You can\u0027t rely on garbage collection to clean up everything. Specifically, you can\u0027t count on it to release non-memory resources such as \"File\"s. For that, there\u0027s the \"IDisposable\" interface, and the contract that \"Dispose\" will always be called on such objects. When an \"IDisposable\" is a class member, then it\u0027s up to that class to call \"Dispose\" on it, ideally in its own \"Dispose\" method. If it\u0027s a local variable, then it should be instantiated with a \"using\" clause to prompt automatic cleanup when it goes out of scope.",
"properties":  {
"severity":  "Warning",
"warningLevel":  "1",
"defaultSeverity":  "Warning",
"title":  "\"IDisposables\" should be disposed",
"category":  "Reliability",
"helpLink":  "http://vs.sonarlint.org/rules/index.html#version=1.7.0\u0026ruleId=S2930",
"isEnabledByDefault":  "True",
"isSuppressedInSource":  "False"
}
},
{
"ruleId":  "S2930",
"locations":  [
{
"analysisTarget":  [
{
"uri":  "Nancy\\src\\Nancy.Tests\\Unit\\RequestFixture.cs",
"region":  {
"startLine":  496,
"startColumn":  16,
"endLine":  496,
"endColumn":  23
}
}
]
}
],
"shortMessage":  "\"Dispose\" of \"request\".",
"fullMessage":  "You can\u0027t rely on garbage collection to clean up everything. Specifically, you can\u0027t count on it to release non-memory resources such as \"File\"s. For that, there\u0027s the \"IDisposable\" interface, and the contract that \"Dispose\" will always be called on such objects. When an \"IDisposable\" is a class member, then it\u0027s up to that class to call \"Dispose\" on it, ideally in its own \"Dispose\" method. If it\u0027s a local variable, then it should be instantiated with a \"using\" clause to prompt automatic cleanup when it goes out of scope.",
"properties":  {
"severity":  "Warning",
"warningLevel":  "1",
"defaultSeverity":  "Warning",
"title":  "\"IDisposables\" should be disposed",
"category":  "Reliability",
"helpLink":  "http://vs.sonarlint.org/rules/index.html#version=1.7.0\u0026ruleId=S2930",
"isEnabledByDefault":  "True",
"isSuppressedInSource":  "False"
}
},
{
"ruleId":  "S2930",
"locations":  [
{
"analysisTarget":  [
{
"uri":  "Nancy\\src\\Nancy.Tests\\Unit\\RequestFixture.cs",
"region":  {
"startLine":  531,
"startColumn":  16,
"endLine":  531,
"endColumn":  23
}
}
]
}
],
"shortMessage":  "\"Dispose\" of \"request\".",
"fullMessage":  "You can\u0027t rely on garbage collection to clean up everything. Specifically, you can\u0027t count on it to release non-memory resources such as \"File\"s. For that, there\u0027s the \"IDisposable\" interface, and the contract that \"Dispose\" will always be called on such objects. When an \"IDisposable\" is a class member, then it\u0027s up to that class to call \"Dispose\" on it, ideally in its own \"Dispose\" method. If it\u0027s a local variable, then it should be instantiated with a \"using\" clause to prompt automatic cleanup when it goes out of scope.",
"properties":  {
"severity":  "Warning",
"warningLevel":  "1",
"defaultSeverity":  "Warning",
"title":  "\"IDisposables\" should be disposed",
"category":  "Reliability",
"helpLink":  "http://vs.sonarlint.org/rules/index.html#version=1.7.0\u0026ruleId=S2930",
"isEnabledByDefault":  "True",
"isSuppressedInSource":  "False"
}
},
{
"ruleId":  "S2930",
"locations":  [
{
"analysisTarget":  [
{
"uri":  "Nancy\\src\\Nancy.Tests\\Unit\\RequestFixture.cs",
"region":  {
"startLine":  551,
"startColumn":  16,
"endLine":  551,
"endColumn":  23
}
}
]
}
],
"shortMessage":  "\"Dispose\" of \"request\".",
"fullMessage":  "You can\u0027t rely on garbage collection to clean up everything. Specifically, you can\u0027t count on it to release non-memory resources such as \"File\"s. For that, there\u0027s the \"IDisposable\" interface, and the contract that \"Dispose\" will always be called on such objects. When an \"IDisposable\" is a class member, then it\u0027s up to that class to call \"Dispose\" on it, ideally in its own \"Dispose\" method. If it\u0027s a local variable, then it should be instantiated with a \"using\" clause to prompt automatic cleanup when it goes out of scope.",
"properties":  {
"severity":  "Warning",
"warningLevel":  "1",
"defaultSeverity":  "Warning",
"title":  "\"IDisposables\" should be disposed",
"category":  "Reliability",
"helpLink":  "http://vs.sonarlint.org/rules/index.html#version=1.7.0\u0026ruleId=S2930",
"isEnabledByDefault":  "True",
"isSuppressedInSource":  "False"
}
},
{
"ruleId":  "S2930",
"locations":  [
{
"analysisTarget":  [
{
"uri":  "Nancy\\src\\Nancy.Tests\\Unit\\RequestFixture.cs",
"region":  {
"startLine":  570,
"startColumn":  16,
"endLine":  570,
"endColumn":  23
}
}
]
}
],
"shortMessage":  "\"Dispose\" of \"request\".",
"fullMessage":  "You can\u0027t rely on garbage collection to clean up everything. Specifically, you can\u0027t count on it to release non-memory resources such as \"File\"s. For that, there\u0027s the \"IDisposable\" interface, and the contract that \"Dispose\" will always be called on such objects. When an \"IDisposable\" is a class member, then it\u0027s up to that class to call \"Dispose\" on it, ideally in its own \"Dispose\" method. If it\u0027s a local variable, then it should be instantiated with a \"using\" clause to prompt automatic cleanup when it goes out of scope.",
"properties":  {
"severity":  "Warning",
"warningLevel":  "1",
"defaultSeverity":  "Warning",
"title":  "\"IDisposables\" should be disposed",
"category":  "Reliability",
"helpLink":  "http://vs.sonarlint.org/rules/index.html#version=1.7.0\u0026ruleId=S2930",
"isEnabledByDefault":  "True",
"isSuppressedInSource":  "False"
}
},
{
"ruleId":  "S2930",
"locations":  [
{
"analysisTarget":  [
{
"uri":  "Nancy\\src\\Nancy.Tests\\Unit\\RequestFixture.cs",
"region":  {
"startLine":  589,
"startColumn":  16,
"endLine":  589,
"endColumn":  23
}
}
]
}
],
"shortMessage":  "\"Dispose\" of \"request\".",
"fullMessage":  "You can\u0027t rely on garbage collection to clean up everything. Specifically, you can\u0027t count on it to release non-memory resources such as \"File\"s. For that, there\u0027s the \"IDisposable\" interface, and the contract that \"Dispose\" will always be called on such objects. When an \"IDisposable\" is a class member, then it\u0027s up to that class to call \"Dispose\" on it, ideally in its own \"Dispose\" method. If it\u0027s a local variable, then it should be instantiated with a \"using\" clause to prompt automatic cleanup when it goes out of scope.",
"properties":  {
"severity":  "Warning",
"warningLevel":  "1",
"defaultSeverity":  "Warning",
"title":  "\"IDisposables\" should be disposed",
"category":  "Reliability",
"helpLink":  "http://vs.sonarlint.org/rules/index.html#version=1.7.0\u0026ruleId=S2930",
"isEnabledByDefault":  "True",
"isSuppressedInSource":  "False"
}
},
{
"ruleId":  "S2930",
"locations":  [
{
"analysisTarget":  [
{
"uri":  "Nancy\\src\\Nancy.Tests\\Unit\\RequestFixture.cs",
"region":  {
"startLine":  608,
"startColumn":  16,
"endLine":  608,
"endColumn":  23
}
}
]
}
],
"shortMessage":  "\"Dispose\" of \"request\".",
"fullMessage":  "You can\u0027t rely on garbage collection to clean up everything. Specifically, you can\u0027t count on it to release non-memory resources such as \"File\"s. For that, there\u0027s the \"IDisposable\" interface, and the contract that \"Dispose\" will always be called on such objects. When an \"IDisposable\" is a class member, then it\u0027s up to that class to call \"Dispose\" on it, ideally in its own \"Dispose\" method. If it\u0027s a local variable, then it should be instantiated with a \"using\" clause to prompt automatic cleanup when it goes out of scope.",
"properties":  {
"severity":  "Warning",
"warningLevel":  "1",
"defaultSeverity":  "Warning",
"title":  "\"IDisposables\" should be disposed",
"category":  "Reliability",
"helpLink":  "http://vs.sonarlint.org/rules/index.html#version=1.7.0\u0026ruleId=S2930",
"isEnabledByDefault":  "True",
"isSuppressedInSource":  "False"
}
},
{
"ruleId":  "S2930",
"locations":  [
{
"analysisTarget":  [
{
"uri":  "Nancy\\src\\Nancy.Tests\\Unit\\RequestFixture.cs",
"region":  {
"startLine":  627,
"startColumn":  16,
"endLine":  627,
"endColumn":  23
}
}
]
}
],
"shortMessage":  "\"Dispose\" of \"request\".",
"fullMessage":  "You can\u0027t rely on garbage collection to clean up everything. Specifically, you can\u0027t count on it to release non-memory resources such as \"File\"s. For that, there\u0027s the \"IDisposable\" interface, and the contract that \"Dispose\" will always be called on such objects. When an \"IDisposable\" is a class member, then it\u0027s up to that class to call \"Dispose\" on it, ideally in its own \"Dispose\" method. If it\u0027s a local variable, then it should be instantiated with a \"using\" clause to prompt automatic cleanup when it goes out of scope.",
"properties":  {
"severity":  "Warning",
"warningLevel":  "1",
"defaultSeverity":  "Warning",
"title":  "\"IDisposables\" should be disposed",
"category":  "Reliability",
"helpLink":  "http://vs.sonarlint.org/rules/index.html#version=1.7.0\u0026ruleId=S2930",
"isEnabledByDefault":  "True",
"isSuppressedInSource":  "False"
}
},
{
"ruleId":  "S2930",
"locations":  [
{
"analysisTarget":  [
{
"uri":  "Nancy\\src\\Nancy.Tests\\Unit\\RequestFixture.cs",
"region":  {
"startLine":  647,
"startColumn":  14,
"endLine":  647,
"endColumn":  21
}
}
]
}
],
"shortMessage":  "\"Dispose\" of \"request\".",
"fullMessage":  "You can\u0027t rely on garbage collection to clean up everything. Specifically, you can\u0027t count on it to release non-memory resources such as \"File\"s. For that, there\u0027s the \"IDisposable\" interface, and the contract that \"Dispose\" will always be called on such objects. When an \"IDisposable\" is a class member, then it\u0027s up to that class to call \"Dispose\" on it, ideally in its own \"Dispose\" method. If it\u0027s a local variable, then it should be instantiated with a \"using\" clause to prompt automatic cleanup when it goes out of scope.",
"properties":  {
"severity":  "Warning",
"warningLevel":  "1",
"defaultSeverity":  "Warning",
"title":  "\"IDisposables\" should be disposed",
"category":  "Reliability",
"helpLink":  "http://vs.sonarlint.org/rules/index.html#version=1.7.0\u0026ruleId=S2930",
"isEnabledByDefault":  "True",
"isSuppressedInSource":  "False"
}
},
{
"ruleId":  "S2930",
"locations":  [
{
"analysisTarget":  [
{
"uri":  "Nancy\\src\\Nancy.Tests\\Unit\\RequestFixture.cs",
"region":  {
"startLine":  660,
"startColumn":  16,
"endLine":  660,
"endColumn":  22
}
}
]
}
],
"shortMessage":  "\"Dispose\" of \"writer\".",
"fullMessage":  "You can\u0027t rely on garbage collection to clean up everything. Specifically, you can\u0027t count on it to release non-memory resources such as \"File\"s. For that, there\u0027s the \"IDisposable\" interface, and the contract that \"Dispose\" will always be called on such objects. When an \"IDisposable\" is a class member, then it\u0027s up to that class to call \"Dispose\" on it, ideally in its own \"Dispose\" method. If it\u0027s a local variable, then it should be instantiated with a \"using\" clause to prompt automatic cleanup when it goes out of scope.",
"properties":  {
"severity":  "Warning",
"warningLevel":  "1",
"defaultSeverity":  "Warning",
"title":  "\"IDisposables\" should be disposed",
"category":  "Reliability",
"helpLink":  "http://vs.sonarlint.org/rules/index.html#version=1.7.0\u0026ruleId=S2930",
"isEnabledByDefault":  "True",
"isSuppressedInSource":  "False"
}
},
{
"ruleId":  "S2930",
"locations":  [
{
"analysisTarget":  [
{
"uri":  "Nancy\\src\\Nancy.Tests\\Unit\\RequestFixture.cs",
"region":  {
"startLine":  672,
"startColumn":  16,
"endLine":  672,
"endColumn":  23
}
}
]
}
],
"shortMessage":  "\"Dispose\" of \"request\".",
"fullMessage":  "You can\u0027t rely on garbage collection to clean up everything. Specifically, you can\u0027t count on it to release non-memory resources such as \"File\"s. For that, there\u0027s the \"IDisposable\" interface, and the contract that \"Dispose\" will always be called on such objects. When an \"IDisposable\" is a class member, then it\u0027s up to that class to call \"Dispose\" on it, ideally in its own \"Dispose\" method. If it\u0027s a local variable, then it should be instantiated with a \"using\" clause to prompt automatic cleanup when it goes out of scope.",
"properties":  {
"severity":  "Warning",
"warningLevel":  "1",
"defaultSeverity":  "Warning",
"title":  "\"IDisposables\" should be disposed",
"category":  "Reliability",
"helpLink":  "http://vs.sonarlint.org/rules/index.html#version=1.7.0\u0026ruleId=S2930",
"isEnabledByDefault":  "True",
"isSuppressedInSource":  "False"
}
},
{
"ruleId":  "S2930",
"locations":  [
{
"analysisTarget":  [
{
"uri":  "Nancy\\src\\Nancy.Tests\\Unit\\RequestFixture.cs",
"region":  {
"startLine":  682,
"startColumn":  16,
"endLine":  682,
"endColumn":  22
}
}
]
}
],
"shortMessage":  "\"Dispose\" of \"memory\".",
"fullMessage":  "You can\u0027t rely on garbage collection to clean up everything. Specifically, you can\u0027t count on it to release non-memory resources such as \"File\"s. For that, there\u0027s the \"IDisposable\" interface, and the contract that \"Dispose\" will always be called on such objects. When an \"IDisposable\" is a class member, then it\u0027s up to that class to call \"Dispose\" on it, ideally in its own \"Dispose\" method. If it\u0027s a local variable, then it should be instantiated with a \"using\" clause to prompt automatic cleanup when it goes out of scope.",
"properties":  {
"severity":  "Warning",
"warningLevel":  "1",
"defaultSeverity":  "Warning",
"title":  "\"IDisposables\" should be disposed",
"category":  "Reliability",
"helpLink":  "http://vs.sonarlint.org/rules/index.html#version=1.7.0\u0026ruleId=S2930",
"isEnabledByDefault":  "True",
"isSuppressedInSource":  "False"
}
},
{
"ruleId":  "S2930",
"locations":  [
{
"analysisTarget":  [
{
"uri":  "Nancy\\src\\Nancy.Tests\\Unit\\RequestFixture.cs",
"region":  {
"startLine":  695,
"startColumn":  16,
"endLine":  695,
"endColumn":  23
}
}
]
}
],
"shortMessage":  "\"Dispose\" of \"request\".",
"fullMessage":  "You can\u0027t rely on garbage collection to clean up everything. Specifically, you can\u0027t count on it to release non-memory resources such as \"File\"s. For that, there\u0027s the \"IDisposable\" interface, and the contract that \"Dispose\" will always be called on such objects. When an \"IDisposable\" is a class member, then it\u0027s up to that class to call \"Dispose\" on it, ideally in its own \"Dispose\" method. If it\u0027s a local variable, then it should be instantiated with a \"using\" clause to prompt automatic cleanup when it goes out of scope.",
"properties":  {
"severity":  "Warning",
"warningLevel":  "1",
"defaultSeverity":  "Warning",
"title":  "\"IDisposables\" should be disposed",
"category":  "Reliability",
"helpLink":  "http://vs.sonarlint.org/rules/index.html#version=1.7.0\u0026ruleId=S2930",
"isEnabledByDefault":  "True",
"isSuppressedInSource":  "False"
}
},
{
"ruleId":  "S2930",
"locations":  [
{
"analysisTarget":  [
{
"uri":  "Nancy\\src\\Nancy.Tests\\Unit\\RequestFixture.cs",
"region":  {
"startLine":  705,
"startColumn":  16,
"endLine":  705,
"endColumn":  22
}
}
]
}
],
"shortMessage":  "\"Dispose\" of \"memory\".",
"fullMessage":  "You can\u0027t rely on garbage collection to clean up everything. Specifically, you can\u0027t count on it to release non-memory resources such as \"File\"s. For that, there\u0027s the \"IDisposable\" interface, and the contract that \"Dispose\" will always be called on such objects. When an \"IDisposable\" is a class member, then it\u0027s up to that class to call \"Dispose\" on it, ideally in its own \"Dispose\" method. If it\u0027s a local variable, then it should be instantiated with a \"using\" clause to prompt automatic cleanup when it goes out of scope.",
"properties":  {
"severity":  "Warning",
"warningLevel":  "1",
"defaultSeverity":  "Warning",
"title":  "\"IDisposables\" should be disposed",
"category":  "Reliability",
"helpLink":  "http://vs.sonarlint.org/rules/index.html#version=1.7.0\u0026ruleId=S2930",
"isEnabledByDefault":  "True",
"isSuppressedInSource":  "False"
}
},
{
"ruleId":  "S2930",
"locations":  [
{
"analysisTarget":  [
{
"uri":  "Nancy\\src\\Nancy.Tests\\Unit\\RequestFixture.cs",
"region":  {
"startLine":  719,
"startColumn":  16,
"endLine":  719,
"endColumn":  23
}
}
]
}
],
"shortMessage":  "\"Dispose\" of \"request\".",
"fullMessage":  "You can\u0027t rely on garbage collection to clean up everything. Specifically, you can\u0027t count on it to release non-memory resources such as \"File\"s. For that, there\u0027s the \"IDisposable\" interface, and the contract that \"Dispose\" will always be called on such objects. When an \"IDisposable\" is a class member, then it\u0027s up to that class to call \"Dispose\" on it, ideally in its own \"Dispose\" method. If it\u0027s a local variable, then it should be instantiated with a \"using\" clause to prompt automatic cleanup when it goes out of scope.",
"properties":  {
"severity":  "Warning",
"warningLevel":  "1",
"defaultSeverity":  "Warning",
"title":  "\"IDisposables\" should be disposed",
"category":  "Reliability",
"helpLink":  "http://vs.sonarlint.org/rules/index.html#version=1.7.0\u0026ruleId=S2930",
"isEnabledByDefault":  "True",
"isSuppressedInSource":  "False"
}
},
{
"ruleId":  "S2930",
"locations":  [
{
"analysisTarget":  [
{
"uri":  "Nancy\\src\\Nancy.Tests\\Unit\\RequestFixture.cs",
"region":  {
"startLine":  740,
"startColumn":  16,
"endLine":  740,
"endColumn":  22
}
}
]
}
],
"shortMessage":  "\"Dispose\" of \"writer\".",
"fullMessage":  "You can\u0027t rely on garbage collection to clean up everything. Specifically, you can\u0027t count on it to release non-memory resources such as \"File\"s. For that, there\u0027s the \"IDisposable\" interface, and the contract that \"Dispose\" will always be called on such objects. When an \"IDisposable\" is a class member, then it\u0027s up to that class to call \"Dispose\" on it, ideally in its own \"Dispose\" method. If it\u0027s a local variable, then it should be instantiated with a \"using\" clause to prompt automatic cleanup when it goes out of scope.",
"properties":  {
"severity":  "Warning",
"warningLevel":  "1",
"defaultSeverity":  "Warning",
"title":  "\"IDisposables\" should be disposed",
"category":  "Reliability",
"helpLink":  "http://vs.sonarlint.org/rules/index.html#version=1.7.0\u0026ruleId=S2930",
"isEnabledByDefault":  "True",
"isSuppressedInSource":  "False"
}
},
{
"ruleId":  "S2930",
"locations":  [
{
"analysisTarget":  [
{
"uri":  "Nancy\\src\\Nancy.Tests\\Unit\\RequestFixture.cs",
"region":  {
"startLine":  752,
"startColumn":  16,
"endLine":  752,
"endColumn":  23
}
}
]
}
],
"shortMessage":  "\"Dispose\" of \"request\".",
"fullMessage":  "You can\u0027t rely on garbage collection to clean up everything. Specifically, you can\u0027t count on it to release non-memory resources such as \"File\"s. For that, there\u0027s the \"IDisposable\" interface, and the contract that \"Dispose\" will always be called on such objects. When an \"IDisposable\" is a class member, then it\u0027s up to that class to call \"Dispose\" on it, ideally in its own \"Dispose\" method. If it\u0027s a local variable, then it should be instantiated with a \"using\" clause to prompt automatic cleanup when it goes out of scope.",
"properties":  {
"severity":  "Warning",
"warningLevel":  "1",
"defaultSeverity":  "Warning",
"title":  "\"IDisposables\" should be disposed",
"category":  "Reliability",
"helpLink":  "http://vs.sonarlint.org/rules/index.html#version=1.7.0\u0026ruleId=S2930",
"isEnabledByDefault":  "True",
"isSuppressedInSource":  "False"
}
},
{
"ruleId":  "S2930",
"locations":  [
{
"analysisTarget":  [
{
"uri":  "Nancy\\src\\Nancy.Tests\\Unit\\RequestFixture.cs",
"region":  {
"startLine":  775,
"startColumn":  16,
"endLine":  775,
"endColumn":  23
}
}
]
}
],
"shortMessage":  "\"Dispose\" of \"request\".",
"fullMessage":  "You can\u0027t rely on garbage collection to clean up everything. Specifically, you can\u0027t count on it to release non-memory resources such as \"File\"s. For that, there\u0027s the \"IDisposable\" interface, and the contract that \"Dispose\" will always be called on such objects. When an \"IDisposable\" is a class member, then it\u0027s up to that class to call \"Dispose\" on it, ideally in its own \"Dispose\" method. If it\u0027s a local variable, then it should be instantiated with a \"using\" clause to prompt automatic cleanup when it goes out of scope.",
"properties":  {
"severity":  "Warning",
"warningLevel":  "1",
"defaultSeverity":  "Warning",
"title":  "\"IDisposables\" should be disposed",
"category":  "Reliability",
"helpLink":  "http://vs.sonarlint.org/rules/index.html#version=1.7.0\u0026ruleId=S2930",
"isEnabledByDefault":  "True",
"isSuppressedInSource":  "False"
}
},
{
"ruleId":  "S2930",
"locations":  [
{
"analysisTarget":  [
{
"uri":  "Nancy\\src\\Nancy.Tests\\Unit\\RequestFixture.cs",
"region":  {
"startLine":  784,
"startColumn":  16,
"endLine":  784,
"endColumn":  23
}
}
]
}
],
"shortMessage":  "\"Dispose\" of \"request\".",
"fullMessage":  "You can\u0027t rely on garbage collection to clean up everything. Specifically, you can\u0027t count on it to release non-memory resources such as \"File\"s. For that, there\u0027s the \"IDisposable\" interface, and the contract that \"Dispose\" will always be called on such objects. When an \"IDisposable\" is a class member, then it\u0027s up to that class to call \"Dispose\" on it, ideally in its own \"Dispose\" method. If it\u0027s a local variable, then it should be instantiated with a \"using\" clause to prompt automatic cleanup when it goes out of scope.",
"properties":  {
"severity":  "Warning",
"warningLevel":  "1",
"defaultSeverity":  "Warning",
"title":  "\"IDisposables\" should be disposed",
"category":  "Reliability",
"helpLink":  "http://vs.sonarlint.org/rules/index.html#version=1.7.0\u0026ruleId=S2930",
"isEnabledByDefault":  "True",
"isSuppressedInSource":  "False"
}
},
{
"ruleId":  "S2930",
"locations":  [
{
"analysisTarget":  [
{
"uri":  "Nancy\\src\\Nancy.Tests\\Unit\\RequestFixture.cs",
"region":  {
"startLine":  796,
"startColumn":  16,
"endLine":  796,
"endColumn":  23
}
}
]
}
],
"shortMessage":  "\"Dispose\" of \"request\".",
"fullMessage":  "You can\u0027t rely on garbage collection to clean up everything. Specifically, you can\u0027t count on it to release non-memory resources such as \"File\"s. For that, there\u0027s the \"IDisposable\" interface, and the contract that \"Dispose\" will always be called on such objects. When an \"IDisposable\" is a class member, then it\u0027s up to that class to call \"Dispose\" on it, ideally in its own \"Dispose\" method. If it\u0027s a local variable, then it should be instantiated with a \"using\" clause to prompt automatic cleanup when it goes out of scope.",
"properties":  {
"severity":  "Warning",
"warningLevel":  "1",
"defaultSeverity":  "Warning",
"title":  "\"IDisposables\" should be disposed",
"category":  "Reliability",
"helpLink":  "http://vs.sonarlint.org/rules/index.html#version=1.7.0\u0026ruleId=S2930",
"isEnabledByDefault":  "True",
"isSuppressedInSource":  "False"
}
},
{
"ruleId":  "S2930",
"locations":  [
{
"analysisTarget":  [
{
"uri":  "Nancy\\src\\Nancy.Tests\\Unit\\RequestFixture.cs",
"region":  {
"startLine":  810,
"startColumn":  16,
"endLine":  810,
"endColumn":  23
}
}
]
}
],
"shortMessage":  "\"Dispose\" of \"request\".",
"fullMessage":  "You can\u0027t rely on garbage collection to clean up everything. Specifically, you can\u0027t count on it to release non-memory resources such as \"File\"s. For that, there\u0027s the \"IDisposable\" interface, and the contract that \"Dispose\" will always be called on such objects. When an \"IDisposable\" is a class member, then it\u0027s up to that class to call \"Dispose\" on it, ideally in its own \"Dispose\" method. If it\u0027s a local variable, then it should be instantiated with a \"using\" clause to prompt automatic cleanup when it goes out of scope.",
"properties":  {
"severity":  "Warning",
"warningLevel":  "1",
"defaultSeverity":  "Warning",
"title":  "\"IDisposables\" should be disposed",
"category":  "Reliability",
"helpLink":  "http://vs.sonarlint.org/rules/index.html#version=1.7.0\u0026ruleId=S2930",
"isEnabledByDefault":  "True",
"isSuppressedInSource":  "False"
}
},
{
"ruleId":  "S2930",
"locations":  [
{
"analysisTarget":  [
{
"uri":  "Nancy\\src\\Nancy.Tests\\Unit\\ResponseExtensionsFixture.cs",
"region":  {
"startLine":  15,
"startColumn":  16,
"endLine":  15,
"endColumn":  24
}
}
]
}
],
"shortMessage":  "\"Dispose\" of \"response\".",
"fullMessage":  "You can\u0027t rely on garbage collection to clean up everything. Specifically, you can\u0027t count on it to release non-memory resources such as \"File\"s. For that, there\u0027s the \"IDisposable\" interface, and the contract that \"Dispose\" will always be called on such objects. When an \"IDisposable\" is a class member, then it\u0027s up to that class to call \"Dispose\" on it, ideally in its own \"Dispose\" method. If it\u0027s a local variable, then it should be instantiated with a \"using\" clause to prompt automatic cleanup when it goes out of scope.",
"properties":  {
"severity":  "Warning",
"warningLevel":  "1",
"defaultSeverity":  "Warning",
"title":  "\"IDisposables\" should be disposed",
"category":  "Reliability",
"helpLink":  "http://vs.sonarlint.org/rules/index.html#version=1.7.0\u0026ruleId=S2930",
"isEnabledByDefault":  "True",
"isSuppressedInSource":  "False"
}
},
{
"ruleId":  "S2930",
"locations":  [
{
"analysisTarget":  [
{
"uri":  "Nancy\\src\\Nancy.Tests\\Unit\\ResponseExtensionsFixture.cs",
"region":  {
"startLine":  26,
"startColumn":  16,
"endLine":  26,
"endColumn":  24
}
}
]
}
],
"shortMessage":  "\"Dispose\" of \"response\".",
"fullMessage":  "You can\u0027t rely on garbage collection to clean up everything. Specifically, you can\u0027t count on it to release non-memory resources such as \"File\"s. For that, there\u0027s the \"IDisposable\" interface, and the contract that \"Dispose\" will always be called on such objects. When an \"IDisposable\" is a class member, then it\u0027s up to that class to call \"Dispose\" on it, ideally in its own \"Dispose\" method. If it\u0027s a local variable, then it should be instantiated with a \"using\" clause to prompt automatic cleanup when it goes out of scope.",
"properties":  {
"severity":  "Warning",
"warningLevel":  "1",
"defaultSeverity":  "Warning",
"title":  "\"IDisposables\" should be disposed",
"category":  "Reliability",
"helpLink":  "http://vs.sonarlint.org/rules/index.html#version=1.7.0\u0026ruleId=S2930",
"isEnabledByDefault":  "True",
"isSuppressedInSource":  "False"
}
},
{
"ruleId":  "S2930",
"locations":  [
{
"analysisTarget":  [
{
"uri":  "Nancy\\src\\Nancy.Tests\\Unit\\ResponseExtensionsFixture.cs",
"region":  {
"startLine":  36,
"startColumn":  16,
"endLine":  36,
"endColumn":  24
}
}
]
}
],
"shortMessage":  "\"Dispose\" of \"response\".",
"fullMessage":  "You can\u0027t rely on garbage collection to clean up everything. Specifically, you can\u0027t count on it to release non-memory resources such as \"File\"s. For that, there\u0027s the \"IDisposable\" interface, and the contract that \"Dispose\" will always be called on such objects. When an \"IDisposable\" is a class member, then it\u0027s up to that class to call \"Dispose\" on it, ideally in its own \"Dispose\" method. If it\u0027s a local variable, then it should be instantiated with a \"using\" clause to prompt automatic cleanup when it goes out of scope.",
"properties":  {
"severity":  "Warning",
"warningLevel":  "1",
"defaultSeverity":  "Warning",
"title":  "\"IDisposables\" should be disposed",
"category":  "Reliability",
"helpLink":  "http://vs.sonarlint.org/rules/index.html#version=1.7.0\u0026ruleId=S2930",
"isEnabledByDefault":  "True",
"isSuppressedInSource":  "False"
}
},
{
"ruleId":  "S2930",
"locations":  [
{
"analysisTarget":  [
{
"uri":  "Nancy\\src\\Nancy.Tests\\Unit\\ResponseExtensionsFixture.cs",
"region":  {
"startLine":  53,
"startColumn":  16,
"endLine":  53,
"endColumn":  24
}
}
]
}
],
"shortMessage":  "\"Dispose\" of \"response\".",
"fullMessage":  "You can\u0027t rely on garbage collection to clean up everything. Specifically, you can\u0027t count on it to release non-memory resources such as \"File\"s. For that, there\u0027s the \"IDisposable\" interface, and the contract that \"Dispose\" will always be called on such objects. When an \"IDisposable\" is a class member, then it\u0027s up to that class to call \"Dispose\" on it, ideally in its own \"Dispose\" method. If it\u0027s a local variable, then it should be instantiated with a \"using\" clause to prompt automatic cleanup when it goes out of scope.",
"properties":  {
"severity":  "Warning",
"warningLevel":  "1",
"defaultSeverity":  "Warning",
"title":  "\"IDisposables\" should be disposed",
"category":  "Reliability",
"helpLink":  "http://vs.sonarlint.org/rules/index.html#version=1.7.0\u0026ruleId=S2930",
"isEnabledByDefault":  "True",
"isSuppressedInSource":  "False"
}
},
{
"ruleId":  "S2930",
"locations":  [
{
"analysisTarget":  [
{
"uri":  "Nancy\\src\\Nancy.Tests\\Unit\\ResponseExtensionsFixture.cs",
"region":  {
"startLine":  66,
"startColumn":  16,
"endLine":  66,
"endColumn":  24
}
}
]
}
],
"shortMessage":  "\"Dispose\" of \"response\".",
"fullMessage":  "You can\u0027t rely on garbage collection to clean up everything. Specifically, you can\u0027t count on it to release non-memory resources such as \"File\"s. For that, there\u0027s the \"IDisposable\" interface, and the contract that \"Dispose\" will always be called on such objects. When an \"IDisposable\" is a class member, then it\u0027s up to that class to call \"Dispose\" on it, ideally in its own \"Dispose\" method. If it\u0027s a local variable, then it should be instantiated with a \"using\" clause to prompt automatic cleanup when it goes out of scope.",
"properties":  {
"severity":  "Warning",
"warningLevel":  "1",
"defaultSeverity":  "Warning",
"title":  "\"IDisposables\" should be disposed",
"category":  "Reliability",
"helpLink":  "http://vs.sonarlint.org/rules/index.html#version=1.7.0\u0026ruleId=S2930",
"isEnabledByDefault":  "True",
"isSuppressedInSource":  "False"
}
},
{
"ruleId":  "S2930",
"locations":  [
{
"analysisTarget":  [
{
"uri":  "Nancy\\src\\Nancy.Tests\\Unit\\ResponseExtensionsFixture.cs",
"region":  {
"startLine":  77,
"startColumn":  16,
"endLine":  77,
"endColumn":  24
}
}
]
}
],
"shortMessage":  "\"Dispose\" of \"response\".",
"fullMessage":  "You can\u0027t rely on garbage collection to clean up everything. Specifically, you can\u0027t count on it to release non-memory resources such as \"File\"s. For that, there\u0027s the \"IDisposable\" interface, and the contract that \"Dispose\" will always be called on such objects. When an \"IDisposable\" is a class member, then it\u0027s up to that class to call \"Dispose\" on it, ideally in its own \"Dispose\" method. If it\u0027s a local variable, then it should be instantiated with a \"using\" clause to prompt automatic cleanup when it goes out of scope.",
"properties":  {
"severity":  "Warning",
"warningLevel":  "1",
"defaultSeverity":  "Warning",
"title":  "\"IDisposables\" should be disposed",
"category":  "Reliability",
"helpLink":  "http://vs.sonarlint.org/rules/index.html#version=1.7.0\u0026ruleId=S2930",
"isEnabledByDefault":  "True",
"isSuppressedInSource":  "False"
}
},
{
"ruleId":  "S2930",
"locations":  [
{
"analysisTarget":  [
{
"uri":  "Nancy\\src\\Nancy.Tests\\Unit\\ResponseExtensionsFixture.cs",
"region":  {
"startLine":  88,
"startColumn":  16,
"endLine":  88,
"endColumn":  24
}
}
]
}
],
"shortMessage":  "\"Dispose\" of \"response\".",
"fullMessage":  "You can\u0027t rely on garbage collection to clean up everything. Specifically, you can\u0027t count on it to release non-memory resources such as \"File\"s. For that, there\u0027s the \"IDisposable\" interface, and the contract that \"Dispose\" will always be called on such objects. When an \"IDisposable\" is a class member, then it\u0027s up to that class to call \"Dispose\" on it, ideally in its own \"Dispose\" method. If it\u0027s a local variable, then it should be instantiated with a \"using\" clause to prompt automatic cleanup when it goes out of scope.",
"properties":  {
"severity":  "Warning",
"warningLevel":  "1",
"defaultSeverity":  "Warning",
"title":  "\"IDisposables\" should be disposed",
"category":  "Reliability",
"helpLink":  "http://vs.sonarlint.org/rules/index.html#version=1.7.0\u0026ruleId=S2930",
"isEnabledByDefault":  "True",
"isSuppressedInSource":  "False"
}
},
{
"ruleId":  "S2930",
"locations":  [
{
"analysisTarget":  [
{
"uri":  "Nancy\\src\\Nancy.Tests\\Unit\\ResponseExtensionsFixture.cs",
"region":  {
"startLine":  100,
"startColumn":  16,
"endLine":  100,
"endColumn":  24
}
}
]
}
],
"shortMessage":  "\"Dispose\" of \"response\".",
"fullMessage":  "You can\u0027t rely on garbage collection to clean up everything. Specifically, you can\u0027t count on it to release non-memory resources such as \"File\"s. For that, there\u0027s the \"IDisposable\" interface, and the contract that \"Dispose\" will always be called on such objects. When an \"IDisposable\" is a class member, then it\u0027s up to that class to call \"Dispose\" on it, ideally in its own \"Dispose\" method. If it\u0027s a local variable, then it should be instantiated with a \"using\" clause to prompt automatic cleanup when it goes out of scope.",
"properties":  {
"severity":  "Warning",
"warningLevel":  "1",
"defaultSeverity":  "Warning",
"title":  "\"IDisposables\" should be disposed",
"category":  "Reliability",
"helpLink":  "http://vs.sonarlint.org/rules/index.html#version=1.7.0\u0026ruleId=S2930",
"isEnabledByDefault":  "True",
"isSuppressedInSource":  "False"
}
},
{
"ruleId":  "S2930",
"locations":  [
{
"analysisTarget":  [
{
"uri":  "Nancy\\src\\Nancy.Tests\\Unit\\ResponseExtensionsFixture.cs",
"region":  {
"startLine":  113,
"startColumn":  16,
"endLine":  113,
"endColumn":  24
}
}
]
}
],
"shortMessage":  "\"Dispose\" of \"response\".",
"fullMessage":  "You can\u0027t rely on garbage collection to clean up everything. Specifically, you can\u0027t count on it to release non-memory resources such as \"File\"s. For that, there\u0027s the \"IDisposable\" interface, and the contract that \"Dispose\" will always be called on such objects. When an \"IDisposable\" is a class member, then it\u0027s up to that class to call \"Dispose\" on it, ideally in its own \"Dispose\" method. If it\u0027s a local variable, then it should be instantiated with a \"using\" clause to prompt automatic cleanup when it goes out of scope.",
"properties":  {
"severity":  "Warning",
"warningLevel":  "1",
"defaultSeverity":  "Warning",
"title":  "\"IDisposables\" should be disposed",
"category":  "Reliability",
"helpLink":  "http://vs.sonarlint.org/rules/index.html#version=1.7.0\u0026ruleId=S2930",
"isEnabledByDefault":  "True",
"isSuppressedInSource":  "False"
}
},
{
"ruleId":  "S2930",
"locations":  [
{
"analysisTarget":  [
{
"uri":  "Nancy\\src\\Nancy.Tests\\Unit\\ResponseExtensionsFixture.cs",
"region":  {
"startLine":  127,
"startColumn":  16,
"endLine":  127,
"endColumn":  24
}
}
]
}
],
"shortMessage":  "\"Dispose\" of \"response\".",
"fullMessage":  "You can\u0027t rely on garbage collection to clean up everything. Specifically, you can\u0027t count on it to release non-memory resources such as \"File\"s. For that, there\u0027s the \"IDisposable\" interface, and the contract that \"Dispose\" will always be called on such objects. When an \"IDisposable\" is a class member, then it\u0027s up to that class to call \"Dispose\" on it, ideally in its own \"Dispose\" method. If it\u0027s a local variable, then it should be instantiated with a \"using\" clause to prompt automatic cleanup when it goes out of scope.",
"properties":  {
"severity":  "Warning",
"warningLevel":  "1",
"defaultSeverity":  "Warning",
"title":  "\"IDisposables\" should be disposed",
"category":  "Reliability",
"helpLink":  "http://vs.sonarlint.org/rules/index.html#version=1.7.0\u0026ruleId=S2930",
"isEnabledByDefault":  "True",
"isSuppressedInSource":  "False"
}
},
{
"ruleId":  "S2930",
"locations":  [
{
"analysisTarget":  [
{
"uri":  "Nancy\\src\\Nancy.Tests\\Unit\\ResponseExtensionsFixture.cs",
"region":  {
"startLine":  141,
"startColumn":  16,
"endLine":  141,
"endColumn":  24
}
}
]
}
],
"shortMessage":  "\"Dispose\" of \"response\".",
"fullMessage":  "You can\u0027t rely on garbage collection to clean up everything. Specifically, you can\u0027t count on it to release non-memory resources such as \"File\"s. For that, there\u0027s the \"IDisposable\" interface, and the contract that \"Dispose\" will always be called on such objects. When an \"IDisposable\" is a class member, then it\u0027s up to that class to call \"Dispose\" on it, ideally in its own \"Dispose\" method. If it\u0027s a local variable, then it should be instantiated with a \"using\" clause to prompt automatic cleanup when it goes out of scope.",
"properties":  {
"severity":  "Warning",
"warningLevel":  "1",
"defaultSeverity":  "Warning",
"title":  "\"IDisposables\" should be disposed",
"category":  "Reliability",
"helpLink":  "http://vs.sonarlint.org/rules/index.html#version=1.7.0\u0026ruleId=S2930",
"isEnabledByDefault":  "True",
"isSuppressedInSource":  "False"
}
},
{
"ruleId":  "S2930",
"locations":  [
{
"analysisTarget":  [
{
"uri":  "Nancy\\src\\Nancy.Tests\\Unit\\ResponseExtensionsFixture.cs",
"region":  {
"startLine":  153,
"startColumn":  16,
"endLine":  153,
"endColumn":  24
}
}
]
}
],
"shortMessage":  "\"Dispose\" of \"response\".",
"fullMessage":  "You can\u0027t rely on garbage collection to clean up everything. Specifically, you can\u0027t count on it to release non-memory resources such as \"File\"s. For that, there\u0027s the \"IDisposable\" interface, and the contract that \"Dispose\" will always be called on such objects. When an \"IDisposable\" is a class member, then it\u0027s up to that class to call \"Dispose\" on it, ideally in its own \"Dispose\" method. If it\u0027s a local variable, then it should be instantiated with a \"using\" clause to prompt automatic cleanup when it goes out of scope.",
"properties":  {
"severity":  "Warning",
"warningLevel":  "1",
"defaultSeverity":  "Warning",
"title":  "\"IDisposables\" should be disposed",
"category":  "Reliability",
"helpLink":  "http://vs.sonarlint.org/rules/index.html#version=1.7.0\u0026ruleId=S2930",
"isEnabledByDefault":  "True",
"isSuppressedInSource":  "False"
}
},
{
"ruleId":  "S2930",
"locations":  [
{
"analysisTarget":  [
{
"uri":  "Nancy\\src\\Nancy.Tests\\Unit\\ResponseExtensionsFixture.cs",
"region":  {
"startLine":  163,
"startColumn":  16,
"endLine":  163,
"endColumn":  23
}
}
]
}
],
"shortMessage":  "\"Dispose\" of \"respone\".",
"fullMessage":  "You can\u0027t rely on garbage collection to clean up everything. Specifically, you can\u0027t count on it to release non-memory resources such as \"File\"s. For that, there\u0027s the \"IDisposable\" interface, and the contract that \"Dispose\" will always be called on such objects. When an \"IDisposable\" is a class member, then it\u0027s up to that class to call \"Dispose\" on it, ideally in its own \"Dispose\" method. If it\u0027s a local variable, then it should be instantiated with a \"using\" clause to prompt automatic cleanup when it goes out of scope.",
"properties":  {
"severity":  "Warning",
"warningLevel":  "1",
"defaultSeverity":  "Warning",
"title":  "\"IDisposables\" should be disposed",
"category":  "Reliability",
"helpLink":  "http://vs.sonarlint.org/rules/index.html#version=1.7.0\u0026ruleId=S2930",
"isEnabledByDefault":  "True",
"isSuppressedInSource":  "False"
}
},
{
"ruleId":  "S2930",
"locations":  [
{
"analysisTarget":  [
{
"uri":  "Nancy\\src\\Nancy.Tests\\Unit\\ResponseExtensionsFixture.cs",
"region":  {
"startLine":  173,
"startColumn":  16,
"endLine":  173,
"endColumn":  23
}
}
]
}
],
"shortMessage":  "\"Dispose\" of \"respone\".",
"fullMessage":  "You can\u0027t rely on garbage collection to clean up everything. Specifically, you can\u0027t count on it to release non-memory resources such as \"File\"s. For that, there\u0027s the \"IDisposable\" interface, and the contract that \"Dispose\" will always be called on such objects. When an \"IDisposable\" is a class member, then it\u0027s up to that class to call \"Dispose\" on it, ideally in its own \"Dispose\" method. If it\u0027s a local variable, then it should be instantiated with a \"using\" clause to prompt automatic cleanup when it goes out of scope.",
"properties":  {
"severity":  "Warning",
"warningLevel":  "1",
"defaultSeverity":  "Warning",
"title":  "\"IDisposables\" should be disposed",
"category":  "Reliability",
"helpLink":  "http://vs.sonarlint.org/rules/index.html#version=1.7.0\u0026ruleId=S2930",
"isEnabledByDefault":  "True",
"isSuppressedInSource":  "False"
}
},
{
"ruleId":  "S2930",
"locations":  [
{
"analysisTarget":  [
{
"uri":  "Nancy\\src\\Nancy.Tests\\Unit\\ResponseFixture.cs",
"region":  {
"startLine":  15,
"startColumn":  16,
"endLine":  15,
"endColumn":  24
}
}
]
}
],
"shortMessage":  "\"Dispose\" of \"response\".",
"fullMessage":  "You can\u0027t rely on garbage collection to clean up everything. Specifically, you can\u0027t count on it to release non-memory resources such as \"File\"s. For that, there\u0027s the \"IDisposable\" interface, and the contract that \"Dispose\" will always be called on such objects. When an \"IDisposable\" is a class member, then it\u0027s up to that class to call \"Dispose\" on it, ideally in its own \"Dispose\" method. If it\u0027s a local variable, then it should be instantiated with a \"using\" clause to prompt automatic cleanup when it goes out of scope.",
"properties":  {
"severity":  "Warning",
"warningLevel":  "1",
"defaultSeverity":  "Warning",
"title":  "\"IDisposables\" should be disposed",
"category":  "Reliability",
"helpLink":  "http://vs.sonarlint.org/rules/index.html#version=1.7.0\u0026ruleId=S2930",
"isEnabledByDefault":  "True",
"isSuppressedInSource":  "False"
}
},
{
"ruleId":  "S2930",
"locations":  [
{
"analysisTarget":  [
{
"uri":  "Nancy\\src\\Nancy.Tests\\Unit\\ResponseFixture.cs",
"region":  {
"startLine":  28,
"startColumn":  16,
"endLine":  28,
"endColumn":  24
}
}
]
}
],
"shortMessage":  "\"Dispose\" of \"response\".",
"fullMessage":  "You can\u0027t rely on garbage collection to clean up everything. Specifically, you can\u0027t count on it to release non-memory resources such as \"File\"s. For that, there\u0027s the \"IDisposable\" interface, and the contract that \"Dispose\" will always be called on such objects. When an \"IDisposable\" is a class member, then it\u0027s up to that class to call \"Dispose\" on it, ideally in its own \"Dispose\" method. If it\u0027s a local variable, then it should be instantiated with a \"using\" clause to prompt automatic cleanup when it goes out of scope.",
"properties":  {
"severity":  "Warning",
"warningLevel":  "1",
"defaultSeverity":  "Warning",
"title":  "\"IDisposables\" should be disposed",
"category":  "Reliability",
"helpLink":  "http://vs.sonarlint.org/rules/index.html#version=1.7.0\u0026ruleId=S2930",
"isEnabledByDefault":  "True",
"isSuppressedInSource":  "False"
}
},
{
"ruleId":  "S2930",
"locations":  [
{
"analysisTarget":  [
{
"uri":  "Nancy\\src\\Nancy.Tests\\Unit\\ResponseFixture.cs",
"region":  {
"startLine":  38,
"startColumn":  16,
"endLine":  38,
"endColumn":  24
}
}
]
}
],
"shortMessage":  "\"Dispose\" of \"response\".",
"fullMessage":  "You can\u0027t rely on garbage collection to clean up everything. Specifically, you can\u0027t count on it to release non-memory resources such as \"File\"s. For that, there\u0027s the \"IDisposable\" interface, and the contract that \"Dispose\" will always be called on such objects. When an \"IDisposable\" is a class member, then it\u0027s up to that class to call \"Dispose\" on it, ideally in its own \"Dispose\" method. If it\u0027s a local variable, then it should be instantiated with a \"using\" clause to prompt automatic cleanup when it goes out of scope.",
"properties":  {
"severity":  "Warning",
"warningLevel":  "1",
"defaultSeverity":  "Warning",
"title":  "\"IDisposables\" should be disposed",
"category":  "Reliability",
"helpLink":  "http://vs.sonarlint.org/rules/index.html#version=1.7.0\u0026ruleId=S2930",
"isEnabledByDefault":  "True",
"isSuppressedInSource":  "False"
}
},
{
"ruleId":  "S2930",
"locations":  [
{
"analysisTarget":  [
{
"uri":  "Nancy\\src\\Nancy.Tests\\Unit\\ResponseFixture.cs",
"region":  {
"startLine":  48,
"startColumn":  16,
"endLine":  48,
"endColumn":  24
}
}
]
}
],
"shortMessage":  "\"Dispose\" of \"response\".",
"fullMessage":  "You can\u0027t rely on garbage collection to clean up everything. Specifically, you can\u0027t count on it to release non-memory resources such as \"File\"s. For that, there\u0027s the \"IDisposable\" interface, and the contract that \"Dispose\" will always be called on such objects. When an \"IDisposable\" is a class member, then it\u0027s up to that class to call \"Dispose\" on it, ideally in its own \"Dispose\" method. If it\u0027s a local variable, then it should be instantiated with a \"using\" clause to prompt automatic cleanup when it goes out of scope.",
"properties":  {
"severity":  "Warning",
"warningLevel":  "1",
"defaultSeverity":  "Warning",
"title":  "\"IDisposables\" should be disposed",
"category":  "Reliability",
"helpLink":  "http://vs.sonarlint.org/rules/index.html#version=1.7.0\u0026ruleId=S2930",
"isEnabledByDefault":  "True",
"isSuppressedInSource":  "False"
}
},
{
"ruleId":  "S2930",
"locations":  [
{
"analysisTarget":  [
{
"uri":  "Nancy\\src\\Nancy.Tests\\Unit\\ResponseFixture.cs",
"region":  {
"startLine":  174,
"startColumn":  16,
"endLine":  174,
"endColumn":  24
}
}
]
}
],
"shortMessage":  "\"Dispose\" of \"response\".",
"fullMessage":  "You can\u0027t rely on garbage collection to clean up everything. Specifically, you can\u0027t count on it to release non-memory resources such as \"File\"s. For that, there\u0027s the \"IDisposable\" interface, and the contract that \"Dispose\" will always be called on such objects. When an \"IDisposable\" is a class member, then it\u0027s up to that class to call \"Dispose\" on it, ideally in its own \"Dispose\" method. If it\u0027s a local variable, then it should be instantiated with a \"using\" clause to prompt automatic cleanup when it goes out of scope.",
"properties":  {
"severity":  "Warning",
"warningLevel":  "1",
"defaultSeverity":  "Warning",
"title":  "\"IDisposables\" should be disposed",
"category":  "Reliability",
"helpLink":  "http://vs.sonarlint.org/rules/index.html#version=1.7.0\u0026ruleId=S2930",
"isEnabledByDefault":  "True",
"isSuppressedInSource":  "False"
}
},
{
"ruleId":  "S2930",
"locations":  [
{
"analysisTarget":  [
{
"uri":  "Nancy\\src\\Nancy.Tests\\Unit\\ResponseFixture.cs",
"region":  {
"startLine":  188,
"startColumn":  16,
"endLine":  188,
"endColumn":  24
}
}
]
}
],
"shortMessage":  "\"Dispose\" of \"response\".",
"fullMessage":  "You can\u0027t rely on garbage collection to clean up everything. Specifically, you can\u0027t count on it to release non-memory resources such as \"File\"s. For that, there\u0027s the \"IDisposable\" interface, and the contract that \"Dispose\" will always be called on such objects. When an \"IDisposable\" is a class member, then it\u0027s up to that class to call \"Dispose\" on it, ideally in its own \"Dispose\" method. If it\u0027s a local variable, then it should be instantiated with a \"using\" clause to prompt automatic cleanup when it goes out of scope.",
"properties":  {
"severity":  "Warning",
"warningLevel":  "1",
"defaultSeverity":  "Warning",
"title":  "\"IDisposables\" should be disposed",
"category":  "Reliability",
"helpLink":  "http://vs.sonarlint.org/rules/index.html#version=1.7.0\u0026ruleId=S2930",
"isEnabledByDefault":  "True",
"isSuppressedInSource":  "False"
}
},
{
"ruleId":  "S2930",
"locations":  [
{
"analysisTarget":  [
{
"uri":  "Nancy\\src\\Nancy.Tests\\Unit\\ResponseFixture.cs",
"region":  {
"startLine":  203,
"startColumn":  16,
"endLine":  203,
"endColumn":  24
}
}
]
}
],
"shortMessage":  "\"Dispose\" of \"response\".",
"fullMessage":  "You can\u0027t rely on garbage collection to clean up everything. Specifically, you can\u0027t count on it to release non-memory resources such as \"File\"s. For that, there\u0027s the \"IDisposable\" interface, and the contract that \"Dispose\" will always be called on such objects. When an \"IDisposable\" is a class member, then it\u0027s up to that class to call \"Dispose\" on it, ideally in its own \"Dispose\" method. If it\u0027s a local variable, then it should be instantiated with a \"using\" clause to prompt automatic cleanup when it goes out of scope.",
"properties":  {
"severity":  "Warning",
"warningLevel":  "1",
"defaultSeverity":  "Warning",
"title":  "\"IDisposables\" should be disposed",
"category":  "Reliability",
"helpLink":  "http://vs.sonarlint.org/rules/index.html#version=1.7.0\u0026ruleId=S2930",
"isEnabledByDefault":  "True",
"isSuppressedInSource":  "False"
}
},
{
"ruleId":  "S2930",
"locations":  [
{
"analysisTarget":  [
{
"uri":  "Nancy\\src\\Nancy.Tests\\Unit\\Responses\\DefaultJsonSerializerFixture.cs",
"region":  {
"startLine":  21,
"startColumn":  16,
"endLine":  21,
"endColumn":  22
}
}
]
}
],
"shortMessage":  "\"Dispose\" of \"output\".",
"fullMessage":  "You can\u0027t rely on garbage collection to clean up everything. Specifically, you can\u0027t count on it to release non-memory resources such as \"File\"s. For that, there\u0027s the \"IDisposable\" interface, and the contract that \"Dispose\" will always be called on such objects. When an \"IDisposable\" is a class member, then it\u0027s up to that class to call \"Dispose\" on it, ideally in its own \"Dispose\" method. If it\u0027s a local variable, then it should be instantiated with a \"using\" clause to prompt automatic cleanup when it goes out of scope.",
"properties":  {
"severity":  "Warning",
"warningLevel":  "1",
"defaultSeverity":  "Warning",
"title":  "\"IDisposables\" should be disposed",
"category":  "Reliability",
"helpLink":  "http://vs.sonarlint.org/rules/index.html#version=1.7.0\u0026ruleId=S2930",
"isEnabledByDefault":  "True",
"isSuppressedInSource":  "False"
}
},
{
"ruleId":  "S2930",
"locations":  [
{
"analysisTarget":  [
{
"uri":  "Nancy\\src\\Nancy.Tests\\Unit\\Responses\\DefaultJsonSerializerFixture.cs",
"region":  {
"startLine":  37,
"startColumn":  16,
"endLine":  37,
"endColumn":  22
}
}
]
}
],
"shortMessage":  "\"Dispose\" of \"output\".",
"fullMessage":  "You can\u0027t rely on garbage collection to clean up everything. Specifically, you can\u0027t count on it to release non-memory resources such as \"File\"s. For that, there\u0027s the \"IDisposable\" interface, and the contract that \"Dispose\" will always be called on such objects. When an \"IDisposable\" is a class member, then it\u0027s up to that class to call \"Dispose\" on it, ideally in its own \"Dispose\" method. If it\u0027s a local variable, then it should be instantiated with a \"using\" clause to prompt automatic cleanup when it goes out of scope.",
"properties":  {
"severity":  "Warning",
"warningLevel":  "1",
"defaultSeverity":  "Warning",
"title":  "\"IDisposables\" should be disposed",
"category":  "Reliability",
"helpLink":  "http://vs.sonarlint.org/rules/index.html#version=1.7.0\u0026ruleId=S2930",
"isEnabledByDefault":  "True",
"isSuppressedInSource":  "False"
}
},
{
"ruleId":  "S2930",
"locations":  [
{
"analysisTarget":  [
{
"uri":  "Nancy\\src\\Nancy.Tests\\Unit\\Responses\\DefaultJsonSerializerFixture.cs",
"region":  {
"startLine":  58,
"startColumn":  16,
"endLine":  58,
"endColumn":  22
}
}
]
}
],
"shortMessage":  "\"Dispose\" of \"output\".",
"fullMessage":  "You can\u0027t rely on garbage collection to clean up everything. Specifically, you can\u0027t count on it to release non-memory resources such as \"File\"s. For that, there\u0027s the \"IDisposable\" interface, and the contract that \"Dispose\" will always be called on such objects. When an \"IDisposable\" is a class member, then it\u0027s up to that class to call \"Dispose\" on it, ideally in its own \"Dispose\" method. If it\u0027s a local variable, then it should be instantiated with a \"using\" clause to prompt automatic cleanup when it goes out of scope.",
"properties":  {
"severity":  "Warning",
"warningLevel":  "1",
"defaultSeverity":  "Warning",
"title":  "\"IDisposables\" should be disposed",
"category":  "Reliability",
"helpLink":  "http://vs.sonarlint.org/rules/index.html#version=1.7.0\u0026ruleId=S2930",
"isEnabledByDefault":  "True",
"isSuppressedInSource":  "False"
}
},
{
"ruleId":  "S2930",
"locations":  [
{
"analysisTarget":  [
{
"uri":  "Nancy\\src\\Nancy.Tests\\Unit\\Responses\\DefaultJsonSerializerFixture.cs",
"region":  {
"startLine":  75,
"startColumn":  16,
"endLine":  75,
"endColumn":  22
}
}
]
}
],
"shortMessage":  "\"Dispose\" of \"output\".",
"fullMessage":  "You can\u0027t rely on garbage collection to clean up everything. Specifically, you can\u0027t count on it to release non-memory resources such as \"File\"s. For that, there\u0027s the \"IDisposable\" interface, and the contract that \"Dispose\" will always be called on such objects. When an \"IDisposable\" is a class member, then it\u0027s up to that class to call \"Dispose\" on it, ideally in its own \"Dispose\" method. If it\u0027s a local variable, then it should be instantiated with a \"using\" clause to prompt automatic cleanup when it goes out of scope.",
"properties":  {
"severity":  "Warning",
"warningLevel":  "1",
"defaultSeverity":  "Warning",
"title":  "\"IDisposables\" should be disposed",
"category":  "Reliability",
"helpLink":  "http://vs.sonarlint.org/rules/index.html#version=1.7.0\u0026ruleId=S2930",
"isEnabledByDefault":  "True",
"isSuppressedInSource":  "False"
}
},
{
"ruleId":  "S2930",
"locations":  [
{
"analysisTarget":  [
{
"uri":  "Nancy\\src\\Nancy.Tests\\Unit\\Responses\\DefaultJsonSerializerFixture.cs",
"region":  {
"startLine":  93,
"startColumn":  16,
"endLine":  93,
"endColumn":  22
}
}
]
}
],
"shortMessage":  "\"Dispose\" of \"output\".",
"fullMessage":  "You can\u0027t rely on garbage collection to clean up everything. Specifically, you can\u0027t count on it to release non-memory resources such as \"File\"s. For that, there\u0027s the \"IDisposable\" interface, and the contract that \"Dispose\" will always be called on such objects. When an \"IDisposable\" is a class member, then it\u0027s up to that class to call \"Dispose\" on it, ideally in its own \"Dispose\" method. If it\u0027s a local variable, then it should be instantiated with a \"using\" clause to prompt automatic cleanup when it goes out of scope.",
"properties":  {
"severity":  "Warning",
"warningLevel":  "1",
"defaultSeverity":  "Warning",
"title":  "\"IDisposables\" should be disposed",
"category":  "Reliability",
"helpLink":  "http://vs.sonarlint.org/rules/index.html#version=1.7.0\u0026ruleId=S2930",
"isEnabledByDefault":  "True",
"isSuppressedInSource":  "False"
}
},
{
"ruleId":  "S2930",
"locations":  [
{
"analysisTarget":  [
{
"uri":  "Nancy\\src\\Nancy.Tests\\Unit\\Responses\\DefaultJsonSerializerFixture.cs",
"region":  {
"startLine":  120,
"startColumn":  16,
"endLine":  120,
"endColumn":  22
}
}
]
}
],
"shortMessage":  "\"Dispose\" of \"output\".",
"fullMessage":  "You can\u0027t rely on garbage collection to clean up everything. Specifically, you can\u0027t count on it to release non-memory resources such as \"File\"s. For that, there\u0027s the \"IDisposable\" interface, and the contract that \"Dispose\" will always be called on such objects. When an \"IDisposable\" is a class member, then it\u0027s up to that class to call \"Dispose\" on it, ideally in its own \"Dispose\" method. If it\u0027s a local variable, then it should be instantiated with a \"using\" clause to prompt automatic cleanup when it goes out of scope.",
"properties":  {
"severity":  "Warning",
"warningLevel":  "1",
"defaultSeverity":  "Warning",
"title":  "\"IDisposables\" should be disposed",
"category":  "Reliability",
"helpLink":  "http://vs.sonarlint.org/rules/index.html#version=1.7.0\u0026ruleId=S2930",
"isEnabledByDefault":  "True",
"isSuppressedInSource":  "False"
}
},
{
"ruleId":  "S2930",
"locations":  [
{
"analysisTarget":  [
{
"uri":  "Nancy\\src\\Nancy.Tests\\Unit\\Responses\\DefaultJsonSerializerFixture.cs",
"region":  {
"startLine":  143,
"startColumn":  16,
"endLine":  143,
"endColumn":  22
}
}
]
}
],
"shortMessage":  "\"Dispose\" of \"output\".",
"fullMessage":  "You can\u0027t rely on garbage collection to clean up everything. Specifically, you can\u0027t count on it to release non-memory resources such as \"File\"s. For that, there\u0027s the \"IDisposable\" interface, and the contract that \"Dispose\" will always be called on such objects. When an \"IDisposable\" is a class member, then it\u0027s up to that class to call \"Dispose\" on it, ideally in its own \"Dispose\" method. If it\u0027s a local variable, then it should be instantiated with a \"using\" clause to prompt automatic cleanup when it goes out of scope.",
"properties":  {
"severity":  "Warning",
"warningLevel":  "1",
"defaultSeverity":  "Warning",
"title":  "\"IDisposables\" should be disposed",
"category":  "Reliability",
"helpLink":  "http://vs.sonarlint.org/rules/index.html#version=1.7.0\u0026ruleId=S2930",
"isEnabledByDefault":  "True",
"isSuppressedInSource":  "False"
}
},
{
"ruleId":  "S2930",
"locations":  [
{
"analysisTarget":  [
{
"uri":  "Nancy\\src\\Nancy.Tests\\Unit\\Responses\\DefaultJsonSerializerFixture.cs",
"region":  {
"startLine":  167,
"startColumn":  16,
"endLine":  167,
"endColumn":  22
}
}
]
}
],
"shortMessage":  "\"Dispose\" of \"output\".",
"fullMessage":  "You can\u0027t rely on garbage collection to clean up everything. Specifically, you can\u0027t count on it to release non-memory resources such as \"File\"s. For that, there\u0027s the \"IDisposable\" interface, and the contract that \"Dispose\" will always be called on such objects. When an \"IDisposable\" is a class member, then it\u0027s up to that class to call \"Dispose\" on it, ideally in its own \"Dispose\" method. If it\u0027s a local variable, then it should be instantiated with a \"using\" clause to prompt automatic cleanup when it goes out of scope.",
"properties":  {
"severity":  "Warning",
"warningLevel":  "1",
"defaultSeverity":  "Warning",
"title":  "\"IDisposables\" should be disposed",
"category":  "Reliability",
"helpLink":  "http://vs.sonarlint.org/rules/index.html#version=1.7.0\u0026ruleId=S2930",
"isEnabledByDefault":  "True",
"isSuppressedInSource":  "False"
}
},
{
"ruleId":  "S2930",
"locations":  [
{
"analysisTarget":  [
{
"uri":  "Nancy\\src\\Nancy.Tests\\Unit\\Responses\\EmbeddedFileResponseFixture.cs",
"region":  {
"startLine":  14,
"startColumn":  16,
"endLine":  14,
"endColumn":  24
}
}
]
}
],
"shortMessage":  "\"Dispose\" of \"response\".",
"fullMessage":  "You can\u0027t rely on garbage collection to clean up everything. Specifically, you can\u0027t count on it to release non-memory resources such as \"File\"s. For that, there\u0027s the \"IDisposable\" interface, and the contract that \"Dispose\" will always be called on such objects. When an \"IDisposable\" is a class member, then it\u0027s up to that class to call \"Dispose\" on it, ideally in its own \"Dispose\" method. If it\u0027s a local variable, then it should be instantiated with a \"using\" clause to prompt automatic cleanup when it goes out of scope.",
"properties":  {
"severity":  "Warning",
"warningLevel":  "1",
"defaultSeverity":  "Warning",
"title":  "\"IDisposables\" should be disposed",
"category":  "Reliability",
"helpLink":  "http://vs.sonarlint.org/rules/index.html#version=1.7.0\u0026ruleId=S2930",
"isEnabledByDefault":  "True",
"isSuppressedInSource":  "False"
}
},
{
"ruleId":  "S2930",
"locations":  [
{
"analysisTarget":  [
{
"uri":  "Nancy\\src\\Nancy.Tests\\Unit\\Responses\\EmbeddedFileResponseFixture.cs",
"region":  {
"startLine":  25,
"startColumn":  16,
"endLine":  25,
"endColumn":  24
}
}
]
}
],
"shortMessage":  "\"Dispose\" of \"response\".",
"fullMessage":  "You can\u0027t rely on garbage collection to clean up everything. Specifically, you can\u0027t count on it to release non-memory resources such as \"File\"s. For that, there\u0027s the \"IDisposable\" interface, and the contract that \"Dispose\" will always be called on such objects. When an \"IDisposable\" is a class member, then it\u0027s up to that class to call \"Dispose\" on it, ideally in its own \"Dispose\" method. If it\u0027s a local variable, then it should be instantiated with a \"using\" clause to prompt automatic cleanup when it goes out of scope.",
"properties":  {
"severity":  "Warning",
"warningLevel":  "1",
"defaultSeverity":  "Warning",
"title":  "\"IDisposables\" should be disposed",
"category":  "Reliability",
"helpLink":  "http://vs.sonarlint.org/rules/index.html#version=1.7.0\u0026ruleId=S2930",
"isEnabledByDefault":  "True",
"isSuppressedInSource":  "False"
}
},
{
"ruleId":  "S2930",
"locations":  [
{
"analysisTarget":  [
{
"uri":  "Nancy\\src\\Nancy.Tests\\Unit\\Responses\\EmbeddedFileResponseFixture.cs",
"region":  {
"startLine":  28,
"startColumn":  16,
"endLine":  28,
"endColumn":  28
}
}
]
}
],
"shortMessage":  "\"Dispose\" of \"outputStream\".",
"fullMessage":  "You can\u0027t rely on garbage collection to clean up everything. Specifically, you can\u0027t count on it to release non-memory resources such as \"File\"s. For that, there\u0027s the \"IDisposable\" interface, and the contract that \"Dispose\" will always be called on such objects. When an \"IDisposable\" is a class member, then it\u0027s up to that class to call \"Dispose\" on it, ideally in its own \"Dispose\" method. If it\u0027s a local variable, then it should be instantiated with a \"using\" clause to prompt automatic cleanup when it goes out of scope.",
"properties":  {
"severity":  "Warning",
"warningLevel":  "1",
"defaultSeverity":  "Warning",
"title":  "\"IDisposables\" should be disposed",
"category":  "Reliability",
"helpLink":  "http://vs.sonarlint.org/rules/index.html#version=1.7.0\u0026ruleId=S2930",
"isEnabledByDefault":  "True",
"isSuppressedInSource":  "False"
}
},
{
"ruleId":  "S2930",
"locations":  [
{
"analysisTarget":  [
{
"uri":  "Nancy\\src\\Nancy.Tests\\Unit\\Responses\\EmbeddedFileResponseFixture.cs",
"region":  {
"startLine":  41,
"startColumn":  16,
"endLine":  41,
"endColumn":  24
}
}
]
}
],
"shortMessage":  "\"Dispose\" of \"response\".",
"fullMessage":  "You can\u0027t rely on garbage collection to clean up everything. Specifically, you can\u0027t count on it to release non-memory resources such as \"File\"s. For that, there\u0027s the \"IDisposable\" interface, and the contract that \"Dispose\" will always be called on such objects. When an \"IDisposable\" is a class member, then it\u0027s up to that class to call \"Dispose\" on it, ideally in its own \"Dispose\" method. If it\u0027s a local variable, then it should be instantiated with a \"using\" clause to prompt automatic cleanup when it goes out of scope.",
"properties":  {
"severity":  "Warning",
"warningLevel":  "1",
"defaultSeverity":  "Warning",
"title":  "\"IDisposables\" should be disposed",
"category":  "Reliability",
"helpLink":  "http://vs.sonarlint.org/rules/index.html#version=1.7.0\u0026ruleId=S2930",
"isEnabledByDefault":  "True",
"isSuppressedInSource":  "False"
}
},
{
"ruleId":  "S2930",
"locations":  [
{
"analysisTarget":  [
{
"uri":  "Nancy\\src\\Nancy.Tests\\Unit\\Responses\\EmbeddedFileResponseFixture.cs",
"region":  {
"startLine":  52,
"startColumn":  16,
"endLine":  52,
"endColumn":  24
}
}
]
}
],
"shortMessage":  "\"Dispose\" of \"response\".",
"fullMessage":  "You can\u0027t rely on garbage collection to clean up everything. Specifically, you can\u0027t count on it to release non-memory resources such as \"File\"s. For that, there\u0027s the \"IDisposable\" interface, and the contract that \"Dispose\" will always be called on such objects. When an \"IDisposable\" is a class member, then it\u0027s up to that class to call \"Dispose\" on it, ideally in its own \"Dispose\" method. If it\u0027s a local variable, then it should be instantiated with a \"using\" clause to prompt automatic cleanup when it goes out of scope.",
"properties":  {
"severity":  "Warning",
"warningLevel":  "1",
"defaultSeverity":  "Warning",
"title":  "\"IDisposables\" should be disposed",
"category":  "Reliability",
"helpLink":  "http://vs.sonarlint.org/rules/index.html#version=1.7.0\u0026ruleId=S2930",
"isEnabledByDefault":  "True",
"isSuppressedInSource":  "False"
}
},
{
"ruleId":  "S2930",
"locations":  [
{
"analysisTarget":  [
{
"uri":  "Nancy\\src\\Nancy.Tests\\Unit\\Responses\\EmbeddedFileResponseFixture.cs",
"region":  {
"startLine":  55,
"startColumn":  16,
"endLine":  55,
"endColumn":  28
}
}
]
}
],
"shortMessage":  "\"Dispose\" of \"outputStream\".",
"fullMessage":  "You can\u0027t rely on garbage collection to clean up everything. Specifically, you can\u0027t count on it to release non-memory resources such as \"File\"s. For that, there\u0027s the \"IDisposable\" interface, and the contract that \"Dispose\" will always be called on such objects. When an \"IDisposable\" is a class member, then it\u0027s up to that class to call \"Dispose\" on it, ideally in its own \"Dispose\" method. If it\u0027s a local variable, then it should be instantiated with a \"using\" clause to prompt automatic cleanup when it goes out of scope.",
"properties":  {
"severity":  "Warning",
"warningLevel":  "1",
"defaultSeverity":  "Warning",
"title":  "\"IDisposables\" should be disposed",
"category":  "Reliability",
"helpLink":  "http://vs.sonarlint.org/rules/index.html#version=1.7.0\u0026ruleId=S2930",
"isEnabledByDefault":  "True",
"isSuppressedInSource":  "False"
}
},
{
"ruleId":  "S2930",
"locations":  [
{
"analysisTarget":  [
{
"uri":  "Nancy\\src\\Nancy.Tests\\Unit\\Responses\\EmbeddedFileResponseFixture.cs",
"region":  {
"startLine":  68,
"startColumn":  16,
"endLine":  68,
"endColumn":  24
}
}
]
}
],
"shortMessage":  "\"Dispose\" of \"response\".",
"fullMessage":  "You can\u0027t rely on garbage collection to clean up everything. Specifically, you can\u0027t count on it to release non-memory resources such as \"File\"s. For that, there\u0027s the \"IDisposable\" interface, and the contract that \"Dispose\" will always be called on such objects. When an \"IDisposable\" is a class member, then it\u0027s up to that class to call \"Dispose\" on it, ideally in its own \"Dispose\" method. If it\u0027s a local variable, then it should be instantiated with a \"using\" clause to prompt automatic cleanup when it goes out of scope.",
"properties":  {
"severity":  "Warning",
"warningLevel":  "1",
"defaultSeverity":  "Warning",
"title":  "\"IDisposables\" should be disposed",
"category":  "Reliability",
"helpLink":  "http://vs.sonarlint.org/rules/index.html#version=1.7.0\u0026ruleId=S2930",
"isEnabledByDefault":  "True",
"isSuppressedInSource":  "False"
}
},
{
"ruleId":  "S2930",
"locations":  [
{
"analysisTarget":  [
{
"uri":  "Nancy\\src\\Nancy.Tests\\Unit\\Responses\\GenericFileResponseFixture.cs",
"region":  {
"startLine":  29,
"startColumn":  16,
"endLine":  29,
"endColumn":  24
}
}
]
}
],
"shortMessage":  "\"Dispose\" of \"response\".",
"fullMessage":  "You can\u0027t rely on garbage collection to clean up everything. Specifically, you can\u0027t count on it to release non-memory resources such as \"File\"s. For that, there\u0027s the \"IDisposable\" interface, and the contract that \"Dispose\" will always be called on such objects. When an \"IDisposable\" is a class member, then it\u0027s up to that class to call \"Dispose\" on it, ideally in its own \"Dispose\" method. If it\u0027s a local variable, then it should be instantiated with a \"using\" clause to prompt automatic cleanup when it goes out of scope.",
"properties":  {
"severity":  "Warning",
"warningLevel":  "1",
"defaultSeverity":  "Warning",
"title":  "\"IDisposables\" should be disposed",
"category":  "Reliability",
"helpLink":  "http://vs.sonarlint.org/rules/index.html#version=1.7.0\u0026ruleId=S2930",
"isEnabledByDefault":  "True",
"isSuppressedInSource":  "False"
}
},
{
"ruleId":  "S2930",
"locations":  [
{
"analysisTarget":  [
{
"uri":  "Nancy\\src\\Nancy.Tests\\Unit\\Responses\\GenericFileResponseFixture.cs",
"region":  {
"startLine":  39,
"startColumn":  16,
"endLine":  39,
"endColumn":  24
}
}
]
}
],
"shortMessage":  "\"Dispose\" of \"response\".",
"fullMessage":  "You can\u0027t rely on garbage collection to clean up everything. Specifically, you can\u0027t count on it to release non-memory resources such as \"File\"s. For that, there\u0027s the \"IDisposable\" interface, and the contract that \"Dispose\" will always be called on such objects. When an \"IDisposable\" is a class member, then it\u0027s up to that class to call \"Dispose\" on it, ideally in its own \"Dispose\" method. If it\u0027s a local variable, then it should be instantiated with a \"using\" clause to prompt automatic cleanup when it goes out of scope.",
"properties":  {
"severity":  "Warning",
"warningLevel":  "1",
"defaultSeverity":  "Warning",
"title":  "\"IDisposables\" should be disposed",
"category":  "Reliability",
"helpLink":  "http://vs.sonarlint.org/rules/index.html#version=1.7.0\u0026ruleId=S2930",
"isEnabledByDefault":  "True",
"isSuppressedInSource":  "False"
}
},
{
"ruleId":  "S2930",
"locations":  [
{
"analysisTarget":  [
{
"uri":  "Nancy\\src\\Nancy.Tests\\Unit\\Responses\\GenericFileResponseFixture.cs",
"region":  {
"startLine":  52,
"startColumn":  16,
"endLine":  52,
"endColumn":  24
}
}
]
}
],
"shortMessage":  "\"Dispose\" of \"response\".",
"fullMessage":  "You can\u0027t rely on garbage collection to clean up everything. Specifically, you can\u0027t count on it to release non-memory resources such as \"File\"s. For that, there\u0027s the \"IDisposable\" interface, and the contract that \"Dispose\" will always be called on such objects. When an \"IDisposable\" is a class member, then it\u0027s up to that class to call \"Dispose\" on it, ideally in its own \"Dispose\" method. If it\u0027s a local variable, then it should be instantiated with a \"using\" clause to prompt automatic cleanup when it goes out of scope.",
"properties":  {
"severity":  "Warning",
"warningLevel":  "1",
"defaultSeverity":  "Warning",
"title":  "\"IDisposables\" should be disposed",
"category":  "Reliability",
"helpLink":  "http://vs.sonarlint.org/rules/index.html#version=1.7.0\u0026ruleId=S2930",
"isEnabledByDefault":  "True",
"isSuppressedInSource":  "False"
}
},
{
"ruleId":  "S2930",
"locations":  [
{
"analysisTarget":  [
{
"uri":  "Nancy\\src\\Nancy.Tests\\Unit\\Responses\\GenericFileResponseFixture.cs",
"region":  {
"startLine":  65,
"startColumn":  16,
"endLine":  65,
"endColumn":  24
}
}
]
}
],
"shortMessage":  "\"Dispose\" of \"response\".",
"fullMessage":  "You can\u0027t rely on garbage collection to clean up everything. Specifically, you can\u0027t count on it to release non-memory resources such as \"File\"s. For that, there\u0027s the \"IDisposable\" interface, and the contract that \"Dispose\" will always be called on such objects. When an \"IDisposable\" is a class member, then it\u0027s up to that class to call \"Dispose\" on it, ideally in its own \"Dispose\" method. If it\u0027s a local variable, then it should be instantiated with a \"using\" clause to prompt automatic cleanup when it goes out of scope.",
"properties":  {
"severity":  "Warning",
"warningLevel":  "1",
"defaultSeverity":  "Warning",
"title":  "\"IDisposables\" should be disposed",
"category":  "Reliability",
"helpLink":  "http://vs.sonarlint.org/rules/index.html#version=1.7.0\u0026ruleId=S2930",
"isEnabledByDefault":  "True",
"isSuppressedInSource":  "False"
}
},
{
"ruleId":  "S2930",
"locations":  [
{
"analysisTarget":  [
{
"uri":  "Nancy\\src\\Nancy.Tests\\Unit\\Responses\\GenericFileResponseFixture.cs",
"region":  {
"startLine":  79,
"startColumn":  16,
"endLine":  79,
"endColumn":  24
}
}
]
}
],
"shortMessage":  "\"Dispose\" of \"response\".",
"fullMessage":  "You can\u0027t rely on garbage collection to clean up everything. Specifically, you can\u0027t count on it to release non-memory resources such as \"File\"s. For that, there\u0027s the \"IDisposable\" interface, and the contract that \"Dispose\" will always be called on such objects. When an \"IDisposable\" is a class member, then it\u0027s up to that class to call \"Dispose\" on it, ideally in its own \"Dispose\" method. If it\u0027s a local variable, then it should be instantiated with a \"using\" clause to prompt automatic cleanup when it goes out of scope.",
"properties":  {
"severity":  "Warning",
"warningLevel":  "1",
"defaultSeverity":  "Warning",
"title":  "\"IDisposables\" should be disposed",
"category":  "Reliability",
"helpLink":  "http://vs.sonarlint.org/rules/index.html#version=1.7.0\u0026ruleId=S2930",
"isEnabledByDefault":  "True",
"isSuppressedInSource":  "False"
}
},
{
"ruleId":  "S2930",
"locations":  [
{
"analysisTarget":  [
{
"uri":  "Nancy\\src\\Nancy.Tests\\Unit\\Responses\\GenericFileResponseFixture.cs",
"region":  {
"startLine":  89,
"startColumn":  16,
"endLine":  89,
"endColumn":  24
}
}
]
}
],
"shortMessage":  "\"Dispose\" of \"response\".",
"fullMessage":  "You can\u0027t rely on garbage collection to clean up everything. Specifically, you can\u0027t count on it to release non-memory resources such as \"File\"s. For that, there\u0027s the \"IDisposable\" interface, and the contract that \"Dispose\" will always be called on such objects. When an \"IDisposable\" is a class member, then it\u0027s up to that class to call \"Dispose\" on it, ideally in its own \"Dispose\" method. If it\u0027s a local variable, then it should be instantiated with a \"using\" clause to prompt automatic cleanup when it goes out of scope.",
"properties":  {
"severity":  "Warning",
"warningLevel":  "1",
"defaultSeverity":  "Warning",
"title":  "\"IDisposables\" should be disposed",
"category":  "Reliability",
"helpLink":  "http://vs.sonarlint.org/rules/index.html#version=1.7.0\u0026ruleId=S2930",
"isEnabledByDefault":  "True",
"isSuppressedInSource":  "False"
}
},
{
"ruleId":  "S2930",
"locations":  [
{
"analysisTarget":  [
{
"uri":  "Nancy\\src\\Nancy.Tests\\Unit\\Responses\\GenericFileResponseFixture.cs",
"region":  {
"startLine":  100,
"startColumn":  16,
"endLine":  100,
"endColumn":  24
}
}
]
}
],
"shortMessage":  "\"Dispose\" of \"response\".",
"fullMessage":  "You can\u0027t rely on garbage collection to clean up everything. Specifically, you can\u0027t count on it to release non-memory resources such as \"File\"s. For that, there\u0027s the \"IDisposable\" interface, and the contract that \"Dispose\" will always be called on such objects. When an \"IDisposable\" is a class member, then it\u0027s up to that class to call \"Dispose\" on it, ideally in its own \"Dispose\" method. If it\u0027s a local variable, then it should be instantiated with a \"using\" clause to prompt automatic cleanup when it goes out of scope.",
"properties":  {
"severity":  "Warning",
"warningLevel":  "1",
"defaultSeverity":  "Warning",
"title":  "\"IDisposables\" should be disposed",
"category":  "Reliability",
"helpLink":  "http://vs.sonarlint.org/rules/index.html#version=1.7.0\u0026ruleId=S2930",
"isEnabledByDefault":  "True",
"isSuppressedInSource":  "False"
}
},
{
"ruleId":  "S2930",
"locations":  [
{
"analysisTarget":  [
{
"uri":  "Nancy\\src\\Nancy.Tests\\Unit\\Responses\\GenericFileResponseFixture.cs",
"region":  {
"startLine":  113,
"startColumn":  16,
"endLine":  113,
"endColumn":  24
}
}
]
}
],
"shortMessage":  "\"Dispose\" of \"response\".",
"fullMessage":  "You can\u0027t rely on garbage collection to clean up everything. Specifically, you can\u0027t count on it to release non-memory resources such as \"File\"s. For that, there\u0027s the \"IDisposable\" interface, and the contract that \"Dispose\" will always be called on such objects. When an \"IDisposable\" is a class member, then it\u0027s up to that class to call \"Dispose\" on it, ideally in its own \"Dispose\" method. If it\u0027s a local variable, then it should be instantiated with a \"using\" clause to prompt automatic cleanup when it goes out of scope.",
"properties":  {
"severity":  "Warning",
"warningLevel":  "1",
"defaultSeverity":  "Warning",
"title":  "\"IDisposables\" should be disposed",
"category":  "Reliability",
"helpLink":  "http://vs.sonarlint.org/rules/index.html#version=1.7.0\u0026ruleId=S2930",
"isEnabledByDefault":  "True",
"isSuppressedInSource":  "False"
}
},
{
"ruleId":  "S2930",
"locations":  [
{
"analysisTarget":  [
{
"uri":  "Nancy\\src\\Nancy.Tests\\Unit\\Responses\\GenericFileResponseFixture.cs",
"region":  {
"startLine":  123,
"startColumn":  16,
"endLine":  123,
"endColumn":  24
}
}
]
}
],
"shortMessage":  "\"Dispose\" of \"response\".",
"fullMessage":  "You can\u0027t rely on garbage collection to clean up everything. Specifically, you can\u0027t count on it to release non-memory resources such as \"File\"s. For that, there\u0027s the \"IDisposable\" interface, and the contract that \"Dispose\" will always be called on such objects. When an \"IDisposable\" is a class member, then it\u0027s up to that class to call \"Dispose\" on it, ideally in its own \"Dispose\" method. If it\u0027s a local variable, then it should be instantiated with a \"using\" clause to prompt automatic cleanup when it goes out of scope.",
"properties":  {
"severity":  "Warning",
"warningLevel":  "1",
"defaultSeverity":  "Warning",
"title":  "\"IDisposables\" should be disposed",
"category":  "Reliability",
"helpLink":  "http://vs.sonarlint.org/rules/index.html#version=1.7.0\u0026ruleId=S2930",
"isEnabledByDefault":  "True",
"isSuppressedInSource":  "False"
}
},
{
"ruleId":  "S2930",
"locations":  [
{
"analysisTarget":  [
{
"uri":  "Nancy\\src\\Nancy.Tests\\Unit\\Responses\\GenericFileResponseFixture.cs",
"region":  {
"startLine":  136,
"startColumn":  16,
"endLine":  136,
"endColumn":  24
}
}
]
}
],
"shortMessage":  "\"Dispose\" of \"response\".",
"fullMessage":  "You can\u0027t rely on garbage collection to clean up everything. Specifically, you can\u0027t count on it to release non-memory resources such as \"File\"s. For that, there\u0027s the \"IDisposable\" interface, and the contract that \"Dispose\" will always be called on such objects. When an \"IDisposable\" is a class member, then it\u0027s up to that class to call \"Dispose\" on it, ideally in its own \"Dispose\" method. If it\u0027s a local variable, then it should be instantiated with a \"using\" clause to prompt automatic cleanup when it goes out of scope.",
"properties":  {
"severity":  "Warning",
"warningLevel":  "1",
"defaultSeverity":  "Warning",
"title":  "\"IDisposables\" should be disposed",
"category":  "Reliability",
"helpLink":  "http://vs.sonarlint.org/rules/index.html#version=1.7.0\u0026ruleId=S2930",
"isEnabledByDefault":  "True",
"isSuppressedInSource":  "False"
}
},
{
"ruleId":  "S2930",
"locations":  [
{
"analysisTarget":  [
{
"uri":  "Nancy\\src\\Nancy.Tests\\Unit\\Responses\\GenericFileResponseFixture.cs",
"region":  {
"startLine":  145,
"startColumn":  16,
"endLine":  145,
"endColumn":  18
}
}
]
}
],
"shortMessage":  "\"Dispose\" of \"ms\".",
"fullMessage":  "You can\u0027t rely on garbage collection to clean up everything. Specifically, you can\u0027t count on it to release non-memory resources such as \"File\"s. For that, there\u0027s the \"IDisposable\" interface, and the contract that \"Dispose\" will always be called on such objects. When an \"IDisposable\" is a class member, then it\u0027s up to that class to call \"Dispose\" on it, ideally in its own \"Dispose\" method. If it\u0027s a local variable, then it should be instantiated with a \"using\" clause to prompt automatic cleanup when it goes out of scope.",
"properties":  {
"severity":  "Warning",
"warningLevel":  "1",
"defaultSeverity":  "Warning",
"title":  "\"IDisposables\" should be disposed",
"category":  "Reliability",
"helpLink":  "http://vs.sonarlint.org/rules/index.html#version=1.7.0\u0026ruleId=S2930",
"isEnabledByDefault":  "True",
"isSuppressedInSource":  "False"
}
},
{
"ruleId":  "S2930",
"locations":  [
{
"analysisTarget":  [
{
"uri":  "Nancy\\src\\Nancy.Tests\\Unit\\Responses\\RedirectResponseFixture.cs",
"region":  {
"startLine":  32,
"startColumn":  16,
"endLine":  32,
"endColumn":  24
}
}
]
}
],
"shortMessage":  "\"Dispose\" of \"response\".",
"fullMessage":  "You can\u0027t rely on garbage collection to clean up everything. Specifically, you can\u0027t count on it to release non-memory resources such as \"File\"s. For that, there\u0027s the \"IDisposable\" interface, and the contract that \"Dispose\" will always be called on such objects. When an \"IDisposable\" is a class member, then it\u0027s up to that class to call \"Dispose\" on it, ideally in its own \"Dispose\" method. If it\u0027s a local variable, then it should be instantiated with a \"using\" clause to prompt automatic cleanup when it goes out of scope.",
"properties":  {
"severity":  "Warning",
"warningLevel":  "1",
"defaultSeverity":  "Warning",
"title":  "\"IDisposables\" should be disposed",
"category":  "Reliability",
"helpLink":  "http://vs.sonarlint.org/rules/index.html#version=1.7.0\u0026ruleId=S2930",
"isEnabledByDefault":  "True",
"isSuppressedInSource":  "False"
}
},
{
"ruleId":  "S2930",
"locations":  [
{
"analysisTarget":  [
{
"uri":  "Nancy\\src\\Nancy.Tests\\Unit\\Responses\\StreamResponseFixture.cs",
"region":  {
"startLine":  19,
"startColumn":  16,
"endLine":  19,
"endColumn":  27
}
}
]
}
],
"shortMessage":  "\"Dispose\" of \"inputStream\".",
"fullMessage":  "You can\u0027t rely on garbage collection to clean up everything. Specifically, you can\u0027t count on it to release non-memory resources such as \"File\"s. For that, there\u0027s the \"IDisposable\" interface, and the contract that \"Dispose\" will always be called on such objects. When an \"IDisposable\" is a class member, then it\u0027s up to that class to call \"Dispose\" on it, ideally in its own \"Dispose\" method. If it\u0027s a local variable, then it should be instantiated with a \"using\" clause to prompt automatic cleanup when it goes out of scope.",
"properties":  {
"severity":  "Warning",
"warningLevel":  "1",
"defaultSeverity":  "Warning",
"title":  "\"IDisposables\" should be disposed",
"category":  "Reliability",
"helpLink":  "http://vs.sonarlint.org/rules/index.html#version=1.7.0\u0026ruleId=S2930",
"isEnabledByDefault":  "True",
"isSuppressedInSource":  "False"
}
},
{
"ruleId":  "S2930",
"locations":  [
{
"analysisTarget":  [
{
"uri":  "Nancy\\src\\Nancy.Tests\\Unit\\Responses\\StreamResponseFixture.cs",
"region":  {
"startLine":  22,
"startColumn":  16,
"endLine":  22,
"endColumn":  24
}
}
]
}
],
"shortMessage":  "\"Dispose\" of \"response\".",
"fullMessage":  "You can\u0027t rely on garbage collection to clean up everything. Specifically, you can\u0027t count on it to release non-memory resources such as \"File\"s. For that, there\u0027s the \"IDisposable\" interface, and the contract that \"Dispose\" will always be called on such objects. When an \"IDisposable\" is a class member, then it\u0027s up to that class to call \"Dispose\" on it, ideally in its own \"Dispose\" method. If it\u0027s a local variable, then it should be instantiated with a \"using\" clause to prompt automatic cleanup when it goes out of scope.",
"properties":  {
"severity":  "Warning",
"warningLevel":  "1",
"defaultSeverity":  "Warning",
"title":  "\"IDisposables\" should be disposed",
"category":  "Reliability",
"helpLink":  "http://vs.sonarlint.org/rules/index.html#version=1.7.0\u0026ruleId=S2930",
"isEnabledByDefault":  "True",
"isSuppressedInSource":  "False"
}
},
{
"ruleId":  "S2930",
"locations":  [
{
"analysisTarget":  [
{
"uri":  "Nancy\\src\\Nancy.Tests\\Unit\\Responses\\StreamResponseFixture.cs",
"region":  {
"startLine":  25,
"startColumn":  16,
"endLine":  25,
"endColumn":  28
}
}
]
}
],
"shortMessage":  "\"Dispose\" of \"outputStream\".",
"fullMessage":  "You can\u0027t rely on garbage collection to clean up everything. Specifically, you can\u0027t count on it to release non-memory resources such as \"File\"s. For that, there\u0027s the \"IDisposable\" interface, and the contract that \"Dispose\" will always be called on such objects. When an \"IDisposable\" is a class member, then it\u0027s up to that class to call \"Dispose\" on it, ideally in its own \"Dispose\" method. If it\u0027s a local variable, then it should be instantiated with a \"using\" clause to prompt automatic cleanup when it goes out of scope.",
"properties":  {
"severity":  "Warning",
"warningLevel":  "1",
"defaultSeverity":  "Warning",
"title":  "\"IDisposables\" should be disposed",
"category":  "Reliability",
"helpLink":  "http://vs.sonarlint.org/rules/index.html#version=1.7.0\u0026ruleId=S2930",
"isEnabledByDefault":  "True",
"isSuppressedInSource":  "False"
}
},
{
"ruleId":  "S2930",
"locations":  [
{
"analysisTarget":  [
{
"uri":  "Nancy\\src\\Nancy.Tests\\Unit\\Responses\\StreamResponseFixture.cs",
"region":  {
"startLine":  41,
"startColumn":  16,
"endLine":  41,
"endColumn":  27
}
}
]
}
],
"shortMessage":  "\"Dispose\" of \"inputStream\".",
"fullMessage":  "You can\u0027t rely on garbage collection to clean up everything. Specifically, you can\u0027t count on it to release non-memory resources such as \"File\"s. For that, there\u0027s the \"IDisposable\" interface, and the contract that \"Dispose\" will always be called on such objects. When an \"IDisposable\" is a class member, then it\u0027s up to that class to call \"Dispose\" on it, ideally in its own \"Dispose\" method. If it\u0027s a local variable, then it should be instantiated with a \"using\" clause to prompt automatic cleanup when it goes out of scope.",
"properties":  {
"severity":  "Warning",
"warningLevel":  "1",
"defaultSeverity":  "Warning",
"title":  "\"IDisposables\" should be disposed",
"category":  "Reliability",
"helpLink":  "http://vs.sonarlint.org/rules/index.html#version=1.7.0\u0026ruleId=S2930",
"isEnabledByDefault":  "True",
"isSuppressedInSource":  "False"
}
},
{
"ruleId":  "S2930",
"locations":  [
{
"analysisTarget":  [
{
"uri":  "Nancy\\src\\Nancy.Tests\\Unit\\Responses\\StreamResponseFixture.cs",
"region":  {
"startLine":  44,
"startColumn":  16,
"endLine":  44,
"endColumn":  24
}
}
]
}
],
"shortMessage":  "\"Dispose\" of \"response\".",
"fullMessage":  "You can\u0027t rely on garbage collection to clean up everything. Specifically, you can\u0027t count on it to release non-memory resources such as \"File\"s. For that, there\u0027s the \"IDisposable\" interface, and the contract that \"Dispose\" will always be called on such objects. When an \"IDisposable\" is a class member, then it\u0027s up to that class to call \"Dispose\" on it, ideally in its own \"Dispose\" method. If it\u0027s a local variable, then it should be instantiated with a \"using\" clause to prompt automatic cleanup when it goes out of scope.",
"properties":  {
"severity":  "Warning",
"warningLevel":  "1",
"defaultSeverity":  "Warning",
"title":  "\"IDisposables\" should be disposed",
"category":  "Reliability",
"helpLink":  "http://vs.sonarlint.org/rules/index.html#version=1.7.0\u0026ruleId=S2930",
"isEnabledByDefault":  "True",
"isSuppressedInSource":  "False"
}
},
{
"ruleId":  "S2930",
"locations":  [
{
"analysisTarget":  [
{
"uri":  "Nancy\\src\\Nancy.Tests\\Unit\\Responses\\StreamResponseFixture.cs",
"region":  {
"startLine":  47,
"startColumn":  16,
"endLine":  47,
"endColumn":  28
}
}
]
}
],
"shortMessage":  "\"Dispose\" of \"outputStream\".",
"fullMessage":  "You can\u0027t rely on garbage collection to clean up everything. Specifically, you can\u0027t count on it to release non-memory resources such as \"File\"s. For that, there\u0027s the \"IDisposable\" interface, and the contract that \"Dispose\" will always be called on such objects. When an \"IDisposable\" is a class member, then it\u0027s up to that class to call \"Dispose\" on it, ideally in its own \"Dispose\" method. If it\u0027s a local variable, then it should be instantiated with a \"using\" clause to prompt automatic cleanup when it goes out of scope.",
"properties":  {
"severity":  "Warning",
"warningLevel":  "1",
"defaultSeverity":  "Warning",
"title":  "\"IDisposables\" should be disposed",
"category":  "Reliability",
"helpLink":  "http://vs.sonarlint.org/rules/index.html#version=1.7.0\u0026ruleId=S2930",
"isEnabledByDefault":  "True",
"isSuppressedInSource":  "False"
}
},
{
"ruleId":  "S2930",
"locations":  [
{
"analysisTarget":  [
{
"uri":  "Nancy\\src\\Nancy.Tests\\Unit\\Responses\\StreamResponseFixture.cs",
"region":  {
"startLine":  68,
"startColumn":  16,
"endLine":  68,
"endColumn":  24
}
}
]
}
],
"shortMessage":  "\"Dispose\" of \"response\".",
"fullMessage":  "You can\u0027t rely on garbage collection to clean up everything. Specifically, you can\u0027t count on it to release non-memory resources such as \"File\"s. For that, there\u0027s the \"IDisposable\" interface, and the contract that \"Dispose\" will always be called on such objects. When an \"IDisposable\" is a class member, then it\u0027s up to that class to call \"Dispose\" on it, ideally in its own \"Dispose\" method. If it\u0027s a local variable, then it should be instantiated with a \"using\" clause to prompt automatic cleanup when it goes out of scope.",
"properties":  {
"severity":  "Warning",
"warningLevel":  "1",
"defaultSeverity":  "Warning",
"title":  "\"IDisposables\" should be disposed",
"category":  "Reliability",
"helpLink":  "http://vs.sonarlint.org/rules/index.html#version=1.7.0\u0026ruleId=S2930",
"isEnabledByDefault":  "True",
"isSuppressedInSource":  "False"
}
},
{
"ruleId":  "S2930",
"locations":  [
{
"analysisTarget":  [
{
"uri":  "Nancy\\src\\Nancy.Tests\\Unit\\Responses\\StreamResponseFixture.cs",
"region":  {
"startLine":  71,
"startColumn":  16,
"endLine":  71,
"endColumn":  28
}
}
]
}
],
"shortMessage":  "\"Dispose\" of \"outputStream\".",
"fullMessage":  "You can\u0027t rely on garbage collection to clean up everything. Specifically, you can\u0027t count on it to release non-memory resources such as \"File\"s. For that, there\u0027s the \"IDisposable\" interface, and the contract that \"Dispose\" will always be called on such objects. When an \"IDisposable\" is a class member, then it\u0027s up to that class to call \"Dispose\" on it, ideally in its own \"Dispose\" method. If it\u0027s a local variable, then it should be instantiated with a \"using\" clause to prompt automatic cleanup when it goes out of scope.",
"properties":  {
"severity":  "Warning",
"warningLevel":  "1",
"defaultSeverity":  "Warning",
"title":  "\"IDisposables\" should be disposed",
"category":  "Reliability",
"helpLink":  "http://vs.sonarlint.org/rules/index.html#version=1.7.0\u0026ruleId=S2930",
"isEnabledByDefault":  "True",
"isSuppressedInSource":  "False"
}
},
{
"ruleId":  "S2930",
"locations":  [
{
"analysisTarget":  [
{
"uri":  "Nancy\\src\\Nancy.Tests\\Unit\\Responses\\TextResponseFixture.cs",
"region":  {
"startLine":  18,
"startColumn":  16,
"endLine":  18,
"endColumn":  24
}
}
]
}
],
"shortMessage":  "\"Dispose\" of \"response\".",
"fullMessage":  "You can\u0027t rely on garbage collection to clean up everything. Specifically, you can\u0027t count on it to release non-memory resources such as \"File\"s. For that, there\u0027s the \"IDisposable\" interface, and the contract that \"Dispose\" will always be called on such objects. When an \"IDisposable\" is a class member, then it\u0027s up to that class to call \"Dispose\" on it, ideally in its own \"Dispose\" method. If it\u0027s a local variable, then it should be instantiated with a \"using\" clause to prompt automatic cleanup when it goes out of scope.",
"properties":  {
"severity":  "Warning",
"warningLevel":  "1",
"defaultSeverity":  "Warning",
"title":  "\"IDisposables\" should be disposed",
"category":  "Reliability",
"helpLink":  "http://vs.sonarlint.org/rules/index.html#version=1.7.0\u0026ruleId=S2930",
"isEnabledByDefault":  "True",
"isSuppressedInSource":  "False"
}
},
{
"ruleId":  "S2930",
"locations":  [
{
"analysisTarget":  [
{
"uri":  "Nancy\\src\\Nancy.Tests\\Unit\\Responses\\TextResponseFixture.cs",
"region":  {
"startLine":  21,
"startColumn":  16,
"endLine":  21,
"endColumn":  28
}
}
]
}
],
"shortMessage":  "\"Dispose\" of \"outputStream\".",
"fullMessage":  "You can\u0027t rely on garbage collection to clean up everything. Specifically, you can\u0027t count on it to release non-memory resources such as \"File\"s. For that, there\u0027s the \"IDisposable\" interface, and the contract that \"Dispose\" will always be called on such objects. When an \"IDisposable\" is a class member, then it\u0027s up to that class to call \"Dispose\" on it, ideally in its own \"Dispose\" method. If it\u0027s a local variable, then it should be instantiated with a \"using\" clause to prompt automatic cleanup when it goes out of scope.",
"properties":  {
"severity":  "Warning",
"warningLevel":  "1",
"defaultSeverity":  "Warning",
"title":  "\"IDisposables\" should be disposed",
"category":  "Reliability",
"helpLink":  "http://vs.sonarlint.org/rules/index.html#version=1.7.0\u0026ruleId=S2930",
"isEnabledByDefault":  "True",
"isSuppressedInSource":  "False"
}
},
{
"ruleId":  "S2930",
"locations":  [
{
"analysisTarget":  [
{
"uri":  "Nancy\\src\\Nancy.Tests\\Unit\\Responses\\TextResponseFixture.cs",
"region":  {
"startLine":  37,
"startColumn":  16,
"endLine":  37,
"endColumn":  24
}
}
]
}
],
"shortMessage":  "\"Dispose\" of \"response\".",
"fullMessage":  "You can\u0027t rely on garbage collection to clean up everything. Specifically, you can\u0027t count on it to release non-memory resources such as \"File\"s. For that, there\u0027s the \"IDisposable\" interface, and the contract that \"Dispose\" will always be called on such objects. When an \"IDisposable\" is a class member, then it\u0027s up to that class to call \"Dispose\" on it, ideally in its own \"Dispose\" method. If it\u0027s a local variable, then it should be instantiated with a \"using\" clause to prompt automatic cleanup when it goes out of scope.",
"properties":  {
"severity":  "Warning",
"warningLevel":  "1",
"defaultSeverity":  "Warning",
"title":  "\"IDisposables\" should be disposed",
"category":  "Reliability",
"helpLink":  "http://vs.sonarlint.org/rules/index.html#version=1.7.0\u0026ruleId=S2930",
"isEnabledByDefault":  "True",
"isSuppressedInSource":  "False"
}
},
{
"ruleId":  "S2930",
"locations":  [
{
"analysisTarget":  [
{
"uri":  "Nancy\\src\\Nancy.Tests\\Unit\\Responses\\TextResponseFixture.cs",
"region":  {
"startLine":  40,
"startColumn":  16,
"endLine":  40,
"endColumn":  28
}
}
]
}
],
"shortMessage":  "\"Dispose\" of \"outputStream\".",
"fullMessage":  "You can\u0027t rely on garbage collection to clean up everything. Specifically, you can\u0027t count on it to release non-memory resources such as \"File\"s. For that, there\u0027s the \"IDisposable\" interface, and the contract that \"Dispose\" will always be called on such objects. When an \"IDisposable\" is a class member, then it\u0027s up to that class to call \"Dispose\" on it, ideally in its own \"Dispose\" method. If it\u0027s a local variable, then it should be instantiated with a \"using\" clause to prompt automatic cleanup when it goes out of scope.",
"properties":  {
"severity":  "Warning",
"warningLevel":  "1",
"defaultSeverity":  "Warning",
"title":  "\"IDisposables\" should be disposed",
"category":  "Reliability",
"helpLink":  "http://vs.sonarlint.org/rules/index.html#version=1.7.0\u0026ruleId=S2930",
"isEnabledByDefault":  "True",
"isSuppressedInSource":  "False"
}
},
{
"ruleId":  "S2930",
"locations":  [
{
"analysisTarget":  [
{
"uri":  "Nancy\\src\\Nancy.Tests\\Unit\\Responses\\TextResponseFixture.cs",
"region":  {
"startLine":  56,
"startColumn":  16,
"endLine":  56,
"endColumn":  24
}
}
]
}
],
"shortMessage":  "\"Dispose\" of \"response\".",
"fullMessage":  "You can\u0027t rely on garbage collection to clean up everything. Specifically, you can\u0027t count on it to release non-memory resources such as \"File\"s. For that, there\u0027s the \"IDisposable\" interface, and the contract that \"Dispose\" will always be called on such objects. When an \"IDisposable\" is a class member, then it\u0027s up to that class to call \"Dispose\" on it, ideally in its own \"Dispose\" method. If it\u0027s a local variable, then it should be instantiated with a \"using\" clause to prompt automatic cleanup when it goes out of scope.",
"properties":  {
"severity":  "Warning",
"warningLevel":  "1",
"defaultSeverity":  "Warning",
"title":  "\"IDisposables\" should be disposed",
"category":  "Reliability",
"helpLink":  "http://vs.sonarlint.org/rules/index.html#version=1.7.0\u0026ruleId=S2930",
"isEnabledByDefault":  "True",
"isSuppressedInSource":  "False"
}
},
{
"ruleId":  "S2930",
"locations":  [
{
"analysisTarget":  [
{
"uri":  "Nancy\\src\\Nancy.Tests\\Unit\\Responses\\TextResponseFixture.cs",
"region":  {
"startLine":  59,
"startColumn":  16,
"endLine":  59,
"endColumn":  28
}
}
]
}
],
"shortMessage":  "\"Dispose\" of \"outputStream\".",
"fullMessage":  "You can\u0027t rely on garbage collection to clean up everything. Specifically, you can\u0027t count on it to release non-memory resources such as \"File\"s. For that, there\u0027s the \"IDisposable\" interface, and the contract that \"Dispose\" will always be called on such objects. When an \"IDisposable\" is a class member, then it\u0027s up to that class to call \"Dispose\" on it, ideally in its own \"Dispose\" method. If it\u0027s a local variable, then it should be instantiated with a \"using\" clause to prompt automatic cleanup when it goes out of scope.",
"properties":  {
"severity":  "Warning",
"warningLevel":  "1",
"defaultSeverity":  "Warning",
"title":  "\"IDisposables\" should be disposed",
"category":  "Reliability",
"helpLink":  "http://vs.sonarlint.org/rules/index.html#version=1.7.0\u0026ruleId=S2930",
"isEnabledByDefault":  "True",
"isSuppressedInSource":  "False"
}
},
{
"ruleId":  "S2930",
"locations":  [
{
"analysisTarget":  [
{
"uri":  "Nancy\\src\\Nancy.Tests\\Unit\\Responses\\TextResponseFixture.cs",
"region":  {
"startLine":  75,
"startColumn":  16,
"endLine":  75,
"endColumn":  24
}
}
]
}
],
"shortMessage":  "\"Dispose\" of \"response\".",
"fullMessage":  "You can\u0027t rely on garbage collection to clean up everything. Specifically, you can\u0027t count on it to release non-memory resources such as \"File\"s. For that, there\u0027s the \"IDisposable\" interface, and the contract that \"Dispose\" will always be called on such objects. When an \"IDisposable\" is a class member, then it\u0027s up to that class to call \"Dispose\" on it, ideally in its own \"Dispose\" method. If it\u0027s a local variable, then it should be instantiated with a \"using\" clause to prompt automatic cleanup when it goes out of scope.",
"properties":  {
"severity":  "Warning",
"warningLevel":  "1",
"defaultSeverity":  "Warning",
"title":  "\"IDisposables\" should be disposed",
"category":  "Reliability",
"helpLink":  "http://vs.sonarlint.org/rules/index.html#version=1.7.0\u0026ruleId=S2930",
"isEnabledByDefault":  "True",
"isSuppressedInSource":  "False"
}
},
{
"ruleId":  "S2930",
"locations":  [
{
"analysisTarget":  [
{
"uri":  "Nancy\\src\\Nancy.Tests\\Unit\\Responses\\TextResponseFixture.cs",
"region":  {
"startLine":  78,
"startColumn":  16,
"endLine":  78,
"endColumn":  28
}
}
]
}
],
"shortMessage":  "\"Dispose\" of \"outputStream\".",
"fullMessage":  "You can\u0027t rely on garbage collection to clean up everything. Specifically, you can\u0027t count on it to release non-memory resources such as \"File\"s. For that, there\u0027s the \"IDisposable\" interface, and the contract that \"Dispose\" will always be called on such objects. When an \"IDisposable\" is a class member, then it\u0027s up to that class to call \"Dispose\" on it, ideally in its own \"Dispose\" method. If it\u0027s a local variable, then it should be instantiated with a \"using\" clause to prompt automatic cleanup when it goes out of scope.",
"properties":  {
"severity":  "Warning",
"warningLevel":  "1",
"defaultSeverity":  "Warning",
"title":  "\"IDisposables\" should be disposed",
"category":  "Reliability",
"helpLink":  "http://vs.sonarlint.org/rules/index.html#version=1.7.0\u0026ruleId=S2930",
"isEnabledByDefault":  "True",
"isSuppressedInSource":  "False"
}
},
{
"ruleId":  "S2930",
"locations":  [
{
"analysisTarget":  [
{
"uri":  "Nancy\\src\\Nancy.Tests\\Unit\\Responses\\TextResponseFixture.cs",
"region":  {
"startLine":  93,
"startColumn":  16,
"endLine":  93,
"endColumn":  24
}
}
]
}
],
"shortMessage":  "\"Dispose\" of \"response\".",
"fullMessage":  "You can\u0027t rely on garbage collection to clean up everything. Specifically, you can\u0027t count on it to release non-memory resources such as \"File\"s. For that, there\u0027s the \"IDisposable\" interface, and the contract that \"Dispose\" will always be called on such objects. When an \"IDisposable\" is a class member, then it\u0027s up to that class to call \"Dispose\" on it, ideally in its own \"Dispose\" method. If it\u0027s a local variable, then it should be instantiated with a \"using\" clause to prompt automatic cleanup when it goes out of scope.",
"properties":  {
"severity":  "Warning",
"warningLevel":  "1",
"defaultSeverity":  "Warning",
"title":  "\"IDisposables\" should be disposed",
"category":  "Reliability",
"helpLink":  "http://vs.sonarlint.org/rules/index.html#version=1.7.0\u0026ruleId=S2930",
"isEnabledByDefault":  "True",
"isSuppressedInSource":  "False"
}
},
{
"ruleId":  "S2930",
"locations":  [
{
"analysisTarget":  [
{
"uri":  "Nancy\\src\\Nancy.Tests\\Unit\\Responses\\TextResponseFixture.cs",
"region":  {
"startLine":  96,
"startColumn":  16,
"endLine":  96,
"endColumn":  28
}
}
]
}
],
"shortMessage":  "\"Dispose\" of \"outputStream\".",
"fullMessage":  "You can\u0027t rely on garbage collection to clean up everything. Specifically, you can\u0027t count on it to release non-memory resources such as \"File\"s. For that, there\u0027s the \"IDisposable\" interface, and the contract that \"Dispose\" will always be called on such objects. When an \"IDisposable\" is a class member, then it\u0027s up to that class to call \"Dispose\" on it, ideally in its own \"Dispose\" method. If it\u0027s a local variable, then it should be instantiated with a \"using\" clause to prompt automatic cleanup when it goes out of scope.",
"properties":  {
"severity":  "Warning",
"warningLevel":  "1",
"defaultSeverity":  "Warning",
"title":  "\"IDisposables\" should be disposed",
"category":  "Reliability",
"helpLink":  "http://vs.sonarlint.org/rules/index.html#version=1.7.0\u0026ruleId=S2930",
"isEnabledByDefault":  "True",
"isSuppressedInSource":  "False"
}
},
{
"ruleId":  "S2930",
"locations":  [
{
"analysisTarget":  [
{
"uri":  "Nancy\\src\\Nancy.Tests\\Unit\\Responses\\TextResponseFixture.cs",
"region":  {
"startLine":  112,
"startColumn":  16,
"endLine":  112,
"endColumn":  24
}
}
]
}
],
"shortMessage":  "\"Dispose\" of \"response\".",
"fullMessage":  "You can\u0027t rely on garbage collection to clean up everything. Specifically, you can\u0027t count on it to release non-memory resources such as \"File\"s. For that, there\u0027s the \"IDisposable\" interface, and the contract that \"Dispose\" will always be called on such objects. When an \"IDisposable\" is a class member, then it\u0027s up to that class to call \"Dispose\" on it, ideally in its own \"Dispose\" method. If it\u0027s a local variable, then it should be instantiated with a \"using\" clause to prompt automatic cleanup when it goes out of scope.",
"properties":  {
"severity":  "Warning",
"warningLevel":  "1",
"defaultSeverity":  "Warning",
"title":  "\"IDisposables\" should be disposed",
"category":  "Reliability",
"helpLink":  "http://vs.sonarlint.org/rules/index.html#version=1.7.0\u0026ruleId=S2930",
"isEnabledByDefault":  "True",
"isSuppressedInSource":  "False"
}
},
{
"ruleId":  "S2930",
"locations":  [
{
"analysisTarget":  [
{
"uri":  "Nancy\\src\\Nancy.Tests\\Unit\\Responses\\TextResponseFixture.cs",
"region":  {
"startLine":  115,
"startColumn":  16,
"endLine":  115,
"endColumn":  28
}
}
]
}
],
"shortMessage":  "\"Dispose\" of \"outputStream\".",
"fullMessage":  "You can\u0027t rely on garbage collection to clean up everything. Specifically, you can\u0027t count on it to release non-memory resources such as \"File\"s. For that, there\u0027s the \"IDisposable\" interface, and the contract that \"Dispose\" will always be called on such objects. When an \"IDisposable\" is a class member, then it\u0027s up to that class to call \"Dispose\" on it, ideally in its own \"Dispose\" method. If it\u0027s a local variable, then it should be instantiated with a \"using\" clause to prompt automatic cleanup when it goes out of scope.",
"properties":  {
"severity":  "Warning",
"warningLevel":  "1",
"defaultSeverity":  "Warning",
"title":  "\"IDisposables\" should be disposed",
"category":  "Reliability",
"helpLink":  "http://vs.sonarlint.org/rules/index.html#version=1.7.0\u0026ruleId=S2930",
"isEnabledByDefault":  "True",
"isSuppressedInSource":  "False"
}
},
{
"ruleId":  "S2930",
"locations":  [
{
"analysisTarget":  [
{
"uri":  "Nancy\\src\\Nancy.Tests\\Unit\\Routing\\DefaultNancyModuleBuilderFixture.cs",
"region":  {
"startLine":  39,
"startColumn":  16,
"endLine":  39,
"endColumn":  23
}
}
]
}
],
"shortMessage":  "\"Dispose\" of \"context\".",
"fullMessage":  "You can\u0027t rely on garbage collection to clean up everything. Specifically, you can\u0027t count on it to release non-memory resources such as \"File\"s. For that, there\u0027s the \"IDisposable\" interface, and the contract that \"Dispose\" will always be called on such objects. When an \"IDisposable\" is a class member, then it\u0027s up to that class to call \"Dispose\" on it, ideally in its own \"Dispose\" method. If it\u0027s a local variable, then it should be instantiated with a \"using\" clause to prompt automatic cleanup when it goes out of scope.",
"properties":  {
"severity":  "Warning",
"warningLevel":  "1",
"defaultSeverity":  "Warning",
"title":  "\"IDisposables\" should be disposed",
"category":  "Reliability",
"helpLink":  "http://vs.sonarlint.org/rules/index.html#version=1.7.0\u0026ruleId=S2930",
"isEnabledByDefault":  "True",
"isSuppressedInSource":  "False"
}
},
{
"ruleId":  "S2930",
"locations":  [
{
"analysisTarget":  [
{
"uri":  "Nancy\\src\\Nancy.Tests\\Unit\\Routing\\DefaultNancyModuleBuilderFixture.cs",
"region":  {
"startLine":  52,
"startColumn":  16,
"endLine":  52,
"endColumn":  23
}
}
]
}
],
"shortMessage":  "\"Dispose\" of \"context\".",
"fullMessage":  "You can\u0027t rely on garbage collection to clean up everything. Specifically, you can\u0027t count on it to release non-memory resources such as \"File\"s. For that, there\u0027s the \"IDisposable\" interface, and the contract that \"Dispose\" will always be called on such objects. When an \"IDisposable\" is a class member, then it\u0027s up to that class to call \"Dispose\" on it, ideally in its own \"Dispose\" method. If it\u0027s a local variable, then it should be instantiated with a \"using\" clause to prompt automatic cleanup when it goes out of scope.",
"properties":  {
"severity":  "Warning",
"warningLevel":  "1",
"defaultSeverity":  "Warning",
"title":  "\"IDisposables\" should be disposed",
"category":  "Reliability",
"helpLink":  "http://vs.sonarlint.org/rules/index.html#version=1.7.0\u0026ruleId=S2930",
"isEnabledByDefault":  "True",
"isSuppressedInSource":  "False"
}
},
{
"ruleId":  "S2930",
"locations":  [
{
"analysisTarget":  [
{
"uri":  "Nancy\\src\\Nancy.Tests\\Unit\\Routing\\DefaultNancyModuleBuilderFixture.cs",
"region":  {
"startLine":  65,
"startColumn":  16,
"endLine":  65,
"endColumn":  23
}
}
]
}
],
"shortMessage":  "\"Dispose\" of \"context\".",
"fullMessage":  "You can\u0027t rely on garbage collection to clean up everything. Specifically, you can\u0027t count on it to release non-memory resources such as \"File\"s. For that, there\u0027s the \"IDisposable\" interface, and the contract that \"Dispose\" will always be called on such objects. When an \"IDisposable\" is a class member, then it\u0027s up to that class to call \"Dispose\" on it, ideally in its own \"Dispose\" method. If it\u0027s a local variable, then it should be instantiated with a \"using\" clause to prompt automatic cleanup when it goes out of scope.",
"properties":  {
"severity":  "Warning",
"warningLevel":  "1",
"defaultSeverity":  "Warning",
"title":  "\"IDisposables\" should be disposed",
"category":  "Reliability",
"helpLink":  "http://vs.sonarlint.org/rules/index.html#version=1.7.0\u0026ruleId=S2930",
"isEnabledByDefault":  "True",
"isSuppressedInSource":  "False"
}
},
{
"ruleId":  "S2930",
"locations":  [
{
"analysisTarget":  [
{
"uri":  "Nancy\\src\\Nancy.Tests\\Unit\\Routing\\DefaultNancyModuleBuilderFixture.cs",
"region":  {
"startLine":  78,
"startColumn":  16,
"endLine":  78,
"endColumn":  23
}
}
]
}
],
"shortMessage":  "\"Dispose\" of \"context\".",
"fullMessage":  "You can\u0027t rely on garbage collection to clean up everything. Specifically, you can\u0027t count on it to release non-memory resources such as \"File\"s. For that, there\u0027s the \"IDisposable\" interface, and the contract that \"Dispose\" will always be called on such objects. When an \"IDisposable\" is a class member, then it\u0027s up to that class to call \"Dispose\" on it, ideally in its own \"Dispose\" method. If it\u0027s a local variable, then it should be instantiated with a \"using\" clause to prompt automatic cleanup when it goes out of scope.",
"properties":  {
"severity":  "Warning",
"warningLevel":  "1",
"defaultSeverity":  "Warning",
"title":  "\"IDisposables\" should be disposed",
"category":  "Reliability",
"helpLink":  "http://vs.sonarlint.org/rules/index.html#version=1.7.0\u0026ruleId=S2930",
"isEnabledByDefault":  "True",
"isSuppressedInSource":  "False"
}
},
{
"ruleId":  "S2930",
"locations":  [
{
"analysisTarget":  [
{
"uri":  "Nancy\\src\\Nancy.Tests\\Unit\\Routing\\DefaultNancyModuleBuilderFixture.cs",
"region":  {
"startLine":  91,
"startColumn":  16,
"endLine":  91,
"endColumn":  23
}
}
]
}
],
"shortMessage":  "\"Dispose\" of \"context\".",
"fullMessage":  "You can\u0027t rely on garbage collection to clean up everything. Specifically, you can\u0027t count on it to release non-memory resources such as \"File\"s. For that, there\u0027s the \"IDisposable\" interface, and the contract that \"Dispose\" will always be called on such objects. When an \"IDisposable\" is a class member, then it\u0027s up to that class to call \"Dispose\" on it, ideally in its own \"Dispose\" method. If it\u0027s a local variable, then it should be instantiated with a \"using\" clause to prompt automatic cleanup when it goes out of scope.",
"properties":  {
"severity":  "Warning",
"warningLevel":  "1",
"defaultSeverity":  "Warning",
"title":  "\"IDisposables\" should be disposed",
"category":  "Reliability",
"helpLink":  "http://vs.sonarlint.org/rules/index.html#version=1.7.0\u0026ruleId=S2930",
"isEnabledByDefault":  "True",
"isSuppressedInSource":  "False"
}
},
{
"ruleId":  "S2930",
"locations":  [
{
"analysisTarget":  [
{
"uri":  "Nancy\\src\\Nancy.Tests\\Unit\\Routing\\DefaultNancyModuleBuilderFixture.cs",
"region":  {
"startLine":  106,
"startColumn":  16,
"endLine":  106,
"endColumn":  23
}
}
]
}
],
"shortMessage":  "\"Dispose\" of \"context\".",
"fullMessage":  "You can\u0027t rely on garbage collection to clean up everything. Specifically, you can\u0027t count on it to release non-memory resources such as \"File\"s. For that, there\u0027s the \"IDisposable\" interface, and the contract that \"Dispose\" will always be called on such objects. When an \"IDisposable\" is a class member, then it\u0027s up to that class to call \"Dispose\" on it, ideally in its own \"Dispose\" method. If it\u0027s a local variable, then it should be instantiated with a \"using\" clause to prompt automatic cleanup when it goes out of scope.",
"properties":  {
"severity":  "Warning",
"warningLevel":  "1",
"defaultSeverity":  "Warning",
"title":  "\"IDisposables\" should be disposed",
"category":  "Reliability",
"helpLink":  "http://vs.sonarlint.org/rules/index.html#version=1.7.0\u0026ruleId=S2930",
"isEnabledByDefault":  "True",
"isSuppressedInSource":  "False"
}
},
{
"ruleId":  "S2930",
"locations":  [
{
"analysisTarget":  [
{
"uri":  "Nancy\\src\\Nancy.Tests\\Unit\\Routing\\DefaultRequestDispatcherFixture.cs",
"region":  {
"startLine":  95,
"startColumn":  16,
"endLine":  95,
"endColumn":  23
}
}
]
}
],
"shortMessage":  "\"Dispose\" of \"context\".",
"fullMessage":  "You can\u0027t rely on garbage collection to clean up everything. Specifically, you can\u0027t count on it to release non-memory resources such as \"File\"s. For that, there\u0027s the \"IDisposable\" interface, and the contract that \"Dispose\" will always be called on such objects. When an \"IDisposable\" is a class member, then it\u0027s up to that class to call \"Dispose\" on it, ideally in its own \"Dispose\" method. If it\u0027s a local variable, then it should be instantiated with a \"using\" clause to prompt automatic cleanup when it goes out of scope.",
"properties":  {
"severity":  "Warning",
"warningLevel":  "1",
"defaultSeverity":  "Warning",
"title":  "\"IDisposables\" should be disposed",
"category":  "Reliability",
"helpLink":  "http://vs.sonarlint.org/rules/index.html#version=1.7.0\u0026ruleId=S2930",
"isEnabledByDefault":  "True",
"isSuppressedInSource":  "False"
}
},
{
"ruleId":  "S2930",
"locations":  [
{
"analysisTarget":  [
{
"uri":  "Nancy\\src\\Nancy.Tests\\Unit\\Routing\\DefaultRequestDispatcherFixture.cs",
"region":  {
"startLine":  141,
"startColumn":  16,
"endLine":  141,
"endColumn":  23
}
}
]
}
],
"shortMessage":  "\"Dispose\" of \"context\".",
"fullMessage":  "You can\u0027t rely on garbage collection to clean up everything. Specifically, you can\u0027t count on it to release non-memory resources such as \"File\"s. For that, there\u0027s the \"IDisposable\" interface, and the contract that \"Dispose\" will always be called on such objects. When an \"IDisposable\" is a class member, then it\u0027s up to that class to call \"Dispose\" on it, ideally in its own \"Dispose\" method. If it\u0027s a local variable, then it should be instantiated with a \"using\" clause to prompt automatic cleanup when it goes out of scope.",
"properties":  {
"severity":  "Warning",
"warningLevel":  "1",
"defaultSeverity":  "Warning",
"title":  "\"IDisposables\" should be disposed",
"category":  "Reliability",
"helpLink":  "http://vs.sonarlint.org/rules/index.html#version=1.7.0\u0026ruleId=S2930",
"isEnabledByDefault":  "True",
"isSuppressedInSource":  "False"
}
},
{
"ruleId":  "S2930",
"locations":  [
{
"analysisTarget":  [
{
"uri":  "Nancy\\src\\Nancy.Tests\\Unit\\Routing\\DefaultRequestDispatcherFixture.cs",
"region":  {
"startLine":  156,
"startColumn":  16,
"endLine":  156,
"endColumn":  32
}
}
]
}
],
"shortMessage":  "\"Dispose\" of \"expectedResponse\".",
"fullMessage":  "You can\u0027t rely on garbage collection to clean up everything. Specifically, you can\u0027t count on it to release non-memory resources such as \"File\"s. For that, there\u0027s the \"IDisposable\" interface, and the contract that \"Dispose\" will always be called on such objects. When an \"IDisposable\" is a class member, then it\u0027s up to that class to call \"Dispose\" on it, ideally in its own \"Dispose\" method. If it\u0027s a local variable, then it should be instantiated with a \"using\" clause to prompt automatic cleanup when it goes out of scope.",
"properties":  {
"severity":  "Warning",
"warningLevel":  "1",
"defaultSeverity":  "Warning",
"title":  "\"IDisposables\" should be disposed",
"category":  "Reliability",
"helpLink":  "http://vs.sonarlint.org/rules/index.html#version=1.7.0\u0026ruleId=S2930",
"isEnabledByDefault":  "True",
"isSuppressedInSource":  "False"
}
},
{
"ruleId":  "S2930",
"locations":  [
{
"analysisTarget":  [
{
"uri":  "Nancy\\src\\Nancy.Tests\\Unit\\Routing\\DefaultRequestDispatcherFixture.cs",
"region":  {
"startLine":  176,
"startColumn":  16,
"endLine":  176,
"endColumn":  23
}
}
]
}
],
"shortMessage":  "\"Dispose\" of \"context\".",
"fullMessage":  "You can\u0027t rely on garbage collection to clean up everything. Specifically, you can\u0027t count on it to release non-memory resources such as \"File\"s. For that, there\u0027s the \"IDisposable\" interface, and the contract that \"Dispose\" will always be called on such objects. When an \"IDisposable\" is a class member, then it\u0027s up to that class to call \"Dispose\" on it, ideally in its own \"Dispose\" method. If it\u0027s a local variable, then it should be instantiated with a \"using\" clause to prompt automatic cleanup when it goes out of scope.",
"properties":  {
"severity":  "Warning",
"warningLevel":  "1",
"defaultSeverity":  "Warning",
"title":  "\"IDisposables\" should be disposed",
"category":  "Reliability",
"helpLink":  "http://vs.sonarlint.org/rules/index.html#version=1.7.0\u0026ruleId=S2930",
"isEnabledByDefault":  "True",
"isSuppressedInSource":  "False"
}
},
{
"ruleId":  "S2930",
"locations":  [
{
"analysisTarget":  [
{
"uri":  "Nancy\\src\\Nancy.Tests\\Unit\\Routing\\DefaultRequestDispatcherFixture.cs",
"region":  {
"startLine":  193,
"startColumn":  16,
"endLine":  193,
"endColumn":  24
}
}
]
}
],
"shortMessage":  "\"Dispose\" of \"response\".",
"fullMessage":  "You can\u0027t rely on garbage collection to clean up everything. Specifically, you can\u0027t count on it to release non-memory resources such as \"File\"s. For that, there\u0027s the \"IDisposable\" interface, and the contract that \"Dispose\" will always be called on such objects. When an \"IDisposable\" is a class member, then it\u0027s up to that class to call \"Dispose\" on it, ideally in its own \"Dispose\" method. If it\u0027s a local variable, then it should be instantiated with a \"using\" clause to prompt automatic cleanup when it goes out of scope.",
"properties":  {
"severity":  "Warning",
"warningLevel":  "1",
"defaultSeverity":  "Warning",
"title":  "\"IDisposables\" should be disposed",
"category":  "Reliability",
"helpLink":  "http://vs.sonarlint.org/rules/index.html#version=1.7.0\u0026ruleId=S2930",
"isEnabledByDefault":  "True",
"isSuppressedInSource":  "False"
}
},
{
"ruleId":  "S2930",
"locations":  [
{
"analysisTarget":  [
{
"uri":  "Nancy\\src\\Nancy.Tests\\Unit\\Routing\\DefaultRequestDispatcherFixture.cs",
"region":  {
"startLine":  214,
"startColumn":  16,
"endLine":  214,
"endColumn":  23
}
}
]
}
],
"shortMessage":  "\"Dispose\" of \"context\".",
"fullMessage":  "You can\u0027t rely on garbage collection to clean up everything. Specifically, you can\u0027t count on it to release non-memory resources such as \"File\"s. For that, there\u0027s the \"IDisposable\" interface, and the contract that \"Dispose\" will always be called on such objects. When an \"IDisposable\" is a class member, then it\u0027s up to that class to call \"Dispose\" on it, ideally in its own \"Dispose\" method. If it\u0027s a local variable, then it should be instantiated with a \"using\" clause to prompt automatic cleanup when it goes out of scope.",
"properties":  {
"severity":  "Warning",
"warningLevel":  "1",
"defaultSeverity":  "Warning",
"title":  "\"IDisposables\" should be disposed",
"category":  "Reliability",
"helpLink":  "http://vs.sonarlint.org/rules/index.html#version=1.7.0\u0026ruleId=S2930",
"isEnabledByDefault":  "True",
"isSuppressedInSource":  "False"
}
},
{
"ruleId":  "S2930",
"locations":  [
{
"analysisTarget":  [
{
"uri":  "Nancy\\src\\Nancy.Tests\\Unit\\Routing\\DefaultRequestDispatcherFixture.cs",
"region":  {
"startLine":  245,
"startColumn":  16,
"endLine":  245,
"endColumn":  23
}
}
]
}
],
"shortMessage":  "\"Dispose\" of \"context\".",
"fullMessage":  "You can\u0027t rely on garbage collection to clean up everything. Specifically, you can\u0027t count on it to release non-memory resources such as \"File\"s. For that, there\u0027s the \"IDisposable\" interface, and the contract that \"Dispose\" will always be called on such objects. When an \"IDisposable\" is a class member, then it\u0027s up to that class to call \"Dispose\" on it, ideally in its own \"Dispose\" method. If it\u0027s a local variable, then it should be instantiated with a \"using\" clause to prompt automatic cleanup when it goes out of scope.",
"properties":  {
"severity":  "Warning",
"warningLevel":  "1",
"defaultSeverity":  "Warning",
"title":  "\"IDisposables\" should be disposed",
"category":  "Reliability",
"helpLink":  "http://vs.sonarlint.org/rules/index.html#version=1.7.0\u0026ruleId=S2930",
"isEnabledByDefault":  "True",
"isSuppressedInSource":  "False"
}
},
{
"ruleId":  "S2930",
"locations":  [
{
"analysisTarget":  [
{
"uri":  "Nancy\\src\\Nancy.Tests\\Unit\\Routing\\DefaultRequestDispatcherFixture.cs",
"region":  {
"startLine":  261,
"startColumn":  16,
"endLine":  261,
"endColumn":  23
}
}
]
}
],
"shortMessage":  "\"Dispose\" of \"context\".",
"fullMessage":  "You can\u0027t rely on garbage collection to clean up everything. Specifically, you can\u0027t count on it to release non-memory resources such as \"File\"s. For that, there\u0027s the \"IDisposable\" interface, and the contract that \"Dispose\" will always be called on such objects. When an \"IDisposable\" is a class member, then it\u0027s up to that class to call \"Dispose\" on it, ideally in its own \"Dispose\" method. If it\u0027s a local variable, then it should be instantiated with a \"using\" clause to prompt automatic cleanup when it goes out of scope.",
"properties":  {
"severity":  "Warning",
"warningLevel":  "1",
"defaultSeverity":  "Warning",
"title":  "\"IDisposables\" should be disposed",
"category":  "Reliability",
"helpLink":  "http://vs.sonarlint.org/rules/index.html#version=1.7.0\u0026ruleId=S2930",
"isEnabledByDefault":  "True",
"isSuppressedInSource":  "False"
}
},
{
"ruleId":  "S2930",
"locations":  [
{
"analysisTarget":  [
{
"uri":  "Nancy\\src\\Nancy.Tests\\Unit\\Routing\\DefaultRequestDispatcherFixture.cs",
"region":  {
"startLine":  291,
"startColumn":  16,
"endLine":  291,
"endColumn":  23
}
}
]
}
],
"shortMessage":  "\"Dispose\" of \"context\".",
"fullMessage":  "You can\u0027t rely on garbage collection to clean up everything. Specifically, you can\u0027t count on it to release non-memory resources such as \"File\"s. For that, there\u0027s the \"IDisposable\" interface, and the contract that \"Dispose\" will always be called on such objects. When an \"IDisposable\" is a class member, then it\u0027s up to that class to call \"Dispose\" on it, ideally in its own \"Dispose\" method. If it\u0027s a local variable, then it should be instantiated with a \"using\" clause to prompt automatic cleanup when it goes out of scope.",
"properties":  {
"severity":  "Warning",
"warningLevel":  "1",
"defaultSeverity":  "Warning",
"title":  "\"IDisposables\" should be disposed",
"category":  "Reliability",
"helpLink":  "http://vs.sonarlint.org/rules/index.html#version=1.7.0\u0026ruleId=S2930",
"isEnabledByDefault":  "True",
"isSuppressedInSource":  "False"
}
},
{
"ruleId":  "S2930",
"locations":  [
{
"analysisTarget":  [
{
"uri":  "Nancy\\src\\Nancy.Tests\\Unit\\Routing\\DefaultRequestDispatcherFixture.cs",
"region":  {
"startLine":  319,
"startColumn":  16,
"endLine":  319,
"endColumn":  23
}
}
]
}
],
"shortMessage":  "\"Dispose\" of \"context\".",
"fullMessage":  "You can\u0027t rely on garbage collection to clean up everything. Specifically, you can\u0027t count on it to release non-memory resources such as \"File\"s. For that, there\u0027s the \"IDisposable\" interface, and the contract that \"Dispose\" will always be called on such objects. When an \"IDisposable\" is a class member, then it\u0027s up to that class to call \"Dispose\" on it, ideally in its own \"Dispose\" method. If it\u0027s a local variable, then it should be instantiated with a \"using\" clause to prompt automatic cleanup when it goes out of scope.",
"properties":  {
"severity":  "Warning",
"warningLevel":  "1",
"defaultSeverity":  "Warning",
"title":  "\"IDisposables\" should be disposed",
"category":  "Reliability",
"helpLink":  "http://vs.sonarlint.org/rules/index.html#version=1.7.0\u0026ruleId=S2930",
"isEnabledByDefault":  "True",
"isSuppressedInSource":  "False"
}
},
{
"ruleId":  "S2930",
"locations":  [
{
"analysisTarget":  [
{
"uri":  "Nancy\\src\\Nancy.Tests\\Unit\\Routing\\DefaultRequestDispatcherFixture.cs",
"region":  {
"startLine":  339,
"startColumn":  16,
"endLine":  339,
"endColumn":  23
}
}
]
}
],
"shortMessage":  "\"Dispose\" of \"context\".",
"fullMessage":  "You can\u0027t rely on garbage collection to clean up everything. Specifically, you can\u0027t count on it to release non-memory resources such as \"File\"s. For that, there\u0027s the \"IDisposable\" interface, and the contract that \"Dispose\" will always be called on such objects. When an \"IDisposable\" is a class member, then it\u0027s up to that class to call \"Dispose\" on it, ideally in its own \"Dispose\" method. If it\u0027s a local variable, then it should be instantiated with a \"using\" clause to prompt automatic cleanup when it goes out of scope.",
"properties":  {
"severity":  "Warning",
"warningLevel":  "1",
"defaultSeverity":  "Warning",
"title":  "\"IDisposables\" should be disposed",
"category":  "Reliability",
"helpLink":  "http://vs.sonarlint.org/rules/index.html#version=1.7.0\u0026ruleId=S2930",
"isEnabledByDefault":  "True",
"isSuppressedInSource":  "False"
}
},
{
"ruleId":  "S2930",
"locations":  [
{
"analysisTarget":  [
{
"uri":  "Nancy\\src\\Nancy.Tests\\Unit\\Routing\\DefaultRequestDispatcherFixture.cs",
"region":  {
"startLine":  376,
"startColumn":  16,
"endLine":  376,
"endColumn":  23
}
}
]
}
],
"shortMessage":  "\"Dispose\" of \"request\".",
"fullMessage":  "You can\u0027t rely on garbage collection to clean up everything. Specifically, you can\u0027t count on it to release non-memory resources such as \"File\"s. For that, there\u0027s the \"IDisposable\" interface, and the contract that \"Dispose\" will always be called on such objects. When an \"IDisposable\" is a class member, then it\u0027s up to that class to call \"Dispose\" on it, ideally in its own \"Dispose\" method. If it\u0027s a local variable, then it should be instantiated with a \"using\" clause to prompt automatic cleanup when it goes out of scope.",
"properties":  {
"severity":  "Warning",
"warningLevel":  "1",
"defaultSeverity":  "Warning",
"title":  "\"IDisposables\" should be disposed",
"category":  "Reliability",
"helpLink":  "http://vs.sonarlint.org/rules/index.html#version=1.7.0\u0026ruleId=S2930",
"isEnabledByDefault":  "True",
"isSuppressedInSource":  "False"
}
},
{
"ruleId":  "S2930",
"locations":  [
{
"analysisTarget":  [
{
"uri":  "Nancy\\src\\Nancy.Tests\\Unit\\Routing\\DefaultRequestDispatcherFixture.cs",
"region":  {
"startLine":  381,
"startColumn":  16,
"endLine":  381,
"endColumn":  23
}
}
]
}
],
"shortMessage":  "\"Dispose\" of \"context\".",
"fullMessage":  "You can\u0027t rely on garbage collection to clean up everything. Specifically, you can\u0027t count on it to release non-memory resources such as \"File\"s. For that, there\u0027s the \"IDisposable\" interface, and the contract that \"Dispose\" will always be called on such objects. When an \"IDisposable\" is a class member, then it\u0027s up to that class to call \"Dispose\" on it, ideally in its own \"Dispose\" method. If it\u0027s a local variable, then it should be instantiated with a \"using\" clause to prompt automatic cleanup when it goes out of scope.",
"properties":  {
"severity":  "Warning",
"warningLevel":  "1",
"defaultSeverity":  "Warning",
"title":  "\"IDisposables\" should be disposed",
"category":  "Reliability",
"helpLink":  "http://vs.sonarlint.org/rules/index.html#version=1.7.0\u0026ruleId=S2930",
"isEnabledByDefault":  "True",
"isSuppressedInSource":  "False"
}
},
{
"ruleId":  "S2930",
"locations":  [
{
"analysisTarget":  [
{
"uri":  "Nancy\\src\\Nancy.Tests\\Unit\\Routing\\DefaultRequestDispatcherFixture.cs",
"region":  {
"startLine":  412,
"startColumn":  16,
"endLine":  412,
"endColumn":  23
}
}
]
}
],
"shortMessage":  "\"Dispose\" of \"context\".",
"fullMessage":  "You can\u0027t rely on garbage collection to clean up everything. Specifically, you can\u0027t count on it to release non-memory resources such as \"File\"s. For that, there\u0027s the \"IDisposable\" interface, and the contract that \"Dispose\" will always be called on such objects. When an \"IDisposable\" is a class member, then it\u0027s up to that class to call \"Dispose\" on it, ideally in its own \"Dispose\" method. If it\u0027s a local variable, then it should be instantiated with a \"using\" clause to prompt automatic cleanup when it goes out of scope.",
"properties":  {
"severity":  "Warning",
"warningLevel":  "1",
"defaultSeverity":  "Warning",
"title":  "\"IDisposables\" should be disposed",
"category":  "Reliability",
"helpLink":  "http://vs.sonarlint.org/rules/index.html#version=1.7.0\u0026ruleId=S2930",
"isEnabledByDefault":  "True",
"isSuppressedInSource":  "False"
}
},
{
"ruleId":  "S2930",
"locations":  [
{
"analysisTarget":  [
{
"uri":  "Nancy\\src\\Nancy.Tests\\Unit\\Routing\\DefaultRequestDispatcherFixture.cs",
"region":  {
"startLine":  454,
"startColumn":  16,
"endLine":  454,
"endColumn":  23
}
}
]
}
],
"shortMessage":  "\"Dispose\" of \"context\".",
"fullMessage":  "You can\u0027t rely on garbage collection to clean up everything. Specifically, you can\u0027t count on it to release non-memory resources such as \"File\"s. For that, there\u0027s the \"IDisposable\" interface, and the contract that \"Dispose\" will always be called on such objects. When an \"IDisposable\" is a class member, then it\u0027s up to that class to call \"Dispose\" on it, ideally in its own \"Dispose\" method. If it\u0027s a local variable, then it should be instantiated with a \"using\" clause to prompt automatic cleanup when it goes out of scope.",
"properties":  {
"severity":  "Warning",
"warningLevel":  "1",
"defaultSeverity":  "Warning",
"title":  "\"IDisposables\" should be disposed",
"category":  "Reliability",
"helpLink":  "http://vs.sonarlint.org/rules/index.html#version=1.7.0\u0026ruleId=S2930",
"isEnabledByDefault":  "True",
"isSuppressedInSource":  "False"
}
},
{
"ruleId":  "S2930",
"locations":  [
{
"analysisTarget":  [
{
"uri":  "Nancy\\src\\Nancy.Tests\\Unit\\Routing\\DefaultRequestDispatcherFixture.cs",
"region":  {
"startLine":  496,
"startColumn":  16,
"endLine":  496,
"endColumn":  23
}
}
]
}
],
"shortMessage":  "\"Dispose\" of \"context\".",
"fullMessage":  "You can\u0027t rely on garbage collection to clean up everything. Specifically, you can\u0027t count on it to release non-memory resources such as \"File\"s. For that, there\u0027s the \"IDisposable\" interface, and the contract that \"Dispose\" will always be called on such objects. When an \"IDisposable\" is a class member, then it\u0027s up to that class to call \"Dispose\" on it, ideally in its own \"Dispose\" method. If it\u0027s a local variable, then it should be instantiated with a \"using\" clause to prompt automatic cleanup when it goes out of scope.",
"properties":  {
"severity":  "Warning",
"warningLevel":  "1",
"defaultSeverity":  "Warning",
"title":  "\"IDisposables\" should be disposed",
"category":  "Reliability",
"helpLink":  "http://vs.sonarlint.org/rules/index.html#version=1.7.0\u0026ruleId=S2930",
"isEnabledByDefault":  "True",
"isSuppressedInSource":  "False"
}
},
{
"ruleId":  "S2930",
"locations":  [
{
"analysisTarget":  [
{
"uri":  "Nancy\\src\\Nancy.Tests\\Unit\\Routing\\DefaultRequestDispatcherFixture.cs",
"region":  {
"startLine":  527,
"startColumn":  16,
"endLine":  527,
"endColumn":  23
}
}
]
}
],
"shortMessage":  "\"Dispose\" of \"context\".",
"fullMessage":  "You can\u0027t rely on garbage collection to clean up everything. Specifically, you can\u0027t count on it to release non-memory resources such as \"File\"s. For that, there\u0027s the \"IDisposable\" interface, and the contract that \"Dispose\" will always be called on such objects. When an \"IDisposable\" is a class member, then it\u0027s up to that class to call \"Dispose\" on it, ideally in its own \"Dispose\" method. If it\u0027s a local variable, then it should be instantiated with a \"using\" clause to prompt automatic cleanup when it goes out of scope.",
"properties":  {
"severity":  "Warning",
"warningLevel":  "1",
"defaultSeverity":  "Warning",
"title":  "\"IDisposables\" should be disposed",
"category":  "Reliability",
"helpLink":  "http://vs.sonarlint.org/rules/index.html#version=1.7.0\u0026ruleId=S2930",
"isEnabledByDefault":  "True",
"isSuppressedInSource":  "False"
}
},
{
"ruleId":  "S2930",
"locations":  [
{
"analysisTarget":  [
{
"uri":  "Nancy\\src\\Nancy.Tests\\Unit\\Routing\\DefaultRequestDispatcherFixture.cs",
"region":  {
"startLine":  582,
"startColumn":  16,
"endLine":  582,
"endColumn":  23
}
}
]
}
],
"shortMessage":  "\"Dispose\" of \"context\".",
"fullMessage":  "You can\u0027t rely on garbage collection to clean up everything. Specifically, you can\u0027t count on it to release non-memory resources such as \"File\"s. For that, there\u0027s the \"IDisposable\" interface, and the contract that \"Dispose\" will always be called on such objects. When an \"IDisposable\" is a class member, then it\u0027s up to that class to call \"Dispose\" on it, ideally in its own \"Dispose\" method. If it\u0027s a local variable, then it should be instantiated with a \"using\" clause to prompt automatic cleanup when it goes out of scope.",
"properties":  {
"severity":  "Warning",
"warningLevel":  "1",
"defaultSeverity":  "Warning",
"title":  "\"IDisposables\" should be disposed",
"category":  "Reliability",
"helpLink":  "http://vs.sonarlint.org/rules/index.html#version=1.7.0\u0026ruleId=S2930",
"isEnabledByDefault":  "True",
"isSuppressedInSource":  "False"
}
},
{
"ruleId":  "S2930",
"locations":  [
{
"analysisTarget":  [
{
"uri":  "Nancy\\src\\Nancy.Tests\\Unit\\Routing\\DefaultRequestDispatcherFixture.cs",
"region":  {
"startLine":  621,
"startColumn":  16,
"endLine":  621,
"endColumn":  23
}
}
]
}
],
"shortMessage":  "\"Dispose\" of \"context\".",
"fullMessage":  "You can\u0027t rely on garbage collection to clean up everything. Specifically, you can\u0027t count on it to release non-memory resources such as \"File\"s. For that, there\u0027s the \"IDisposable\" interface, and the contract that \"Dispose\" will always be called on such objects. When an \"IDisposable\" is a class member, then it\u0027s up to that class to call \"Dispose\" on it, ideally in its own \"Dispose\" method. If it\u0027s a local variable, then it should be instantiated with a \"using\" clause to prompt automatic cleanup when it goes out of scope.",
"properties":  {
"severity":  "Warning",
"warningLevel":  "1",
"defaultSeverity":  "Warning",
"title":  "\"IDisposables\" should be disposed",
"category":  "Reliability",
"helpLink":  "http://vs.sonarlint.org/rules/index.html#version=1.7.0\u0026ruleId=S2930",
"isEnabledByDefault":  "True",
"isSuppressedInSource":  "False"
}
},
{
"ruleId":  "S2930",
"locations":  [
{
"analysisTarget":  [
{
"uri":  "Nancy\\src\\Nancy.Tests\\Unit\\Routing\\DefaultRequestDispatcherFixture.cs",
"region":  {
"startLine":  650,
"startColumn":  16,
"endLine":  650,
"endColumn":  23
}
}
]
}
],
"shortMessage":  "\"Dispose\" of \"context\".",
"fullMessage":  "You can\u0027t rely on garbage collection to clean up everything. Specifically, you can\u0027t count on it to release non-memory resources such as \"File\"s. For that, there\u0027s the \"IDisposable\" interface, and the contract that \"Dispose\" will always be called on such objects. When an \"IDisposable\" is a class member, then it\u0027s up to that class to call \"Dispose\" on it, ideally in its own \"Dispose\" method. If it\u0027s a local variable, then it should be instantiated with a \"using\" clause to prompt automatic cleanup when it goes out of scope.",
"properties":  {
"severity":  "Warning",
"warningLevel":  "1",
"defaultSeverity":  "Warning",
"title":  "\"IDisposables\" should be disposed",
"category":  "Reliability",
"helpLink":  "http://vs.sonarlint.org/rules/index.html#version=1.7.0\u0026ruleId=S2930",
"isEnabledByDefault":  "True",
"isSuppressedInSource":  "False"
}
},
{
"ruleId":  "S2930",
"locations":  [
{
"analysisTarget":  [
{
"uri":  "Nancy\\src\\Nancy.Tests\\Unit\\Routing\\DefaultRequestDispatcherFixture.cs",
"region":  {
"startLine":  688,
"startColumn":  16,
"endLine":  688,
"endColumn":  23
}
}
]
}
],
"shortMessage":  "\"Dispose\" of \"context\".",
"fullMessage":  "You can\u0027t rely on garbage collection to clean up everything. Specifically, you can\u0027t count on it to release non-memory resources such as \"File\"s. For that, there\u0027s the \"IDisposable\" interface, and the contract that \"Dispose\" will always be called on such objects. When an \"IDisposable\" is a class member, then it\u0027s up to that class to call \"Dispose\" on it, ideally in its own \"Dispose\" method. If it\u0027s a local variable, then it should be instantiated with a \"using\" clause to prompt automatic cleanup when it goes out of scope.",
"properties":  {
"severity":  "Warning",
"warningLevel":  "1",
"defaultSeverity":  "Warning",
"title":  "\"IDisposables\" should be disposed",
"category":  "Reliability",
"helpLink":  "http://vs.sonarlint.org/rules/index.html#version=1.7.0\u0026ruleId=S2930",
"isEnabledByDefault":  "True",
"isSuppressedInSource":  "False"
}
},
{
"ruleId":  "S2930",
"locations":  [
{
"analysisTarget":  [
{
"uri":  "Nancy\\src\\Nancy.Tests\\Unit\\Routing\\DefaultRequestDispatcherFixture.cs",
"region":  {
"startLine":  716,
"startColumn":  16,
"endLine":  716,
"endColumn":  23
}
}
]
}
],
"shortMessage":  "\"Dispose\" of \"context\".",
"fullMessage":  "You can\u0027t rely on garbage collection to clean up everything. Specifically, you can\u0027t count on it to release non-memory resources such as \"File\"s. For that, there\u0027s the \"IDisposable\" interface, and the contract that \"Dispose\" will always be called on such objects. When an \"IDisposable\" is a class member, then it\u0027s up to that class to call \"Dispose\" on it, ideally in its own \"Dispose\" method. If it\u0027s a local variable, then it should be instantiated with a \"using\" clause to prompt automatic cleanup when it goes out of scope.",
"properties":  {
"severity":  "Warning",
"warningLevel":  "1",
"defaultSeverity":  "Warning",
"title":  "\"IDisposables\" should be disposed",
"category":  "Reliability",
"helpLink":  "http://vs.sonarlint.org/rules/index.html#version=1.7.0\u0026ruleId=S2930",
"isEnabledByDefault":  "True",
"isSuppressedInSource":  "False"
}
},
{
"ruleId":  "S2930",
"locations":  [
{
"analysisTarget":  [
{
"uri":  "Nancy\\src\\Nancy.Tests\\Unit\\Routing\\DefaultRequestDispatcherFixture.cs",
"region":  {
"startLine":  770,
"startColumn":  16,
"endLine":  770,
"endColumn":  23
}
}
]
}
],
"shortMessage":  "\"Dispose\" of \"context\".",
"fullMessage":  "You can\u0027t rely on garbage collection to clean up everything. Specifically, you can\u0027t count on it to release non-memory resources such as \"File\"s. For that, there\u0027s the \"IDisposable\" interface, and the contract that \"Dispose\" will always be called on such objects. When an \"IDisposable\" is a class member, then it\u0027s up to that class to call \"Dispose\" on it, ideally in its own \"Dispose\" method. If it\u0027s a local variable, then it should be instantiated with a \"using\" clause to prompt automatic cleanup when it goes out of scope.",
"properties":  {
"severity":  "Warning",
"warningLevel":  "1",
"defaultSeverity":  "Warning",
"title":  "\"IDisposables\" should be disposed",
"category":  "Reliability",
"helpLink":  "http://vs.sonarlint.org/rules/index.html#version=1.7.0\u0026ruleId=S2930",
"isEnabledByDefault":  "True",
"isSuppressedInSource":  "False"
}
},
{
"ruleId":  "S2930",
"locations":  [
{
"analysisTarget":  [
{
"uri":  "Nancy\\src\\Nancy.Tests\\Unit\\Routing\\DefaultRequestDispatcherFixture.cs",
"region":  {
"startLine":  812,
"startColumn":  16,
"endLine":  812,
"endColumn":  23
}
}
]
}
],
"shortMessage":  "\"Dispose\" of \"context\".",
"fullMessage":  "You can\u0027t rely on garbage collection to clean up everything. Specifically, you can\u0027t count on it to release non-memory resources such as \"File\"s. For that, there\u0027s the \"IDisposable\" interface, and the contract that \"Dispose\" will always be called on such objects. When an \"IDisposable\" is a class member, then it\u0027s up to that class to call \"Dispose\" on it, ideally in its own \"Dispose\" method. If it\u0027s a local variable, then it should be instantiated with a \"using\" clause to prompt automatic cleanup when it goes out of scope.",
"properties":  {
"severity":  "Warning",
"warningLevel":  "1",
"defaultSeverity":  "Warning",
"title":  "\"IDisposables\" should be disposed",
"category":  "Reliability",
"helpLink":  "http://vs.sonarlint.org/rules/index.html#version=1.7.0\u0026ruleId=S2930",
"isEnabledByDefault":  "True",
"isSuppressedInSource":  "False"
}
},
{
"ruleId":  "S2930",
"locations":  [
{
"analysisTarget":  [
{
"uri":  "Nancy\\src\\Nancy.Tests\\Unit\\Routing\\DefaultRequestDispatcherFixture.cs",
"region":  {
"startLine":  854,
"startColumn":  16,
"endLine":  854,
"endColumn":  23
}
}
]
}
],
"shortMessage":  "\"Dispose\" of \"context\".",
"fullMessage":  "You can\u0027t rely on garbage collection to clean up everything. Specifically, you can\u0027t count on it to release non-memory resources such as \"File\"s. For that, there\u0027s the \"IDisposable\" interface, and the contract that \"Dispose\" will always be called on such objects. When an \"IDisposable\" is a class member, then it\u0027s up to that class to call \"Dispose\" on it, ideally in its own \"Dispose\" method. If it\u0027s a local variable, then it should be instantiated with a \"using\" clause to prompt automatic cleanup when it goes out of scope.",
"properties":  {
"severity":  "Warning",
"warningLevel":  "1",
"defaultSeverity":  "Warning",
"title":  "\"IDisposables\" should be disposed",
"category":  "Reliability",
"helpLink":  "http://vs.sonarlint.org/rules/index.html#version=1.7.0\u0026ruleId=S2930",
"isEnabledByDefault":  "True",
"isSuppressedInSource":  "False"
}
},
{
"ruleId":  "S2930",
"locations":  [
{
"analysisTarget":  [
{
"uri":  "Nancy\\src\\Nancy.Tests\\Unit\\Routing\\DefaultRequestDispatcherFixture.cs",
"region":  {
"startLine":  889,
"startColumn":  16,
"endLine":  889,
"endColumn":  23
}
}
]
}
],
"shortMessage":  "\"Dispose\" of \"context\".",
"fullMessage":  "You can\u0027t rely on garbage collection to clean up everything. Specifically, you can\u0027t count on it to release non-memory resources such as \"File\"s. For that, there\u0027s the \"IDisposable\" interface, and the contract that \"Dispose\" will always be called on such objects. When an \"IDisposable\" is a class member, then it\u0027s up to that class to call \"Dispose\" on it, ideally in its own \"Dispose\" method. If it\u0027s a local variable, then it should be instantiated with a \"using\" clause to prompt automatic cleanup when it goes out of scope.",
"properties":  {
"severity":  "Warning",
"warningLevel":  "1",
"defaultSeverity":  "Warning",
"title":  "\"IDisposables\" should be disposed",
"category":  "Reliability",
"helpLink":  "http://vs.sonarlint.org/rules/index.html#version=1.7.0\u0026ruleId=S2930",
"isEnabledByDefault":  "True",
"isSuppressedInSource":  "False"
}
},
{
"ruleId":  "S2930",
"locations":  [
{
"analysisTarget":  [
{
"uri":  "Nancy\\src\\Nancy.Tests\\Unit\\Routing\\DefaultRequestDispatcherFixture.cs",
"region":  {
"startLine":  923,
"startColumn":  16,
"endLine":  923,
"endColumn":  23
}
}
]
}
],
"shortMessage":  "\"Dispose\" of \"context\".",
"fullMessage":  "You can\u0027t rely on garbage collection to clean up everything. Specifically, you can\u0027t count on it to release non-memory resources such as \"File\"s. For that, there\u0027s the \"IDisposable\" interface, and the contract that \"Dispose\" will always be called on such objects. When an \"IDisposable\" is a class member, then it\u0027s up to that class to call \"Dispose\" on it, ideally in its own \"Dispose\" method. If it\u0027s a local variable, then it should be instantiated with a \"using\" clause to prompt automatic cleanup when it goes out of scope.",
"properties":  {
"severity":  "Warning",
"warningLevel":  "1",
"defaultSeverity":  "Warning",
"title":  "\"IDisposables\" should be disposed",
"category":  "Reliability",
"helpLink":  "http://vs.sonarlint.org/rules/index.html#version=1.7.0\u0026ruleId=S2930",
"isEnabledByDefault":  "True",
"isSuppressedInSource":  "False"
}
},
{
"ruleId":  "S2930",
"locations":  [
{
"analysisTarget":  [
{
"uri":  "Nancy\\src\\Nancy.Tests\\Unit\\Routing\\DefaultRequestDispatcherFixture.cs",
"region":  {
"startLine":  958,
"startColumn":  16,
"endLine":  958,
"endColumn":  23
}
}
]
}
],
"shortMessage":  "\"Dispose\" of \"context\".",
"fullMessage":  "You can\u0027t rely on garbage collection to clean up everything. Specifically, you can\u0027t count on it to release non-memory resources such as \"File\"s. For that, there\u0027s the \"IDisposable\" interface, and the contract that \"Dispose\" will always be called on such objects. When an \"IDisposable\" is a class member, then it\u0027s up to that class to call \"Dispose\" on it, ideally in its own \"Dispose\" method. If it\u0027s a local variable, then it should be instantiated with a \"using\" clause to prompt automatic cleanup when it goes out of scope.",
"properties":  {
"severity":  "Warning",
"warningLevel":  "1",
"defaultSeverity":  "Warning",
"title":  "\"IDisposables\" should be disposed",
"category":  "Reliability",
"helpLink":  "http://vs.sonarlint.org/rules/index.html#version=1.7.0\u0026ruleId=S2930",
"isEnabledByDefault":  "True",
"isSuppressedInSource":  "False"
}
},
{
"ruleId":  "S2930",
"locations":  [
{
"analysisTarget":  [
{
"uri":  "Nancy\\src\\Nancy.Tests\\Unit\\Routing\\DefaultRouteInvokerFixture.cs",
"region":  {
"startLine":  31,
"startColumn":  16,
"endLine":  31,
"endColumn":  23
}
}
]
}
],
"shortMessage":  "\"Dispose\" of \"context\".",
"fullMessage":  "You can\u0027t rely on garbage collection to clean up everything. Specifically, you can\u0027t count on it to release non-memory resources such as \"File\"s. For that, there\u0027s the \"IDisposable\" interface, and the contract that \"Dispose\" will always be called on such objects. When an \"IDisposable\" is a class member, then it\u0027s up to that class to call \"Dispose\" on it, ideally in its own \"Dispose\" method. If it\u0027s a local variable, then it should be instantiated with a \"using\" clause to prompt automatic cleanup when it goes out of scope.",
"properties":  {
"severity":  "Warning",
"warningLevel":  "1",
"defaultSeverity":  "Warning",
"title":  "\"IDisposables\" should be disposed",
"category":  "Reliability",
"helpLink":  "http://vs.sonarlint.org/rules/index.html#version=1.7.0\u0026ruleId=S2930",
"isEnabledByDefault":  "True",
"isSuppressedInSource":  "False"
}
},
{
"ruleId":  "S2930",
"locations":  [
{
"analysisTarget":  [
{
"uri":  "Nancy\\src\\Nancy.Tests\\Unit\\Routing\\DefaultRouteInvokerFixture.cs",
"region":  {
"startLine":  50,
"startColumn":  16,
"endLine":  50,
"endColumn":  24
}
}
]
}
],
"shortMessage":  "\"Dispose\" of \"response\".",
"fullMessage":  "You can\u0027t rely on garbage collection to clean up everything. Specifically, you can\u0027t count on it to release non-memory resources such as \"File\"s. For that, there\u0027s the \"IDisposable\" interface, and the contract that \"Dispose\" will always be called on such objects. When an \"IDisposable\" is a class member, then it\u0027s up to that class to call \"Dispose\" on it, ideally in its own \"Dispose\" method. If it\u0027s a local variable, then it should be instantiated with a \"using\" clause to prompt automatic cleanup when it goes out of scope.",
"properties":  {
"severity":  "Warning",
"warningLevel":  "1",
"defaultSeverity":  "Warning",
"title":  "\"IDisposables\" should be disposed",
"category":  "Reliability",
"helpLink":  "http://vs.sonarlint.org/rules/index.html#version=1.7.0\u0026ruleId=S2930",
"isEnabledByDefault":  "True",
"isSuppressedInSource":  "False"
}
},
{
"ruleId":  "S2930",
"locations":  [
{
"analysisTarget":  [
{
"uri":  "Nancy\\src\\Nancy.Tests\\Unit\\Routing\\DefaultRouteInvokerFixture.cs",
"region":  {
"startLine":  53,
"startColumn":  16,
"endLine":  53,
"endColumn":  23
}
}
]
}
],
"shortMessage":  "\"Dispose\" of \"context\".",
"fullMessage":  "You can\u0027t rely on garbage collection to clean up everything. Specifically, you can\u0027t count on it to release non-memory resources such as \"File\"s. For that, there\u0027s the \"IDisposable\" interface, and the contract that \"Dispose\" will always be called on such objects. When an \"IDisposable\" is a class member, then it\u0027s up to that class to call \"Dispose\" on it, ideally in its own \"Dispose\" method. If it\u0027s a local variable, then it should be instantiated with a \"using\" clause to prompt automatic cleanup when it goes out of scope.",
"properties":  {
"severity":  "Warning",
"warningLevel":  "1",
"defaultSeverity":  "Warning",
"title":  "\"IDisposables\" should be disposed",
"category":  "Reliability",
"helpLink":  "http://vs.sonarlint.org/rules/index.html#version=1.7.0\u0026ruleId=S2930",
"isEnabledByDefault":  "True",
"isSuppressedInSource":  "False"
}
},
{
"ruleId":  "S2930",
"locations":  [
{
"analysisTarget":  [
{
"uri":  "Nancy\\src\\Nancy.Tests\\Unit\\Routing\\DefaultRouteInvokerFixture.cs",
"region":  {
"startLine":  72,
"startColumn":  16,
"endLine":  72,
"endColumn":  24
}
}
]
}
],
"shortMessage":  "\"Dispose\" of \"response\".",
"fullMessage":  "You can\u0027t rely on garbage collection to clean up everything. Specifically, you can\u0027t count on it to release non-memory resources such as \"File\"s. For that, there\u0027s the \"IDisposable\" interface, and the contract that \"Dispose\" will always be called on such objects. When an \"IDisposable\" is a class member, then it\u0027s up to that class to call \"Dispose\" on it, ideally in its own \"Dispose\" method. If it\u0027s a local variable, then it should be instantiated with a \"using\" clause to prompt automatic cleanup when it goes out of scope.",
"properties":  {
"severity":  "Warning",
"warningLevel":  "1",
"defaultSeverity":  "Warning",
"title":  "\"IDisposables\" should be disposed",
"category":  "Reliability",
"helpLink":  "http://vs.sonarlint.org/rules/index.html#version=1.7.0\u0026ruleId=S2930",
"isEnabledByDefault":  "True",
"isSuppressedInSource":  "False"
}
},
{
"ruleId":  "S2930",
"locations":  [
{
"analysisTarget":  [
{
"uri":  "Nancy\\src\\Nancy.Tests\\Unit\\Routing\\DefaultRouteInvokerFixture.cs",
"region":  {
"startLine":  75,
"startColumn":  16,
"endLine":  75,
"endColumn":  23
}
}
]
}
],
"shortMessage":  "\"Dispose\" of \"context\".",
"fullMessage":  "You can\u0027t rely on garbage collection to clean up everything. Specifically, you can\u0027t count on it to release non-memory resources such as \"File\"s. For that, there\u0027s the \"IDisposable\" interface, and the contract that \"Dispose\" will always be called on such objects. When an \"IDisposable\" is a class member, then it\u0027s up to that class to call \"Dispose\" on it, ideally in its own \"Dispose\" method. If it\u0027s a local variable, then it should be instantiated with a \"using\" clause to prompt automatic cleanup when it goes out of scope.",
"properties":  {
"severity":  "Warning",
"warningLevel":  "1",
"defaultSeverity":  "Warning",
"title":  "\"IDisposables\" should be disposed",
"category":  "Reliability",
"helpLink":  "http://vs.sonarlint.org/rules/index.html#version=1.7.0\u0026ruleId=S2930",
"isEnabledByDefault":  "True",
"isSuppressedInSource":  "False"
}
},
{
"ruleId":  "S2930",
"locations":  [
{
"analysisTarget":  [
{
"uri":  "Nancy\\src\\Nancy.Tests\\Unit\\Routing\\DefaultRouteInvokerFixture.cs",
"region":  {
"startLine":  97,
"startColumn":  16,
"endLine":  97,
"endColumn":  23
}
}
]
}
],
"shortMessage":  "\"Dispose\" of \"context\".",
"fullMessage":  "You can\u0027t rely on garbage collection to clean up everything. Specifically, you can\u0027t count on it to release non-memory resources such as \"File\"s. For that, there\u0027s the \"IDisposable\" interface, and the contract that \"Dispose\" will always be called on such objects. When an \"IDisposable\" is a class member, then it\u0027s up to that class to call \"Dispose\" on it, ideally in its own \"Dispose\" method. If it\u0027s a local variable, then it should be instantiated with a \"using\" clause to prompt automatic cleanup when it goes out of scope.",
"properties":  {
"severity":  "Warning",
"warningLevel":  "1",
"defaultSeverity":  "Warning",
"title":  "\"IDisposables\" should be disposed",
"category":  "Reliability",
"helpLink":  "http://vs.sonarlint.org/rules/index.html#version=1.7.0\u0026ruleId=S2930",
"isEnabledByDefault":  "True",
"isSuppressedInSource":  "False"
}
},
{
"ruleId":  "S2930",
"locations":  [
{
"analysisTarget":  [
{
"uri":  "Nancy\\src\\Nancy.Tests\\Unit\\Routing\\DefaultRouteInvokerFixture.cs",
"region":  {
"startLine":  116,
"startColumn":  16,
"endLine":  116,
"endColumn":  23
}
}
]
}
],
"shortMessage":  "\"Dispose\" of \"context\".",
"fullMessage":  "You can\u0027t rely on garbage collection to clean up everything. Specifically, you can\u0027t count on it to release non-memory resources such as \"File\"s. For that, there\u0027s the \"IDisposable\" interface, and the contract that \"Dispose\" will always be called on such objects. When an \"IDisposable\" is a class member, then it\u0027s up to that class to call \"Dispose\" on it, ideally in its own \"Dispose\" method. If it\u0027s a local variable, then it should be instantiated with a \"using\" clause to prompt automatic cleanup when it goes out of scope.",
"properties":  {
"severity":  "Warning",
"warningLevel":  "1",
"defaultSeverity":  "Warning",
"title":  "\"IDisposables\" should be disposed",
"category":  "Reliability",
"helpLink":  "http://vs.sonarlint.org/rules/index.html#version=1.7.0\u0026ruleId=S2930",
"isEnabledByDefault":  "True",
"isSuppressedInSource":  "False"
}
},
{
"ruleId":  "S2930",
"locations":  [
{
"analysisTarget":  [
{
"uri":  "Nancy\\src\\Nancy.Tests\\Unit\\Routing\\DefaultRoutePatternMatcherFixture.cs",
"region":  {
"startLine":  61,
"startColumn":  16,
"endLine":  61,
"endColumn":  23
}
}
]
}
],
"shortMessage":  "\"Dispose\" of \"context\".",
"fullMessage":  "You can\u0027t rely on garbage collection to clean up everything. Specifically, you can\u0027t count on it to release non-memory resources such as \"File\"s. For that, there\u0027s the \"IDisposable\" interface, and the contract that \"Dispose\" will always be called on such objects. When an \"IDisposable\" is a class member, then it\u0027s up to that class to call \"Dispose\" on it, ideally in its own \"Dispose\" method. If it\u0027s a local variable, then it should be instantiated with a \"using\" clause to prompt automatic cleanup when it goes out of scope.",
"properties":  {
"severity":  "Warning",
"warningLevel":  "1",
"defaultSeverity":  "Warning",
"title":  "\"IDisposables\" should be disposed",
"category":  "Reliability",
"helpLink":  "http://vs.sonarlint.org/rules/index.html#version=1.7.0\u0026ruleId=S2930",
"isEnabledByDefault":  "True",
"isSuppressedInSource":  "False"
}
},
{
"ruleId":  "S2930",
"locations":  [
{
"analysisTarget":  [
{
"uri":  "Nancy\\src\\Nancy.Tests\\Unit\\Routing\\DefaultRoutePatternMatcherFixture.cs",
"region":  {
"startLine":  74,
"startColumn":  16,
"endLine":  74,
"endColumn":  23
}
}
]
}
],
"shortMessage":  "\"Dispose\" of \"context\".",
"fullMessage":  "You can\u0027t rely on garbage collection to clean up everything. Specifically, you can\u0027t count on it to release non-memory resources such as \"File\"s. For that, there\u0027s the \"IDisposable\" interface, and the contract that \"Dispose\" will always be called on such objects. When an \"IDisposable\" is a class member, then it\u0027s up to that class to call \"Dispose\" on it, ideally in its own \"Dispose\" method. If it\u0027s a local variable, then it should be instantiated with a \"using\" clause to prompt automatic cleanup when it goes out of scope.",
"properties":  {
"severity":  "Warning",
"warningLevel":  "1",
"defaultSeverity":  "Warning",
"title":  "\"IDisposables\" should be disposed",
"category":  "Reliability",
"helpLink":  "http://vs.sonarlint.org/rules/index.html#version=1.7.0\u0026ruleId=S2930",
"isEnabledByDefault":  "True",
"isSuppressedInSource":  "False"
}
},
{
"ruleId":  "S2930",
"locations":  [
{
"analysisTarget":  [
{
"uri":  "Nancy\\src\\Nancy.Tests\\Unit\\Routing\\RouteFixture.cs",
"region":  {
"startLine":  95,
"startColumn":  16,
"endLine":  95,
"endColumn":  32
}
}
]
}
],
"shortMessage":  "\"Dispose\" of \"expectedResponse\".",
"fullMessage":  "You can\u0027t rely on garbage collection to clean up everything. Specifically, you can\u0027t count on it to release non-memory resources such as \"File\"s. For that, there\u0027s the \"IDisposable\" interface, and the contract that \"Dispose\" will always be called on such objects. When an \"IDisposable\" is a class member, then it\u0027s up to that class to call \"Dispose\" on it, ideally in its own \"Dispose\" method. If it\u0027s a local variable, then it should be instantiated with a \"using\" clause to prompt automatic cleanup when it goes out of scope.",
"properties":  {
"severity":  "Warning",
"warningLevel":  "1",
"defaultSeverity":  "Warning",
"title":  "\"IDisposables\" should be disposed",
"category":  "Reliability",
"helpLink":  "http://vs.sonarlint.org/rules/index.html#version=1.7.0\u0026ruleId=S2930",
"isEnabledByDefault":  "True",
"isSuppressedInSource":  "False"
}
},
{
"ruleId":  "S2930",
"locations":  [
{
"analysisTarget":  [
{
"uri":  "Nancy\\src\\Nancy.Tests\\Unit\\Security\\CsrfFixture.cs",
"region":  {
"startLine":  20,
"startColumn":  33,
"endLine":  20,
"endColumn":  40
}
}
]
}
],
"shortMessage":  "\"Dispose\" of \"request\".",
"fullMessage":  "You can\u0027t rely on garbage collection to clean up everything. Specifically, you can\u0027t count on it to release non-memory resources such as \"File\"s. For that, there\u0027s the \"IDisposable\" interface, and the contract that \"Dispose\" will always be called on such objects. When an \"IDisposable\" is a class member, then it\u0027s up to that class to call \"Dispose\" on it, ideally in its own \"Dispose\" method. If it\u0027s a local variable, then it should be instantiated with a \"using\" clause to prompt automatic cleanup when it goes out of scope.",
"properties":  {
"severity":  "Warning",
"warningLevel":  "1",
"defaultSeverity":  "Warning",
"title":  "\"IDisposables\" should be disposed",
"category":  "Reliability",
"helpLink":  "http://vs.sonarlint.org/rules/index.html#version=1.7.0\u0026ruleId=S2930",
"isEnabledByDefault":  "True",
"isSuppressedInSource":  "False"
}
},
{
"ruleId":  "S2930",
"locations":  [
{
"analysisTarget":  [
{
"uri":  "Nancy\\src\\Nancy.Tests\\Unit\\Security\\CsrfFixture.cs",
"region":  {
"startLine":  22,
"startColumn":  37,
"endLine":  22,
"endColumn":  51
}
}
]
}
],
"shortMessage":  "\"Dispose\" of \"optionsRequest\".",
"fullMessage":  "You can\u0027t rely on garbage collection to clean up everything. Specifically, you can\u0027t count on it to release non-memory resources such as \"File\"s. For that, there\u0027s the \"IDisposable\" interface, and the contract that \"Dispose\" will always be called on such objects. When an \"IDisposable\" is a class member, then it\u0027s up to that class to call \"Dispose\" on it, ideally in its own \"Dispose\" method. If it\u0027s a local variable, then it should be instantiated with a \"using\" clause to prompt automatic cleanup when it goes out of scope.",
"properties":  {
"severity":  "Warning",
"warningLevel":  "1",
"defaultSeverity":  "Warning",
"title":  "\"IDisposables\" should be disposed",
"category":  "Reliability",
"helpLink":  "http://vs.sonarlint.org/rules/index.html#version=1.7.0\u0026ruleId=S2930",
"isEnabledByDefault":  "True",
"isSuppressedInSource":  "False"
}
},
{
"ruleId":  "S2930",
"locations":  [
{
"analysisTarget":  [
{
"uri":  "Nancy\\src\\Nancy.Tests\\Unit\\Security\\CsrfFixture.cs",
"region":  {
"startLine":  24,
"startColumn":  34,
"endLine":  24,
"endColumn":  42
}
}
]
}
],
"shortMessage":  "\"Dispose\" of \"response\".",
"fullMessage":  "You can\u0027t rely on garbage collection to clean up everything. Specifically, you can\u0027t count on it to release non-memory resources such as \"File\"s. For that, there\u0027s the \"IDisposable\" interface, and the contract that \"Dispose\" will always be called on such objects. When an \"IDisposable\" is a class member, then it\u0027s up to that class to call \"Dispose\" on it, ideally in its own \"Dispose\" method. If it\u0027s a local variable, then it should be instantiated with a \"using\" clause to prompt automatic cleanup when it goes out of scope.",
"properties":  {
"severity":  "Warning",
"warningLevel":  "1",
"defaultSeverity":  "Warning",
"title":  "\"IDisposables\" should be disposed",
"category":  "Reliability",
"helpLink":  "http://vs.sonarlint.org/rules/index.html#version=1.7.0\u0026ruleId=S2930",
"isEnabledByDefault":  "True",
"isSuppressedInSource":  "False"
}
},
{
"ruleId":  "S2930",
"locations":  [
{
"analysisTarget":  [
{
"uri":  "Nancy\\src\\Nancy.Tests\\Unit\\Security\\CsrfFixture.cs",
"region":  {
"startLine":  195,
"startColumn":  16,
"endLine":  195,
"endColumn":  23
}
}
]
}
],
"shortMessage":  "\"Dispose\" of \"context\".",
"fullMessage":  "You can\u0027t rely on garbage collection to clean up everything. Specifically, you can\u0027t count on it to release non-memory resources such as \"File\"s. For that, there\u0027s the \"IDisposable\" interface, and the contract that \"Dispose\" will always be called on such objects. When an \"IDisposable\" is a class member, then it\u0027s up to that class to call \"Dispose\" on it, ideally in its own \"Dispose\" method. If it\u0027s a local variable, then it should be instantiated with a \"using\" clause to prompt automatic cleanup when it goes out of scope.",
"properties":  {
"severity":  "Warning",
"warningLevel":  "1",
"defaultSeverity":  "Warning",
"title":  "\"IDisposables\" should be disposed",
"category":  "Reliability",
"helpLink":  "http://vs.sonarlint.org/rules/index.html#version=1.7.0\u0026ruleId=S2930",
"isEnabledByDefault":  "True",
"isSuppressedInSource":  "False"
}
},
{
"ruleId":  "S2930",
"locations":  [
{
"analysisTarget":  [
{
"uri":  "Nancy\\src\\Nancy.Tests\\Unit\\Security\\ModuleSecurityFixture.cs",
"region":  {
"startLine":  56,
"startColumn":  16,
"endLine":  56,
"endColumn":  23
}
}
]
}
],
"shortMessage":  "\"Dispose\" of \"context\".",
"fullMessage":  "You can\u0027t rely on garbage collection to clean up everything. Specifically, you can\u0027t count on it to release non-memory resources such as \"File\"s. For that, there\u0027s the \"IDisposable\" interface, and the contract that \"Dispose\" will always be called on such objects. When an \"IDisposable\" is a class member, then it\u0027s up to that class to call \"Dispose\" on it, ideally in its own \"Dispose\" method. If it\u0027s a local variable, then it should be instantiated with a \"using\" clause to prompt automatic cleanup when it goes out of scope.",
"properties":  {
"severity":  "Warning",
"warningLevel":  "1",
"defaultSeverity":  "Warning",
"title":  "\"IDisposables\" should be disposed",
"category":  "Reliability",
"helpLink":  "http://vs.sonarlint.org/rules/index.html#version=1.7.0\u0026ruleId=S2930",
"isEnabledByDefault":  "True",
"isSuppressedInSource":  "False"
}
},
{
"ruleId":  "S2930",
"locations":  [
{
"analysisTarget":  [
{
"uri":  "Nancy\\src\\Nancy.Tests\\Unit\\Security\\ModuleSecurityFixture.cs",
"region":  {
"startLine":  73,
"startColumn":  16,
"endLine":  73,
"endColumn":  23
}
}
]
}
],
"shortMessage":  "\"Dispose\" of \"context\".",
"fullMessage":  "You can\u0027t rely on garbage collection to clean up everything. Specifically, you can\u0027t count on it to release non-memory resources such as \"File\"s. For that, there\u0027s the \"IDisposable\" interface, and the contract that \"Dispose\" will always be called on such objects. When an \"IDisposable\" is a class member, then it\u0027s up to that class to call \"Dispose\" on it, ideally in its own \"Dispose\" method. If it\u0027s a local variable, then it should be instantiated with a \"using\" clause to prompt automatic cleanup when it goes out of scope.",
"properties":  {
"severity":  "Warning",
"warningLevel":  "1",
"defaultSeverity":  "Warning",
"title":  "\"IDisposables\" should be disposed",
"category":  "Reliability",
"helpLink":  "http://vs.sonarlint.org/rules/index.html#version=1.7.0\u0026ruleId=S2930",
"isEnabledByDefault":  "True",
"isSuppressedInSource":  "False"
}
},
{
"ruleId":  "S2930",
"locations":  [
{
"analysisTarget":  [
{
"uri":  "Nancy\\src\\Nancy.Tests\\Unit\\Security\\ModuleSecurityFixture.cs",
"region":  {
"startLine":  88,
"startColumn":  16,
"endLine":  88,
"endColumn":  23
}
}
]
}
],
"shortMessage":  "\"Dispose\" of \"context\".",
"fullMessage":  "You can\u0027t rely on garbage collection to clean up everything. Specifically, you can\u0027t count on it to release non-memory resources such as \"File\"s. For that, there\u0027s the \"IDisposable\" interface, and the contract that \"Dispose\" will always be called on such objects. When an \"IDisposable\" is a class member, then it\u0027s up to that class to call \"Dispose\" on it, ideally in its own \"Dispose\" method. If it\u0027s a local variable, then it should be instantiated with a \"using\" clause to prompt automatic cleanup when it goes out of scope.",
"properties":  {
"severity":  "Warning",
"warningLevel":  "1",
"defaultSeverity":  "Warning",
"title":  "\"IDisposables\" should be disposed",
"category":  "Reliability",
"helpLink":  "http://vs.sonarlint.org/rules/index.html#version=1.7.0\u0026ruleId=S2930",
"isEnabledByDefault":  "True",
"isSuppressedInSource":  "False"
}
},
{
"ruleId":  "S2930",
"locations":  [
{
"analysisTarget":  [
{
"uri":  "Nancy\\src\\Nancy.Tests\\Unit\\Security\\ModuleSecurityFixture.cs",
"region":  {
"startLine":  107,
"startColumn":  16,
"endLine":  107,
"endColumn":  23
}
}
]
}
],
"shortMessage":  "\"Dispose\" of \"context\".",
"fullMessage":  "You can\u0027t rely on garbage collection to clean up everything. Specifically, you can\u0027t count on it to release non-memory resources such as \"File\"s. For that, there\u0027s the \"IDisposable\" interface, and the contract that \"Dispose\" will always be called on such objects. When an \"IDisposable\" is a class member, then it\u0027s up to that class to call \"Dispose\" on it, ideally in its own \"Dispose\" method. If it\u0027s a local variable, then it should be instantiated with a \"using\" clause to prompt automatic cleanup when it goes out of scope.",
"properties":  {
"severity":  "Warning",
"warningLevel":  "1",
"defaultSeverity":  "Warning",
"title":  "\"IDisposables\" should be disposed",
"category":  "Reliability",
"helpLink":  "http://vs.sonarlint.org/rules/index.html#version=1.7.0\u0026ruleId=S2930",
"isEnabledByDefault":  "True",
"isSuppressedInSource":  "False"
}
},
{
"ruleId":  "S2930",
"locations":  [
{
"analysisTarget":  [
{
"uri":  "Nancy\\src\\Nancy.Tests\\Unit\\Security\\ModuleSecurityFixture.cs",
"region":  {
"startLine":  123,
"startColumn":  16,
"endLine":  123,
"endColumn":  23
}
}
]
}
],
"shortMessage":  "\"Dispose\" of \"context\".",
"fullMessage":  "You can\u0027t rely on garbage collection to clean up everything. Specifically, you can\u0027t count on it to release non-memory resources such as \"File\"s. For that, there\u0027s the \"IDisposable\" interface, and the contract that \"Dispose\" will always be called on such objects. When an \"IDisposable\" is a class member, then it\u0027s up to that class to call \"Dispose\" on it, ideally in its own \"Dispose\" method. If it\u0027s a local variable, then it should be instantiated with a \"using\" clause to prompt automatic cleanup when it goes out of scope.",
"properties":  {
"severity":  "Warning",
"warningLevel":  "1",
"defaultSeverity":  "Warning",
"title":  "\"IDisposables\" should be disposed",
"category":  "Reliability",
"helpLink":  "http://vs.sonarlint.org/rules/index.html#version=1.7.0\u0026ruleId=S2930",
"isEnabledByDefault":  "True",
"isSuppressedInSource":  "False"
}
},
{
"ruleId":  "S2930",
"locations":  [
{
"analysisTarget":  [
{
"uri":  "Nancy\\src\\Nancy.Tests\\Unit\\Security\\ModuleSecurityFixture.cs",
"region":  {
"startLine":  141,
"startColumn":  16,
"endLine":  141,
"endColumn":  23
}
}
]
}
],
"shortMessage":  "\"Dispose\" of \"context\".",
"fullMessage":  "You can\u0027t rely on garbage collection to clean up everything. Specifically, you can\u0027t count on it to release non-memory resources such as \"File\"s. For that, there\u0027s the \"IDisposable\" interface, and the contract that \"Dispose\" will always be called on such objects. When an \"IDisposable\" is a class member, then it\u0027s up to that class to call \"Dispose\" on it, ideally in its own \"Dispose\" method. If it\u0027s a local variable, then it should be instantiated with a \"using\" clause to prompt automatic cleanup when it goes out of scope.",
"properties":  {
"severity":  "Warning",
"warningLevel":  "1",
"defaultSeverity":  "Warning",
"title":  "\"IDisposables\" should be disposed",
"category":  "Reliability",
"helpLink":  "http://vs.sonarlint.org/rules/index.html#version=1.7.0\u0026ruleId=S2930",
"isEnabledByDefault":  "True",
"isSuppressedInSource":  "False"
}
},
{
"ruleId":  "S2930",
"locations":  [
{
"analysisTarget":  [
{
"uri":  "Nancy\\src\\Nancy.Tests\\Unit\\Security\\ModuleSecurityFixture.cs",
"region":  {
"startLine":  160,
"startColumn":  16,
"endLine":  160,
"endColumn":  23
}
}
]
}
],
"shortMessage":  "\"Dispose\" of \"context\".",
"fullMessage":  "You can\u0027t rely on garbage collection to clean up everything. Specifically, you can\u0027t count on it to release non-memory resources such as \"File\"s. For that, there\u0027s the \"IDisposable\" interface, and the contract that \"Dispose\" will always be called on such objects. When an \"IDisposable\" is a class member, then it\u0027s up to that class to call \"Dispose\" on it, ideally in its own \"Dispose\" method. If it\u0027s a local variable, then it should be instantiated with a \"using\" clause to prompt automatic cleanup when it goes out of scope.",
"properties":  {
"severity":  "Warning",
"warningLevel":  "1",
"defaultSeverity":  "Warning",
"title":  "\"IDisposables\" should be disposed",
"category":  "Reliability",
"helpLink":  "http://vs.sonarlint.org/rules/index.html#version=1.7.0\u0026ruleId=S2930",
"isEnabledByDefault":  "True",
"isSuppressedInSource":  "False"
}
},
{
"ruleId":  "S2930",
"locations":  [
{
"analysisTarget":  [
{
"uri":  "Nancy\\src\\Nancy.Tests\\Unit\\Security\\ModuleSecurityFixture.cs",
"region":  {
"startLine":  179,
"startColumn":  16,
"endLine":  179,
"endColumn":  23
}
}
]
}
],
"shortMessage":  "\"Dispose\" of \"context\".",
"fullMessage":  "You can\u0027t rely on garbage collection to clean up everything. Specifically, you can\u0027t count on it to release non-memory resources such as \"File\"s. For that, there\u0027s the \"IDisposable\" interface, and the contract that \"Dispose\" will always be called on such objects. When an \"IDisposable\" is a class member, then it\u0027s up to that class to call \"Dispose\" on it, ideally in its own \"Dispose\" method. If it\u0027s a local variable, then it should be instantiated with a \"using\" clause to prompt automatic cleanup when it goes out of scope.",
"properties":  {
"severity":  "Warning",
"warningLevel":  "1",
"defaultSeverity":  "Warning",
"title":  "\"IDisposables\" should be disposed",
"category":  "Reliability",
"helpLink":  "http://vs.sonarlint.org/rules/index.html#version=1.7.0\u0026ruleId=S2930",
"isEnabledByDefault":  "True",
"isSuppressedInSource":  "False"
}
},
{
"ruleId":  "S2930",
"locations":  [
{
"analysisTarget":  [
{
"uri":  "Nancy\\src\\Nancy.Tests\\Unit\\Security\\ModuleSecurityFixture.cs",
"region":  {
"startLine":  195,
"startColumn":  16,
"endLine":  195,
"endColumn":  23
}
}
]
}
],
"shortMessage":  "\"Dispose\" of \"context\".",
"fullMessage":  "You can\u0027t rely on garbage collection to clean up everything. Specifically, you can\u0027t count on it to release non-memory resources such as \"File\"s. For that, there\u0027s the \"IDisposable\" interface, and the contract that \"Dispose\" will always be called on such objects. When an \"IDisposable\" is a class member, then it\u0027s up to that class to call \"Dispose\" on it, ideally in its own \"Dispose\" method. If it\u0027s a local variable, then it should be instantiated with a \"using\" clause to prompt automatic cleanup when it goes out of scope.",
"properties":  {
"severity":  "Warning",
"warningLevel":  "1",
"defaultSeverity":  "Warning",
"title":  "\"IDisposables\" should be disposed",
"category":  "Reliability",
"helpLink":  "http://vs.sonarlint.org/rules/index.html#version=1.7.0\u0026ruleId=S2930",
"isEnabledByDefault":  "True",
"isSuppressedInSource":  "False"
}
},
{
"ruleId":  "S2930",
"locations":  [
{
"analysisTarget":  [
{
"uri":  "Nancy\\src\\Nancy.Tests\\Unit\\Security\\ModuleSecurityFixture.cs",
"region":  {
"startLine":  214,
"startColumn":  16,
"endLine":  214,
"endColumn":  23
}
}
]
}
],
"shortMessage":  "\"Dispose\" of \"context\".",
"fullMessage":  "You can\u0027t rely on garbage collection to clean up everything. Specifically, you can\u0027t count on it to release non-memory resources such as \"File\"s. For that, there\u0027s the \"IDisposable\" interface, and the contract that \"Dispose\" will always be called on such objects. When an \"IDisposable\" is a class member, then it\u0027s up to that class to call \"Dispose\" on it, ideally in its own \"Dispose\" method. If it\u0027s a local variable, then it should be instantiated with a \"using\" clause to prompt automatic cleanup when it goes out of scope.",
"properties":  {
"severity":  "Warning",
"warningLevel":  "1",
"defaultSeverity":  "Warning",
"title":  "\"IDisposables\" should be disposed",
"category":  "Reliability",
"helpLink":  "http://vs.sonarlint.org/rules/index.html#version=1.7.0\u0026ruleId=S2930",
"isEnabledByDefault":  "True",
"isSuppressedInSource":  "False"
}
},
{
"ruleId":  "S2930",
"locations":  [
{
"analysisTarget":  [
{
"uri":  "Nancy\\src\\Nancy.Tests\\Unit\\Security\\ModuleSecurityFixture.cs",
"region":  {
"startLine":  239,
"startColumn":  16,
"endLine":  239,
"endColumn":  23
}
}
]
}
],
"shortMessage":  "\"Dispose\" of \"context\".",
"fullMessage":  "You can\u0027t rely on garbage collection to clean up everything. Specifically, you can\u0027t count on it to release non-memory resources such as \"File\"s. For that, there\u0027s the \"IDisposable\" interface, and the contract that \"Dispose\" will always be called on such objects. When an \"IDisposable\" is a class member, then it\u0027s up to that class to call \"Dispose\" on it, ideally in its own \"Dispose\" method. If it\u0027s a local variable, then it should be instantiated with a \"using\" clause to prompt automatic cleanup when it goes out of scope.",
"properties":  {
"severity":  "Warning",
"warningLevel":  "1",
"defaultSeverity":  "Warning",
"title":  "\"IDisposables\" should be disposed",
"category":  "Reliability",
"helpLink":  "http://vs.sonarlint.org/rules/index.html#version=1.7.0\u0026ruleId=S2930",
"isEnabledByDefault":  "True",
"isSuppressedInSource":  "False"
}
},
{
"ruleId":  "S2930",
"locations":  [
{
"analysisTarget":  [
{
"uri":  "Nancy\\src\\Nancy.Tests\\Unit\\Security\\ModuleSecurityFixture.cs",
"region":  {
"startLine":  264,
"startColumn":  16,
"endLine":  264,
"endColumn":  23
}
}
]
}
],
"shortMessage":  "\"Dispose\" of \"context\".",
"fullMessage":  "You can\u0027t rely on garbage collection to clean up everything. Specifically, you can\u0027t count on it to release non-memory resources such as \"File\"s. For that, there\u0027s the \"IDisposable\" interface, and the contract that \"Dispose\" will always be called on such objects. When an \"IDisposable\" is a class member, then it\u0027s up to that class to call \"Dispose\" on it, ideally in its own \"Dispose\" method. If it\u0027s a local variable, then it should be instantiated with a \"using\" clause to prompt automatic cleanup when it goes out of scope.",
"properties":  {
"severity":  "Warning",
"warningLevel":  "1",
"defaultSeverity":  "Warning",
"title":  "\"IDisposables\" should be disposed",
"category":  "Reliability",
"helpLink":  "http://vs.sonarlint.org/rules/index.html#version=1.7.0\u0026ruleId=S2930",
"isEnabledByDefault":  "True",
"isSuppressedInSource":  "False"
}
},
{
"ruleId":  "S2930",
"locations":  [
{
"analysisTarget":  [
{
"uri":  "Nancy\\src\\Nancy.Tests\\Unit\\Security\\ModuleSecurityFixture.cs",
"region":  {
"startLine":  285,
"startColumn":  16,
"endLine":  285,
"endColumn":  23
}
}
]
}
],
"shortMessage":  "\"Dispose\" of \"context\".",
"fullMessage":  "You can\u0027t rely on garbage collection to clean up everything. Specifically, you can\u0027t count on it to release non-memory resources such as \"File\"s. For that, there\u0027s the \"IDisposable\" interface, and the contract that \"Dispose\" will always be called on such objects. When an \"IDisposable\" is a class member, then it\u0027s up to that class to call \"Dispose\" on it, ideally in its own \"Dispose\" method. If it\u0027s a local variable, then it should be instantiated with a \"using\" clause to prompt automatic cleanup when it goes out of scope.",
"properties":  {
"severity":  "Warning",
"warningLevel":  "1",
"defaultSeverity":  "Warning",
"title":  "\"IDisposables\" should be disposed",
"category":  "Reliability",
"helpLink":  "http://vs.sonarlint.org/rules/index.html#version=1.7.0\u0026ruleId=S2930",
"isEnabledByDefault":  "True",
"isSuppressedInSource":  "False"
}
},
{
"ruleId":  "S2930",
"locations":  [
{
"analysisTarget":  [
{
"uri":  "Nancy\\src\\Nancy.Tests\\Unit\\Security\\ModuleSecurityFixture.cs",
"region":  {
"startLine":  306,
"startColumn":  16,
"endLine":  306,
"endColumn":  23
}
}
]
}
],
"shortMessage":  "\"Dispose\" of \"context\".",
"fullMessage":  "You can\u0027t rely on garbage collection to clean up everything. Specifically, you can\u0027t count on it to release non-memory resources such as \"File\"s. For that, there\u0027s the \"IDisposable\" interface, and the contract that \"Dispose\" will always be called on such objects. When an \"IDisposable\" is a class member, then it\u0027s up to that class to call \"Dispose\" on it, ideally in its own \"Dispose\" method. If it\u0027s a local variable, then it should be instantiated with a \"using\" clause to prompt automatic cleanup when it goes out of scope.",
"properties":  {
"severity":  "Warning",
"warningLevel":  "1",
"defaultSeverity":  "Warning",
"title":  "\"IDisposables\" should be disposed",
"category":  "Reliability",
"helpLink":  "http://vs.sonarlint.org/rules/index.html#version=1.7.0\u0026ruleId=S2930",
"isEnabledByDefault":  "True",
"isSuppressedInSource":  "False"
}
},
{
"ruleId":  "S2930",
"locations":  [
{
"analysisTarget":  [
{
"uri":  "Nancy\\src\\Nancy.Tests\\Unit\\Security\\ModuleSecurityFixture.cs",
"region":  {
"startLine":  327,
"startColumn":  16,
"endLine":  327,
"endColumn":  23
}
}
]
}
],
"shortMessage":  "\"Dispose\" of \"context\".",
"fullMessage":  "You can\u0027t rely on garbage collection to clean up everything. Specifically, you can\u0027t count on it to release non-memory resources such as \"File\"s. For that, there\u0027s the \"IDisposable\" interface, and the contract that \"Dispose\" will always be called on such objects. When an \"IDisposable\" is a class member, then it\u0027s up to that class to call \"Dispose\" on it, ideally in its own \"Dispose\" method. If it\u0027s a local variable, then it should be instantiated with a \"using\" clause to prompt automatic cleanup when it goes out of scope.",
"properties":  {
"severity":  "Warning",
"warningLevel":  "1",
"defaultSeverity":  "Warning",
"title":  "\"IDisposables\" should be disposed",
"category":  "Reliability",
"helpLink":  "http://vs.sonarlint.org/rules/index.html#version=1.7.0\u0026ruleId=S2930",
"isEnabledByDefault":  "True",
"isSuppressedInSource":  "False"
}
},
{
"ruleId":  "S2930",
"locations":  [
{
"analysisTarget":  [
{
"uri":  "Nancy\\src\\Nancy.Tests\\Unit\\Security\\ModuleSecurityFixture.cs",
"region":  {
"startLine":  348,
"startColumn":  16,
"endLine":  348,
"endColumn":  23
}
}
]
}
],
"shortMessage":  "\"Dispose\" of \"context\".",
"fullMessage":  "You can\u0027t rely on garbage collection to clean up everything. Specifically, you can\u0027t count on it to release non-memory resources such as \"File\"s. For that, there\u0027s the \"IDisposable\" interface, and the contract that \"Dispose\" will always be called on such objects. When an \"IDisposable\" is a class member, then it\u0027s up to that class to call \"Dispose\" on it, ideally in its own \"Dispose\" method. If it\u0027s a local variable, then it should be instantiated with a \"using\" clause to prompt automatic cleanup when it goes out of scope.",
"properties":  {
"severity":  "Warning",
"warningLevel":  "1",
"defaultSeverity":  "Warning",
"title":  "\"IDisposables\" should be disposed",
"category":  "Reliability",
"helpLink":  "http://vs.sonarlint.org/rules/index.html#version=1.7.0\u0026ruleId=S2930",
"isEnabledByDefault":  "True",
"isSuppressedInSource":  "False"
}
},
{
"ruleId":  "S2930",
"locations":  [
{
"analysisTarget":  [
{
"uri":  "Nancy\\src\\Nancy.Tests\\Unit\\Security\\ModuleSecurityFixture.cs",
"region":  {
"startLine":  368,
"startColumn":  16,
"endLine":  368,
"endColumn":  23
}
}
]
}
],
"shortMessage":  "\"Dispose\" of \"context\".",
"fullMessage":  "You can\u0027t rely on garbage collection to clean up everything. Specifically, you can\u0027t count on it to release non-memory resources such as \"File\"s. For that, there\u0027s the \"IDisposable\" interface, and the contract that \"Dispose\" will always be called on such objects. When an \"IDisposable\" is a class member, then it\u0027s up to that class to call \"Dispose\" on it, ideally in its own \"Dispose\" method. If it\u0027s a local variable, then it should be instantiated with a \"using\" clause to prompt automatic cleanup when it goes out of scope.",
"properties":  {
"severity":  "Warning",
"warningLevel":  "1",
"defaultSeverity":  "Warning",
"title":  "\"IDisposables\" should be disposed",
"category":  "Reliability",
"helpLink":  "http://vs.sonarlint.org/rules/index.html#version=1.7.0\u0026ruleId=S2930",
"isEnabledByDefault":  "True",
"isSuppressedInSource":  "False"
}
},
{
"ruleId":  "S2930",
"locations":  [
{
"analysisTarget":  [
{
"uri":  "Nancy\\src\\Nancy.Tests\\Unit\\Security\\SSLProxyFixture.cs",
"region":  {
"startLine":  25,
"startColumn":  16,
"endLine":  25,
"endColumn":  23
}
}
]
}
],
"shortMessage":  "\"Dispose\" of \"request\".",
"fullMessage":  "You can\u0027t rely on garbage collection to clean up everything. Specifically, you can\u0027t count on it to release non-memory resources such as \"File\"s. For that, there\u0027s the \"IDisposable\" interface, and the contract that \"Dispose\" will always be called on such objects. When an \"IDisposable\" is a class member, then it\u0027s up to that class to call \"Dispose\" on it, ideally in its own \"Dispose\" method. If it\u0027s a local variable, then it should be instantiated with a \"using\" clause to prompt automatic cleanup when it goes out of scope.",
"properties":  {
"severity":  "Warning",
"warningLevel":  "1",
"defaultSeverity":  "Warning",
"title":  "\"IDisposables\" should be disposed",
"category":  "Reliability",
"helpLink":  "http://vs.sonarlint.org/rules/index.html#version=1.7.0\u0026ruleId=S2930",
"isEnabledByDefault":  "True",
"isSuppressedInSource":  "False"
}
},
{
"ruleId":  "S2930",
"locations":  [
{
"analysisTarget":  [
{
"uri":  "Nancy\\src\\Nancy.Tests\\Unit\\Security\\SSLProxyFixture.cs",
"region":  {
"startLine":  28,
"startColumn":  16,
"endLine":  28,
"endColumn":  23
}
}
]
}
],
"shortMessage":  "\"Dispose\" of \"context\".",
"fullMessage":  "You can\u0027t rely on garbage collection to clean up everything. Specifically, you can\u0027t count on it to release non-memory resources such as \"File\"s. For that, there\u0027s the \"IDisposable\" interface, and the contract that \"Dispose\" will always be called on such objects. When an \"IDisposable\" is a class member, then it\u0027s up to that class to call \"Dispose\" on it, ideally in its own \"Dispose\" method. If it\u0027s a local variable, then it should be instantiated with a \"using\" clause to prompt automatic cleanup when it goes out of scope.",
"properties":  {
"severity":  "Warning",
"warningLevel":  "1",
"defaultSeverity":  "Warning",
"title":  "\"IDisposables\" should be disposed",
"category":  "Reliability",
"helpLink":  "http://vs.sonarlint.org/rules/index.html#version=1.7.0\u0026ruleId=S2930",
"isEnabledByDefault":  "True",
"isSuppressedInSource":  "False"
}
},
{
"ruleId":  "S2930",
"locations":  [
{
"analysisTarget":  [
{
"uri":  "Nancy\\src\\Nancy.Tests\\Unit\\Security\\SSLProxyFixture.cs",
"region":  {
"startLine":  38,
"startColumn":  16,
"endLine":  38,
"endColumn":  23
}
}
]
}
],
"shortMessage":  "\"Dispose\" of \"request\".",
"fullMessage":  "You can\u0027t rely on garbage collection to clean up everything. Specifically, you can\u0027t count on it to release non-memory resources such as \"File\"s. For that, there\u0027s the \"IDisposable\" interface, and the contract that \"Dispose\" will always be called on such objects. When an \"IDisposable\" is a class member, then it\u0027s up to that class to call \"Dispose\" on it, ideally in its own \"Dispose\" method. If it\u0027s a local variable, then it should be instantiated with a \"using\" clause to prompt automatic cleanup when it goes out of scope.",
"properties":  {
"severity":  "Warning",
"warningLevel":  "1",
"defaultSeverity":  "Warning",
"title":  "\"IDisposables\" should be disposed",
"category":  "Reliability",
"helpLink":  "http://vs.sonarlint.org/rules/index.html#version=1.7.0\u0026ruleId=S2930",
"isEnabledByDefault":  "True",
"isSuppressedInSource":  "False"
}
},
{
"ruleId":  "S2930",
"locations":  [
{
"analysisTarget":  [
{
"uri":  "Nancy\\src\\Nancy.Tests\\Unit\\Security\\SSLProxyFixture.cs",
"region":  {
"startLine":  41,
"startColumn":  16,
"endLine":  41,
"endColumn":  23
}
}
]
}
],
"shortMessage":  "\"Dispose\" of \"context\".",
"fullMessage":  "You can\u0027t rely on garbage collection to clean up everything. Specifically, you can\u0027t count on it to release non-memory resources such as \"File\"s. For that, there\u0027s the \"IDisposable\" interface, and the contract that \"Dispose\" will always be called on such objects. When an \"IDisposable\" is a class member, then it\u0027s up to that class to call \"Dispose\" on it, ideally in its own \"Dispose\" method. If it\u0027s a local variable, then it should be instantiated with a \"using\" clause to prompt automatic cleanup when it goes out of scope.",
"properties":  {
"severity":  "Warning",
"warningLevel":  "1",
"defaultSeverity":  "Warning",
"title":  "\"IDisposables\" should be disposed",
"category":  "Reliability",
"helpLink":  "http://vs.sonarlint.org/rules/index.html#version=1.7.0\u0026ruleId=S2930",
"isEnabledByDefault":  "True",
"isSuppressedInSource":  "False"
}
},
{
"ruleId":  "S2930",
"locations":  [
{
"analysisTarget":  [
{
"uri":  "Nancy\\src\\Nancy.Tests\\Unit\\Sessions\\CookieBasedSessionsFixture.cs",
"region":  {
"startLine":  49,
"startColumn":  16,
"endLine":  49,
"endColumn":  24
}
}
]
}
],
"shortMessage":  "\"Dispose\" of \"response\".",
"fullMessage":  "You can\u0027t rely on garbage collection to clean up everything. Specifically, you can\u0027t count on it to release non-memory resources such as \"File\"s. For that, there\u0027s the \"IDisposable\" interface, and the contract that \"Dispose\" will always be called on such objects. When an \"IDisposable\" is a class member, then it\u0027s up to that class to call \"Dispose\" on it, ideally in its own \"Dispose\" method. If it\u0027s a local variable, then it should be instantiated with a \"using\" clause to prompt automatic cleanup when it goes out of scope.",
"properties":  {
"severity":  "Warning",
"warningLevel":  "1",
"defaultSeverity":  "Warning",
"title":  "\"IDisposables\" should be disposed",
"category":  "Reliability",
"helpLink":  "http://vs.sonarlint.org/rules/index.html#version=1.7.0\u0026ruleId=S2930",
"isEnabledByDefault":  "True",
"isSuppressedInSource":  "False"
}
},
{
"ruleId":  "S2930",
"locations":  [
{
"analysisTarget":  [
{
"uri":  "Nancy\\src\\Nancy.Tests\\Unit\\Sessions\\CookieBasedSessionsFixture.cs",
"region":  {
"startLine":  59,
"startColumn":  16,
"endLine":  59,
"endColumn":  24
}
}
]
}
],
"shortMessage":  "\"Dispose\" of \"response\".",
"fullMessage":  "You can\u0027t rely on garbage collection to clean up everything. Specifically, you can\u0027t count on it to release non-memory resources such as \"File\"s. For that, there\u0027s the \"IDisposable\" interface, and the contract that \"Dispose\" will always be called on such objects. When an \"IDisposable\" is a class member, then it\u0027s up to that class to call \"Dispose\" on it, ideally in its own \"Dispose\" method. If it\u0027s a local variable, then it should be instantiated with a \"using\" clause to prompt automatic cleanup when it goes out of scope.",
"properties":  {
"severity":  "Warning",
"warningLevel":  "1",
"defaultSeverity":  "Warning",
"title":  "\"IDisposables\" should be disposed",
"category":  "Reliability",
"helpLink":  "http://vs.sonarlint.org/rules/index.html#version=1.7.0\u0026ruleId=S2930",
"isEnabledByDefault":  "True",
"isSuppressedInSource":  "False"
}
},
{
"ruleId":  "S2930",
"locations":  [
{
"analysisTarget":  [
{
"uri":  "Nancy\\src\\Nancy.Tests\\Unit\\Sessions\\CookieBasedSessionsFixture.cs",
"region":  {
"startLine":  69,
"startColumn":  16,
"endLine":  69,
"endColumn":  24
}
}
]
}
],
"shortMessage":  "\"Dispose\" of \"response\".",
"fullMessage":  "You can\u0027t rely on garbage collection to clean up everything. Specifically, you can\u0027t count on it to release non-memory resources such as \"File\"s. For that, there\u0027s the \"IDisposable\" interface, and the contract that \"Dispose\" will always be called on such objects. When an \"IDisposable\" is a class member, then it\u0027s up to that class to call \"Dispose\" on it, ideally in its own \"Dispose\" method. If it\u0027s a local variable, then it should be instantiated with a \"using\" clause to prompt automatic cleanup when it goes out of scope.",
"properties":  {
"severity":  "Warning",
"warningLevel":  "1",
"defaultSeverity":  "Warning",
"title":  "\"IDisposables\" should be disposed",
"category":  "Reliability",
"helpLink":  "http://vs.sonarlint.org/rules/index.html#version=1.7.0\u0026ruleId=S2930",
"isEnabledByDefault":  "True",
"isSuppressedInSource":  "False"
}
},
{
"ruleId":  "S2930",
"locations":  [
{
"analysisTarget":  [
{
"uri":  "Nancy\\src\\Nancy.Tests\\Unit\\Sessions\\CookieBasedSessionsFixture.cs",
"region":  {
"startLine":  91,
"startColumn":  16,
"endLine":  91,
"endColumn":  24
}
}
]
}
],
"shortMessage":  "\"Dispose\" of \"response\".",
"fullMessage":  "You can\u0027t rely on garbage collection to clean up everything. Specifically, you can\u0027t count on it to release non-memory resources such as \"File\"s. For that, there\u0027s the \"IDisposable\" interface, and the contract that \"Dispose\" will always be called on such objects. When an \"IDisposable\" is a class member, then it\u0027s up to that class to call \"Dispose\" on it, ideally in its own \"Dispose\" method. If it\u0027s a local variable, then it should be instantiated with a \"using\" clause to prompt automatic cleanup when it goes out of scope.",
"properties":  {
"severity":  "Warning",
"warningLevel":  "1",
"defaultSeverity":  "Warning",
"title":  "\"IDisposables\" should be disposed",
"category":  "Reliability",
"helpLink":  "http://vs.sonarlint.org/rules/index.html#version=1.7.0\u0026ruleId=S2930",
"isEnabledByDefault":  "True",
"isSuppressedInSource":  "False"
}
},
{
"ruleId":  "S2930",
"locations":  [
{
"analysisTarget":  [
{
"uri":  "Nancy\\src\\Nancy.Tests\\Unit\\Sessions\\CookieBasedSessionsFixture.cs",
"region":  {
"startLine":  104,
"startColumn":  16,
"endLine":  104,
"endColumn":  24
}
}
]
}
],
"shortMessage":  "\"Dispose\" of \"response\".",
"fullMessage":  "You can\u0027t rely on garbage collection to clean up everything. Specifically, you can\u0027t count on it to release non-memory resources such as \"File\"s. For that, there\u0027s the \"IDisposable\" interface, and the contract that \"Dispose\" will always be called on such objects. When an \"IDisposable\" is a class member, then it\u0027s up to that class to call \"Dispose\" on it, ideally in its own \"Dispose\" method. If it\u0027s a local variable, then it should be instantiated with a \"using\" clause to prompt automatic cleanup when it goes out of scope.",
"properties":  {
"severity":  "Warning",
"warningLevel":  "1",
"defaultSeverity":  "Warning",
"title":  "\"IDisposables\" should be disposed",
"category":  "Reliability",
"helpLink":  "http://vs.sonarlint.org/rules/index.html#version=1.7.0\u0026ruleId=S2930",
"isEnabledByDefault":  "True",
"isSuppressedInSource":  "False"
}
},
{
"ruleId":  "S2930",
"locations":  [
{
"analysisTarget":  [
{
"uri":  "Nancy\\src\\Nancy.Tests\\Unit\\Sessions\\CookieBasedSessionsFixture.cs",
"region":  {
"startLine":  131,
"startColumn":  14,
"endLine":  131,
"endColumn":  21
}
}
]
}
],
"shortMessage":  "\"Dispose\" of \"request\".",
"fullMessage":  "You can\u0027t rely on garbage collection to clean up everything. Specifically, you can\u0027t count on it to release non-memory resources such as \"File\"s. For that, there\u0027s the \"IDisposable\" interface, and the contract that \"Dispose\" will always be called on such objects. When an \"IDisposable\" is a class member, then it\u0027s up to that class to call \"Dispose\" on it, ideally in its own \"Dispose\" method. If it\u0027s a local variable, then it should be instantiated with a \"using\" clause to prompt automatic cleanup when it goes out of scope.",
"properties":  {
"severity":  "Warning",
"warningLevel":  "1",
"defaultSeverity":  "Warning",
"title":  "\"IDisposables\" should be disposed",
"category":  "Reliability",
"helpLink":  "http://vs.sonarlint.org/rules/index.html#version=1.7.0\u0026ruleId=S2930",
"isEnabledByDefault":  "True",
"isSuppressedInSource":  "False"
}
},
{
"ruleId":  "S2930",
"locations":  [
{
"analysisTarget":  [
{
"uri":  "Nancy\\src\\Nancy.Tests\\Unit\\Sessions\\CookieBasedSessionsFixture.cs",
"region":  {
"startLine":  205,
"startColumn":  16,
"endLine":  205,
"endColumn":  28
}
}
]
}
],
"shortMessage":  "\"Dispose\" of \"nancyContext\".",
"fullMessage":  "You can\u0027t rely on garbage collection to clean up everything. Specifically, you can\u0027t count on it to release non-memory resources such as \"File\"s. For that, there\u0027s the \"IDisposable\" interface, and the contract that \"Dispose\" will always be called on such objects. When an \"IDisposable\" is a class member, then it\u0027s up to that class to call \"Dispose\" on it, ideally in its own \"Dispose\" method. If it\u0027s a local variable, then it should be instantiated with a \"using\" clause to prompt automatic cleanup when it goes out of scope.",
"properties":  {
"severity":  "Warning",
"warningLevel":  "1",
"defaultSeverity":  "Warning",
"title":  "\"IDisposables\" should be disposed",
"category":  "Reliability",
"helpLink":  "http://vs.sonarlint.org/rules/index.html#version=1.7.0\u0026ruleId=S2930",
"isEnabledByDefault":  "True",
"isSuppressedInSource":  "False"
}
},
{
"ruleId":  "S2930",
"locations":  [
{
"analysisTarget":  [
{
"uri":  "Nancy\\src\\Nancy.Tests\\Unit\\Sessions\\CookieBasedSessionsFixture.cs",
"region":  {
"startLine":  225,
"startColumn":  16,
"endLine":  225,
"endColumn":  28
}
}
]
}
],
"shortMessage":  "\"Dispose\" of \"nancyContext\".",
"fullMessage":  "You can\u0027t rely on garbage collection to clean up everything. Specifically, you can\u0027t count on it to release non-memory resources such as \"File\"s. For that, there\u0027s the \"IDisposable\" interface, and the contract that \"Dispose\" will always be called on such objects. When an \"IDisposable\" is a class member, then it\u0027s up to that class to call \"Dispose\" on it, ideally in its own \"Dispose\" method. If it\u0027s a local variable, then it should be instantiated with a \"using\" clause to prompt automatic cleanup when it goes out of scope.",
"properties":  {
"severity":  "Warning",
"warningLevel":  "1",
"defaultSeverity":  "Warning",
"title":  "\"IDisposables\" should be disposed",
"category":  "Reliability",
"helpLink":  "http://vs.sonarlint.org/rules/index.html#version=1.7.0\u0026ruleId=S2930",
"isEnabledByDefault":  "True",
"isSuppressedInSource":  "False"
}
},
{
"ruleId":  "S2930",
"locations":  [
{
"analysisTarget":  [
{
"uri":  "Nancy\\src\\Nancy.Tests\\Unit\\Sessions\\CookieBasedSessionsFixture.cs",
"region":  {
"startLine":  250,
"startColumn":  16,
"endLine":  250,
"endColumn":  24
}
}
]
}
],
"shortMessage":  "\"Dispose\" of \"response\".",
"fullMessage":  "You can\u0027t rely on garbage collection to clean up everything. Specifically, you can\u0027t count on it to release non-memory resources such as \"File\"s. For that, there\u0027s the \"IDisposable\" interface, and the contract that \"Dispose\" will always be called on such objects. When an \"IDisposable\" is a class member, then it\u0027s up to that class to call \"Dispose\" on it, ideally in its own \"Dispose\" method. If it\u0027s a local variable, then it should be instantiated with a \"using\" clause to prompt automatic cleanup when it goes out of scope.",
"properties":  {
"severity":  "Warning",
"warningLevel":  "1",
"defaultSeverity":  "Warning",
"title":  "\"IDisposables\" should be disposed",
"category":  "Reliability",
"helpLink":  "http://vs.sonarlint.org/rules/index.html#version=1.7.0\u0026ruleId=S2930",
"isEnabledByDefault":  "True",
"isSuppressedInSource":  "False"
}
},
{
"ruleId":  "S2930",
"locations":  [
{
"analysisTarget":  [
{
"uri":  "Nancy\\src\\Nancy.Tests\\Unit\\Sessions\\CookieBasedSessionsFixture.cs",
"region":  {
"startLine":  273,
"startColumn":  16,
"endLine":  273,
"endColumn":  28
}
}
]
}
],
"shortMessage":  "\"Dispose\" of \"nancyContext\".",
"fullMessage":  "You can\u0027t rely on garbage collection to clean up everything. Specifically, you can\u0027t count on it to release non-memory resources such as \"File\"s. For that, there\u0027s the \"IDisposable\" interface, and the contract that \"Dispose\" will always be called on such objects. When an \"IDisposable\" is a class member, then it\u0027s up to that class to call \"Dispose\" on it, ideally in its own \"Dispose\" method. If it\u0027s a local variable, then it should be instantiated with a \"using\" clause to prompt automatic cleanup when it goes out of scope.",
"properties":  {
"severity":  "Warning",
"warningLevel":  "1",
"defaultSeverity":  "Warning",
"title":  "\"IDisposables\" should be disposed",
"category":  "Reliability",
"helpLink":  "http://vs.sonarlint.org/rules/index.html#version=1.7.0\u0026ruleId=S2930",
"isEnabledByDefault":  "True",
"isSuppressedInSource":  "False"
}
},
{
"ruleId":  "S2930",
"locations":  [
{
"analysisTarget":  [
{
"uri":  "Nancy\\src\\Nancy.Tests\\Unit\\Sessions\\CookieBasedSessionsFixture.cs",
"region":  {
"startLine":  283,
"startColumn":  16,
"endLine":  283,
"endColumn":  24
}
}
]
}
],
"shortMessage":  "\"Dispose\" of \"response\".",
"fullMessage":  "You can\u0027t rely on garbage collection to clean up everything. Specifically, you can\u0027t count on it to release non-memory resources such as \"File\"s. For that, there\u0027s the \"IDisposable\" interface, and the contract that \"Dispose\" will always be called on such objects. When an \"IDisposable\" is a class member, then it\u0027s up to that class to call \"Dispose\" on it, ideally in its own \"Dispose\" method. If it\u0027s a local variable, then it should be instantiated with a \"using\" clause to prompt automatic cleanup when it goes out of scope.",
"properties":  {
"severity":  "Warning",
"warningLevel":  "1",
"defaultSeverity":  "Warning",
"title":  "\"IDisposables\" should be disposed",
"category":  "Reliability",
"helpLink":  "http://vs.sonarlint.org/rules/index.html#version=1.7.0\u0026ruleId=S2930",
"isEnabledByDefault":  "True",
"isSuppressedInSource":  "False"
}
},
{
"ruleId":  "S2930",
"locations":  [
{
"analysisTarget":  [
{
"uri":  "Nancy\\src\\Nancy.Tests\\Unit\\Sessions\\CookieBasedSessionsFixture.cs",
"region":  {
"startLine":  301,
"startColumn":  16,
"endLine":  301,
"endColumn":  24
}
}
]
}
],
"shortMessage":  "\"Dispose\" of \"response\".",
"fullMessage":  "You can\u0027t rely on garbage collection to clean up everything. Specifically, you can\u0027t count on it to release non-memory resources such as \"File\"s. For that, there\u0027s the \"IDisposable\" interface, and the contract that \"Dispose\" will always be called on such objects. When an \"IDisposable\" is a class member, then it\u0027s up to that class to call \"Dispose\" on it, ideally in its own \"Dispose\" method. If it\u0027s a local variable, then it should be instantiated with a \"using\" clause to prompt automatic cleanup when it goes out of scope.",
"properties":  {
"severity":  "Warning",
"warningLevel":  "1",
"defaultSeverity":  "Warning",
"title":  "\"IDisposables\" should be disposed",
"category":  "Reliability",
"helpLink":  "http://vs.sonarlint.org/rules/index.html#version=1.7.0\u0026ruleId=S2930",
"isEnabledByDefault":  "True",
"isSuppressedInSource":  "False"
}
},
{
"ruleId":  "S2930",
"locations":  [
{
"analysisTarget":  [
{
"uri":  "Nancy\\src\\Nancy.Tests\\Unit\\Sessions\\CookieBasedSessionsFixture.cs",
"region":  {
"startLine":  307,
"startColumn":  16,
"endLine":  307,
"endColumn":  23
}
}
]
}
],
"shortMessage":  "\"Dispose\" of \"request\".",
"fullMessage":  "You can\u0027t rely on garbage collection to clean up everything. Specifically, you can\u0027t count on it to release non-memory resources such as \"File\"s. For that, there\u0027s the \"IDisposable\" interface, and the contract that \"Dispose\" will always be called on such objects. When an \"IDisposable\" is a class member, then it\u0027s up to that class to call \"Dispose\" on it, ideally in its own \"Dispose\" method. If it\u0027s a local variable, then it should be instantiated with a \"using\" clause to prompt automatic cleanup when it goes out of scope.",
"properties":  {
"severity":  "Warning",
"warningLevel":  "1",
"defaultSeverity":  "Warning",
"title":  "\"IDisposables\" should be disposed",
"category":  "Reliability",
"helpLink":  "http://vs.sonarlint.org/rules/index.html#version=1.7.0\u0026ruleId=S2930",
"isEnabledByDefault":  "True",
"isSuppressedInSource":  "False"
}
},
{
"ruleId":  "S2930",
"locations":  [
{
"analysisTarget":  [
{
"uri":  "Nancy\\src\\Nancy.Tests\\Unit\\Sessions\\CookieBasedSessionsFixture.cs",
"region":  {
"startLine":  318,
"startColumn":  16,
"endLine":  318,
"endColumn":  24
}
}
]
}
],
"shortMessage":  "\"Dispose\" of \"response\".",
"fullMessage":  "You can\u0027t rely on garbage collection to clean up everything. Specifically, you can\u0027t count on it to release non-memory resources such as \"File\"s. For that, there\u0027s the \"IDisposable\" interface, and the contract that \"Dispose\" will always be called on such objects. When an \"IDisposable\" is a class member, then it\u0027s up to that class to call \"Dispose\" on it, ideally in its own \"Dispose\" method. If it\u0027s a local variable, then it should be instantiated with a \"using\" clause to prompt automatic cleanup when it goes out of scope.",
"properties":  {
"severity":  "Warning",
"warningLevel":  "1",
"defaultSeverity":  "Warning",
"title":  "\"IDisposables\" should be disposed",
"category":  "Reliability",
"helpLink":  "http://vs.sonarlint.org/rules/index.html#version=1.7.0\u0026ruleId=S2930",
"isEnabledByDefault":  "True",
"isSuppressedInSource":  "False"
}
},
{
"ruleId":  "S2930",
"locations":  [
{
"analysisTarget":  [
{
"uri":  "Nancy\\src\\Nancy.Tests\\Unit\\Sessions\\CookieBasedSessionsFixture.cs",
"region":  {
"startLine":  334,
"startColumn":  16,
"endLine":  334,
"endColumn":  24
}
}
]
}
],
"shortMessage":  "\"Dispose\" of \"response\".",
"fullMessage":  "You can\u0027t rely on garbage collection to clean up everything. Specifically, you can\u0027t count on it to release non-memory resources such as \"File\"s. For that, there\u0027s the \"IDisposable\" interface, and the contract that \"Dispose\" will always be called on such objects. When an \"IDisposable\" is a class member, then it\u0027s up to that class to call \"Dispose\" on it, ideally in its own \"Dispose\" method. If it\u0027s a local variable, then it should be instantiated with a \"using\" clause to prompt automatic cleanup when it goes out of scope.",
"properties":  {
"severity":  "Warning",
"warningLevel":  "1",
"defaultSeverity":  "Warning",
"title":  "\"IDisposables\" should be disposed",
"category":  "Reliability",
"helpLink":  "http://vs.sonarlint.org/rules/index.html#version=1.7.0\u0026ruleId=S2930",
"isEnabledByDefault":  "True",
"isSuppressedInSource":  "False"
}
},
{
"ruleId":  "S2930",
"locations":  [
{
"analysisTarget":  [
{
"uri":  "Nancy\\src\\Nancy.Tests\\Unit\\Sessions\\CookieBasedSessionsFixture.cs",
"region":  {
"startLine":  353,
"startColumn":  16,
"endLine":  353,
"endColumn":  23
}
}
]
}
],
"shortMessage":  "\"Dispose\" of \"request\".",
"fullMessage":  "You can\u0027t rely on garbage collection to clean up everything. Specifically, you can\u0027t count on it to release non-memory resources such as \"File\"s. For that, there\u0027s the \"IDisposable\" interface, and the contract that \"Dispose\" will always be called on such objects. When an \"IDisposable\" is a class member, then it\u0027s up to that class to call \"Dispose\" on it, ideally in its own \"Dispose\" method. If it\u0027s a local variable, then it should be instantiated with a \"using\" clause to prompt automatic cleanup when it goes out of scope.",
"properties":  {
"severity":  "Warning",
"warningLevel":  "1",
"defaultSeverity":  "Warning",
"title":  "\"IDisposables\" should be disposed",
"category":  "Reliability",
"helpLink":  "http://vs.sonarlint.org/rules/index.html#version=1.7.0\u0026ruleId=S2930",
"isEnabledByDefault":  "True",
"isSuppressedInSource":  "False"
}
},
{
"ruleId":  "S2930",
"locations":  [
{
"analysisTarget":  [
{
"uri":  "Nancy\\src\\Nancy.Tests\\Unit\\Sessions\\CookieBasedSessionsFixture.cs",
"region":  {
"startLine":  368,
"startColumn":  16,
"endLine":  368,
"endColumn":  23
}
}
]
}
],
"shortMessage":  "\"Dispose\" of \"request\".",
"fullMessage":  "You can\u0027t rely on garbage collection to clean up everything. Specifically, you can\u0027t count on it to release non-memory resources such as \"File\"s. For that, there\u0027s the \"IDisposable\" interface, and the contract that \"Dispose\" will always be called on such objects. When an \"IDisposable\" is a class member, then it\u0027s up to that class to call \"Dispose\" on it, ideally in its own \"Dispose\" method. If it\u0027s a local variable, then it should be instantiated with a \"using\" clause to prompt automatic cleanup when it goes out of scope.",
"properties":  {
"severity":  "Warning",
"warningLevel":  "1",
"defaultSeverity":  "Warning",
"title":  "\"IDisposables\" should be disposed",
"category":  "Reliability",
"helpLink":  "http://vs.sonarlint.org/rules/index.html#version=1.7.0\u0026ruleId=S2930",
"isEnabledByDefault":  "True",
"isSuppressedInSource":  "False"
}
},
{
"ruleId":  "S2930",
"locations":  [
{
"analysisTarget":  [
{
"uri":  "Nancy\\src\\Nancy.Tests\\Unit\\Sessions\\CookieBasedSessionsFixture.cs",
"region":  {
"startLine":  382,
"startColumn":  16,
"endLine":  382,
"endColumn":  23
}
}
]
}
],
"shortMessage":  "\"Dispose\" of \"request\".",
"fullMessage":  "You can\u0027t rely on garbage collection to clean up everything. Specifically, you can\u0027t count on it to release non-memory resources such as \"File\"s. For that, there\u0027s the \"IDisposable\" interface, and the contract that \"Dispose\" will always be called on such objects. When an \"IDisposable\" is a class member, then it\u0027s up to that class to call \"Dispose\" on it, ideally in its own \"Dispose\" method. If it\u0027s a local variable, then it should be instantiated with a \"using\" clause to prompt automatic cleanup when it goes out of scope.",
"properties":  {
"severity":  "Warning",
"warningLevel":  "1",
"defaultSeverity":  "Warning",
"title":  "\"IDisposables\" should be disposed",
"category":  "Reliability",
"helpLink":  "http://vs.sonarlint.org/rules/index.html#version=1.7.0\u0026ruleId=S2930",
"isEnabledByDefault":  "True",
"isSuppressedInSource":  "False"
}
},
{
"ruleId":  "S2930",
"locations":  [
{
"analysisTarget":  [
{
"uri":  "Nancy\\src\\Nancy.Tests\\Unit\\Sessions\\CookieBasedSessionsFixture.cs",
"region":  {
"startLine":  396,
"startColumn":  16,
"endLine":  396,
"endColumn":  23
}
}
]
}
],
"shortMessage":  "\"Dispose\" of \"request\".",
"fullMessage":  "You can\u0027t rely on garbage collection to clean up everything. Specifically, you can\u0027t count on it to release non-memory resources such as \"File\"s. For that, there\u0027s the \"IDisposable\" interface, and the contract that \"Dispose\" will always be called on such objects. When an \"IDisposable\" is a class member, then it\u0027s up to that class to call \"Dispose\" on it, ideally in its own \"Dispose\" method. If it\u0027s a local variable, then it should be instantiated with a \"using\" clause to prompt automatic cleanup when it goes out of scope.",
"properties":  {
"severity":  "Warning",
"warningLevel":  "1",
"defaultSeverity":  "Warning",
"title":  "\"IDisposables\" should be disposed",
"category":  "Reliability",
"helpLink":  "http://vs.sonarlint.org/rules/index.html#version=1.7.0\u0026ruleId=S2930",
"isEnabledByDefault":  "True",
"isSuppressedInSource":  "False"
}
},
{
"ruleId":  "S2930",
"locations":  [
{
"analysisTarget":  [
{
"uri":  "Nancy\\src\\Nancy.Tests\\Unit\\Sessions\\CookieBasedSessionsFixture.cs",
"region":  {
"startLine":  411,
"startColumn":  16,
"endLine":  411,
"endColumn":  23
}
}
]
}
],
"shortMessage":  "\"Dispose\" of \"request\".",
"fullMessage":  "You can\u0027t rely on garbage collection to clean up everything. Specifically, you can\u0027t count on it to release non-memory resources such as \"File\"s. For that, there\u0027s the \"IDisposable\" interface, and the contract that \"Dispose\" will always be called on such objects. When an \"IDisposable\" is a class member, then it\u0027s up to that class to call \"Dispose\" on it, ideally in its own \"Dispose\" method. If it\u0027s a local variable, then it should be instantiated with a \"using\" clause to prompt automatic cleanup when it goes out of scope.",
"properties":  {
"severity":  "Warning",
"warningLevel":  "1",
"defaultSeverity":  "Warning",
"title":  "\"IDisposables\" should be disposed",
"category":  "Reliability",
"helpLink":  "http://vs.sonarlint.org/rules/index.html#version=1.7.0\u0026ruleId=S2930",
"isEnabledByDefault":  "True",
"isSuppressedInSource":  "False"
}
},
{
"ruleId":  "S2930",
"locations":  [
{
"analysisTarget":  [
{
"uri":  "Nancy\\src\\Nancy.Tests\\Unit\\Sessions\\CookieBasedSessionsFixture.cs",
"region":  {
"startLine":  432,
"startColumn":  16,
"endLine":  432,
"endColumn":  24
}
}
]
}
],
"shortMessage":  "\"Dispose\" of \"response\".",
"fullMessage":  "You can\u0027t rely on garbage collection to clean up everything. Specifically, you can\u0027t count on it to release non-memory resources such as \"File\"s. For that, there\u0027s the \"IDisposable\" interface, and the contract that \"Dispose\" will always be called on such objects. When an \"IDisposable\" is a class member, then it\u0027s up to that class to call \"Dispose\" on it, ideally in its own \"Dispose\" method. If it\u0027s a local variable, then it should be instantiated with a \"using\" clause to prompt automatic cleanup when it goes out of scope.",
"properties":  {
"severity":  "Warning",
"warningLevel":  "1",
"defaultSeverity":  "Warning",
"title":  "\"IDisposables\" should be disposed",
"category":  "Reliability",
"helpLink":  "http://vs.sonarlint.org/rules/index.html#version=1.7.0\u0026ruleId=S2930",
"isEnabledByDefault":  "True",
"isSuppressedInSource":  "False"
}
},
{
"ruleId":  "S2930",
"locations":  [
{
"analysisTarget":  [
{
"uri":  "Nancy\\src\\Nancy.Tests\\Unit\\Sessions\\CookieBasedSessionsFixture.cs",
"region":  {
"startLine":  457,
"startColumn":  16,
"endLine":  457,
"endColumn":  24
}
}
]
}
],
"shortMessage":  "\"Dispose\" of \"response\".",
"fullMessage":  "You can\u0027t rely on garbage collection to clean up everything. Specifically, you can\u0027t count on it to release non-memory resources such as \"File\"s. For that, there\u0027s the \"IDisposable\" interface, and the contract that \"Dispose\" will always be called on such objects. When an \"IDisposable\" is a class member, then it\u0027s up to that class to call \"Dispose\" on it, ideally in its own \"Dispose\" method. If it\u0027s a local variable, then it should be instantiated with a \"using\" clause to prompt automatic cleanup when it goes out of scope.",
"properties":  {
"severity":  "Warning",
"warningLevel":  "1",
"defaultSeverity":  "Warning",
"title":  "\"IDisposables\" should be disposed",
"category":  "Reliability",
"helpLink":  "http://vs.sonarlint.org/rules/index.html#version=1.7.0\u0026ruleId=S2930",
"isEnabledByDefault":  "True",
"isSuppressedInSource":  "False"
}
},
{
"ruleId":  "S2930",
"locations":  [
{
"analysisTarget":  [
{
"uri":  "Nancy\\src\\Nancy.Tests\\Unit\\Sessions\\CookieBasedSessionsFixture.cs",
"region":  {
"startLine":  483,
"startColumn":  16,
"endLine":  483,
"endColumn":  24
}
}
]
}
],
"shortMessage":  "\"Dispose\" of \"response\".",
"fullMessage":  "You can\u0027t rely on garbage collection to clean up everything. Specifically, you can\u0027t count on it to release non-memory resources such as \"File\"s. For that, there\u0027s the \"IDisposable\" interface, and the contract that \"Dispose\" will always be called on such objects. When an \"IDisposable\" is a class member, then it\u0027s up to that class to call \"Dispose\" on it, ideally in its own \"Dispose\" method. If it\u0027s a local variable, then it should be instantiated with a \"using\" clause to prompt automatic cleanup when it goes out of scope.",
"properties":  {
"severity":  "Warning",
"warningLevel":  "1",
"defaultSeverity":  "Warning",
"title":  "\"IDisposables\" should be disposed",
"category":  "Reliability",
"helpLink":  "http://vs.sonarlint.org/rules/index.html#version=1.7.0\u0026ruleId=S2930",
"isEnabledByDefault":  "True",
"isSuppressedInSource":  "False"
}
},
{
"ruleId":  "S2930",
"locations":  [
{
"analysisTarget":  [
{
"uri":  "Nancy\\src\\Nancy.Tests\\Unit\\StaticContentConventionBuilderFixture.cs",
"region":  {
"startLine":  137,
"startColumn":  16,
"endLine":  137,
"endColumn":  23
}
}
]
}
],
"shortMessage":  "\"Dispose\" of \"request\".",
"fullMessage":  "You can\u0027t rely on garbage collection to clean up everything. Specifically, you can\u0027t count on it to release non-memory resources such as \"File\"s. For that, there\u0027s the \"IDisposable\" interface, and the contract that \"Dispose\" will always be called on such objects. When an \"IDisposable\" is a class member, then it\u0027s up to that class to call \"Dispose\" on it, ideally in its own \"Dispose\" method. If it\u0027s a local variable, then it should be instantiated with a \"using\" clause to prompt automatic cleanup when it goes out of scope.",
"properties":  {
"severity":  "Warning",
"warningLevel":  "1",
"defaultSeverity":  "Warning",
"title":  "\"IDisposables\" should be disposed",
"category":  "Reliability",
"helpLink":  "http://vs.sonarlint.org/rules/index.html#version=1.7.0\u0026ruleId=S2930",
"isEnabledByDefault":  "True",
"isSuppressedInSource":  "False"
}
},
{
"ruleId":  "S2930",
"locations":  [
{
"analysisTarget":  [
{
"uri":  "Nancy\\src\\Nancy.Tests\\Unit\\StaticContentConventionBuilderFixture.cs",
"region":  {
"startLine":  138,
"startColumn":  16,
"endLine":  138,
"endColumn":  23
}
}
]
}
],
"shortMessage":  "\"Dispose\" of \"context\".",
"fullMessage":  "You can\u0027t rely on garbage collection to clean up everything. Specifically, you can\u0027t count on it to release non-memory resources such as \"File\"s. For that, there\u0027s the \"IDisposable\" interface, and the contract that \"Dispose\" will always be called on such objects. When an \"IDisposable\" is a class member, then it\u0027s up to that class to call \"Dispose\" on it, ideally in its own \"Dispose\" method. If it\u0027s a local variable, then it should be instantiated with a \"using\" clause to prompt automatic cleanup when it goes out of scope.",
"properties":  {
"severity":  "Warning",
"warningLevel":  "1",
"defaultSeverity":  "Warning",
"title":  "\"IDisposables\" should be disposed",
"category":  "Reliability",
"helpLink":  "http://vs.sonarlint.org/rules/index.html#version=1.7.0\u0026ruleId=S2930",
"isEnabledByDefault":  "True",
"isSuppressedInSource":  "False"
}
},
{
"ruleId":  "S2930",
"locations":  [
{
"analysisTarget":  [
{
"uri":  "Nancy\\src\\Nancy.Tests\\Unit\\StaticContentConventionBuilderFixture.cs",
"region":  {
"startLine":  155,
"startColumn":  16,
"endLine":  155,
"endColumn":  23
}
}
]
}
],
"shortMessage":  "\"Dispose\" of \"request\".",
"fullMessage":  "You can\u0027t rely on garbage collection to clean up everything. Specifically, you can\u0027t count on it to release non-memory resources such as \"File\"s. For that, there\u0027s the \"IDisposable\" interface, and the contract that \"Dispose\" will always be called on such objects. When an \"IDisposable\" is a class member, then it\u0027s up to that class to call \"Dispose\" on it, ideally in its own \"Dispose\" method. If it\u0027s a local variable, then it should be instantiated with a \"using\" clause to prompt automatic cleanup when it goes out of scope.",
"properties":  {
"severity":  "Warning",
"warningLevel":  "1",
"defaultSeverity":  "Warning",
"title":  "\"IDisposables\" should be disposed",
"category":  "Reliability",
"helpLink":  "http://vs.sonarlint.org/rules/index.html#version=1.7.0\u0026ruleId=S2930",
"isEnabledByDefault":  "True",
"isSuppressedInSource":  "False"
}
},
{
"ruleId":  "S2930",
"locations":  [
{
"analysisTarget":  [
{
"uri":  "Nancy\\src\\Nancy.Tests\\Unit\\StaticContentConventionBuilderFixture.cs",
"region":  {
"startLine":  156,
"startColumn":  16,
"endLine":  156,
"endColumn":  23
}
}
]
}
],
"shortMessage":  "\"Dispose\" of \"context\".",
"fullMessage":  "You can\u0027t rely on garbage collection to clean up everything. Specifically, you can\u0027t count on it to release non-memory resources such as \"File\"s. For that, there\u0027s the \"IDisposable\" interface, and the contract that \"Dispose\" will always be called on such objects. When an \"IDisposable\" is a class member, then it\u0027s up to that class to call \"Dispose\" on it, ideally in its own \"Dispose\" method. If it\u0027s a local variable, then it should be instantiated with a \"using\" clause to prompt automatic cleanup when it goes out of scope.",
"properties":  {
"severity":  "Warning",
"warningLevel":  "1",
"defaultSeverity":  "Warning",
"title":  "\"IDisposables\" should be disposed",
"category":  "Reliability",
"helpLink":  "http://vs.sonarlint.org/rules/index.html#version=1.7.0\u0026ruleId=S2930",
"isEnabledByDefault":  "True",
"isSuppressedInSource":  "False"
}
},
{
"ruleId":  "S2930",
"locations":  [
{
"analysisTarget":  [
{
"uri":  "Nancy\\src\\Nancy.Tests\\Unit\\StaticContentConventionBuilderFixture.cs",
"region":  {
"startLine":  286,
"startColumn":  16,
"endLine":  286,
"endColumn":  23
}
}
]
}
],
"shortMessage":  "\"Dispose\" of \"request\".",
"fullMessage":  "You can\u0027t rely on garbage collection to clean up everything. Specifically, you can\u0027t count on it to release non-memory resources such as \"File\"s. For that, there\u0027s the \"IDisposable\" interface, and the contract that \"Dispose\" will always be called on such objects. When an \"IDisposable\" is a class member, then it\u0027s up to that class to call \"Dispose\" on it, ideally in its own \"Dispose\" method. If it\u0027s a local variable, then it should be instantiated with a \"using\" clause to prompt automatic cleanup when it goes out of scope.",
"properties":  {
"severity":  "Warning",
"warningLevel":  "1",
"defaultSeverity":  "Warning",
"title":  "\"IDisposables\" should be disposed",
"category":  "Reliability",
"helpLink":  "http://vs.sonarlint.org/rules/index.html#version=1.7.0\u0026ruleId=S2930",
"isEnabledByDefault":  "True",
"isSuppressedInSource":  "False"
}
},
{
"ruleId":  "S2930",
"locations":  [
{
"analysisTarget":  [
{
"uri":  "Nancy\\src\\Nancy.Tests\\Unit\\Validation\\ModuleExtensionsFixture.cs",
"region":  {
"startLine":  13,
"startColumn":  38,
"endLine":  13,
"endColumn":  45
}
}
]
}
],
"shortMessage":  "\"Dispose\" of \"context\".",
"fullMessage":  "You can\u0027t rely on garbage collection to clean up everything. Specifically, you can\u0027t count on it to release non-memory resources such as \"File\"s. For that, there\u0027s the \"IDisposable\" interface, and the contract that \"Dispose\" will always be called on such objects. When an \"IDisposable\" is a class member, then it\u0027s up to that class to call \"Dispose\" on it, ideally in its own \"Dispose\" method. If it\u0027s a local variable, then it should be instantiated with a \"using\" clause to prompt automatic cleanup when it goes out of scope.",
"properties":  {
"severity":  "Warning",
"warningLevel":  "1",
"defaultSeverity":  "Warning",
"title":  "\"IDisposables\" should be disposed",
"category":  "Reliability",
"helpLink":  "http://vs.sonarlint.org/rules/index.html#version=1.7.0\u0026ruleId=S2930",
"isEnabledByDefault":  "True",
"isSuppressedInSource":  "False"
}
},
{
"ruleId":  "S2930",
"locations":  [
{
"analysisTarget":  [
{
"uri":  "Nancy\\src\\Nancy.Tests\\Unit\\ViewEngines\\DefaultRenderContextFixture.cs",
"region":  {
"startLine":  109,
"startColumn":  16,
"endLine":  109,
"endColumn":  23
}
}
]
}
],
"shortMessage":  "\"Dispose\" of \"request\".",
"fullMessage":  "You can\u0027t rely on garbage collection to clean up everything. Specifically, you can\u0027t count on it to release non-memory resources such as \"File\"s. For that, there\u0027s the \"IDisposable\" interface, and the contract that \"Dispose\" will always be called on such objects. When an \"IDisposable\" is a class member, then it\u0027s up to that class to call \"Dispose\" on it, ideally in its own \"Dispose\" method. If it\u0027s a local variable, then it should be instantiated with a \"using\" clause to prompt automatic cleanup when it goes out of scope.",
"properties":  {
"severity":  "Warning",
"warningLevel":  "1",
"defaultSeverity":  "Warning",
"title":  "\"IDisposables\" should be disposed",
"category":  "Reliability",
"helpLink":  "http://vs.sonarlint.org/rules/index.html#version=1.7.0\u0026ruleId=S2930",
"isEnabledByDefault":  "True",
"isSuppressedInSource":  "False"
}
},
{
"ruleId":  "S2930",
"locations":  [
{
"analysisTarget":  [
{
"uri":  "Nancy\\src\\Nancy.Tests\\Unit\\ViewEngines\\DefaultRenderContextFixture.cs",
"region":  {
"startLine":  110,
"startColumn":  16,
"endLine":  110,
"endColumn":  28
}
}
]
}
],
"shortMessage":  "\"Dispose\" of \"nancyContext\".",
"fullMessage":  "You can\u0027t rely on garbage collection to clean up everything. Specifically, you can\u0027t count on it to release non-memory resources such as \"File\"s. For that, there\u0027s the \"IDisposable\" interface, and the contract that \"Dispose\" will always be called on such objects. When an \"IDisposable\" is a class member, then it\u0027s up to that class to call \"Dispose\" on it, ideally in its own \"Dispose\" method. If it\u0027s a local variable, then it should be instantiated with a \"using\" clause to prompt automatic cleanup when it goes out of scope.",
"properties":  {
"severity":  "Warning",
"warningLevel":  "1",
"defaultSeverity":  "Warning",
"title":  "\"IDisposables\" should be disposed",
"category":  "Reliability",
"helpLink":  "http://vs.sonarlint.org/rules/index.html#version=1.7.0\u0026ruleId=S2930",
"isEnabledByDefault":  "True",
"isSuppressedInSource":  "False"
}
},
{
"ruleId":  "S2930",
"locations":  [
{
"analysisTarget":  [
{
"uri":  "Nancy\\src\\Nancy.Tests\\Unit\\ViewEngines\\DefaultRenderContextFixture.cs",
"region":  {
"startLine":  128,
"startColumn":  16,
"endLine":  128,
"endColumn":  23
}
}
]
}
],
"shortMessage":  "\"Dispose\" of \"request\".",
"fullMessage":  "You can\u0027t rely on garbage collection to clean up everything. Specifically, you can\u0027t count on it to release non-memory resources such as \"File\"s. For that, there\u0027s the \"IDisposable\" interface, and the contract that \"Dispose\" will always be called on such objects. When an \"IDisposable\" is a class member, then it\u0027s up to that class to call \"Dispose\" on it, ideally in its own \"Dispose\" method. If it\u0027s a local variable, then it should be instantiated with a \"using\" clause to prompt automatic cleanup when it goes out of scope.",
"properties":  {
"severity":  "Warning",
"warningLevel":  "1",
"defaultSeverity":  "Warning",
"title":  "\"IDisposables\" should be disposed",
"category":  "Reliability",
"helpLink":  "http://vs.sonarlint.org/rules/index.html#version=1.7.0\u0026ruleId=S2930",
"isEnabledByDefault":  "True",
"isSuppressedInSource":  "False"
}
},
{
"ruleId":  "S2930",
"locations":  [
{
"analysisTarget":  [
{
"uri":  "Nancy\\src\\Nancy.Tests\\Unit\\ViewEngines\\DefaultRenderContextFixture.cs",
"region":  {
"startLine":  129,
"startColumn":  16,
"endLine":  129,
"endColumn":  28
}
}
]
}
],
"shortMessage":  "\"Dispose\" of \"nancyContext\".",
"fullMessage":  "You can\u0027t rely on garbage collection to clean up everything. Specifically, you can\u0027t count on it to release non-memory resources such as \"File\"s. For that, there\u0027s the \"IDisposable\" interface, and the contract that \"Dispose\" will always be called on such objects. When an \"IDisposable\" is a class member, then it\u0027s up to that class to call \"Dispose\" on it, ideally in its own \"Dispose\" method. If it\u0027s a local variable, then it should be instantiated with a \"using\" clause to prompt automatic cleanup when it goes out of scope.",
"properties":  {
"severity":  "Warning",
"warningLevel":  "1",
"defaultSeverity":  "Warning",
"title":  "\"IDisposables\" should be disposed",
"category":  "Reliability",
"helpLink":  "http://vs.sonarlint.org/rules/index.html#version=1.7.0\u0026ruleId=S2930",
"isEnabledByDefault":  "True",
"isSuppressedInSource":  "False"
}
},
{
"ruleId":  "S2930",
"locations":  [
{
"analysisTarget":  [
{
"uri":  "Nancy\\src\\Nancy.Tests\\Unit\\ViewEngines\\DefaultRenderContextFixture.cs",
"region":  {
"startLine":  147,
"startColumn":  16,
"endLine":  147,
"endColumn":  23
}
}
]
}
],
"shortMessage":  "\"Dispose\" of \"request\".",
"fullMessage":  "You can\u0027t rely on garbage collection to clean up everything. Specifically, you can\u0027t count on it to release non-memory resources such as \"File\"s. For that, there\u0027s the \"IDisposable\" interface, and the contract that \"Dispose\" will always be called on such objects. When an \"IDisposable\" is a class member, then it\u0027s up to that class to call \"Dispose\" on it, ideally in its own \"Dispose\" method. If it\u0027s a local variable, then it should be instantiated with a \"using\" clause to prompt automatic cleanup when it goes out of scope.",
"properties":  {
"severity":  "Warning",
"warningLevel":  "1",
"defaultSeverity":  "Warning",
"title":  "\"IDisposables\" should be disposed",
"category":  "Reliability",
"helpLink":  "http://vs.sonarlint.org/rules/index.html#version=1.7.0\u0026ruleId=S2930",
"isEnabledByDefault":  "True",
"isSuppressedInSource":  "False"
}
},
{
"ruleId":  "S2930",
"locations":  [
{
"analysisTarget":  [
{
"uri":  "Nancy\\src\\Nancy.Tests\\Unit\\ViewEngines\\DefaultRenderContextFixture.cs",
"region":  {
"startLine":  148,
"startColumn":  16,
"endLine":  148,
"endColumn":  28
}
}
]
}
],
"shortMessage":  "\"Dispose\" of \"nancyContext\".",
"fullMessage":  "You can\u0027t rely on garbage collection to clean up everything. Specifically, you can\u0027t count on it to release non-memory resources such as \"File\"s. For that, there\u0027s the \"IDisposable\" interface, and the contract that \"Dispose\" will always be called on such objects. When an \"IDisposable\" is a class member, then it\u0027s up to that class to call \"Dispose\" on it, ideally in its own \"Dispose\" method. If it\u0027s a local variable, then it should be instantiated with a \"using\" clause to prompt automatic cleanup when it goes out of scope.",
"properties":  {
"severity":  "Warning",
"warningLevel":  "1",
"defaultSeverity":  "Warning",
"title":  "\"IDisposables\" should be disposed",
"category":  "Reliability",
"helpLink":  "http://vs.sonarlint.org/rules/index.html#version=1.7.0\u0026ruleId=S2930",
"isEnabledByDefault":  "True",
"isSuppressedInSource":  "False"
}
},
{
"ruleId":  "S2930",
"locations":  [
{
"analysisTarget":  [
{
"uri":  "Nancy\\src\\Nancy.Tests\\Unit\\ViewEngines\\DefaultRenderContextFixture.cs",
"region":  {
"startLine":  160,
"startColumn":  16,
"endLine":  160,
"endColumn":  28
}
}
]
}
],
"shortMessage":  "\"Dispose\" of \"nancyContext\".",
"fullMessage":  "You can\u0027t rely on garbage collection to clean up everything. Specifically, you can\u0027t count on it to release non-memory resources such as \"File\"s. For that, there\u0027s the \"IDisposable\" interface, and the contract that \"Dispose\" will always be called on such objects. When an \"IDisposable\" is a class member, then it\u0027s up to that class to call \"Dispose\" on it, ideally in its own \"Dispose\" method. If it\u0027s a local variable, then it should be instantiated with a \"using\" clause to prompt automatic cleanup when it goes out of scope.",
"properties":  {
"severity":  "Warning",
"warningLevel":  "1",
"defaultSeverity":  "Warning",
"title":  "\"IDisposables\" should be disposed",
"category":  "Reliability",
"helpLink":  "http://vs.sonarlint.org/rules/index.html#version=1.7.0\u0026ruleId=S2930",
"isEnabledByDefault":  "True",
"isSuppressedInSource":  "False"
}
},
{
"ruleId":  "S2930",
"locations":  [
{
"analysisTarget":  [
{
"uri":  "Nancy\\src\\Nancy.Tests\\Unit\\ViewEngines\\DefaultRenderContextFixture.cs",
"region":  {
"startLine":  175,
"startColumn":  16,
"endLine":  175,
"endColumn":  28
}
}
]
}
],
"shortMessage":  "\"Dispose\" of \"nancyContext\".",
"fullMessage":  "You can\u0027t rely on garbage collection to clean up everything. Specifically, you can\u0027t count on it to release non-memory resources such as \"File\"s. For that, there\u0027s the \"IDisposable\" interface, and the contract that \"Dispose\" will always be called on such objects. When an \"IDisposable\" is a class member, then it\u0027s up to that class to call \"Dispose\" on it, ideally in its own \"Dispose\" method. If it\u0027s a local variable, then it should be instantiated with a \"using\" clause to prompt automatic cleanup when it goes out of scope.",
"properties":  {
"severity":  "Warning",
"warningLevel":  "1",
"defaultSeverity":  "Warning",
"title":  "\"IDisposables\" should be disposed",
"category":  "Reliability",
"helpLink":  "http://vs.sonarlint.org/rules/index.html#version=1.7.0\u0026ruleId=S2930",
"isEnabledByDefault":  "True",
"isSuppressedInSource":  "False"
}
},
{
"ruleId":  "S2930",
"locations":  [
{
"analysisTarget":  [
{
"uri":  "Nancy\\src\\Nancy.Tests\\Unit\\ViewEngines\\DefaultRenderContextFixture.cs",
"region":  {
"startLine":  188,
"startColumn":  16,
"endLine":  188,
"endColumn":  28
}
}
]
}
],
"shortMessage":  "\"Dispose\" of \"nancyContext\".",
"fullMessage":  "You can\u0027t rely on garbage collection to clean up everything. Specifically, you can\u0027t count on it to release non-memory resources such as \"File\"s. For that, there\u0027s the \"IDisposable\" interface, and the contract that \"Dispose\" will always be called on such objects. When an \"IDisposable\" is a class member, then it\u0027s up to that class to call \"Dispose\" on it, ideally in its own \"Dispose\" method. If it\u0027s a local variable, then it should be instantiated with a \"using\" clause to prompt automatic cleanup when it goes out of scope.",
"properties":  {
"severity":  "Warning",
"warningLevel":  "1",
"defaultSeverity":  "Warning",
"title":  "\"IDisposables\" should be disposed",
"category":  "Reliability",
"helpLink":  "http://vs.sonarlint.org/rules/index.html#version=1.7.0\u0026ruleId=S2930",
"isEnabledByDefault":  "True",
"isSuppressedInSource":  "False"
}
},
{
"ruleId":  "S2930",
"locations":  [
{
"analysisTarget":  [
{
"uri":  "Nancy\\src\\Nancy.Tests\\Unit\\ViewEngines\\DefaultRenderContextFixture.cs",
"region":  {
"startLine":  201,
"startColumn":  16,
"endLine":  201,
"endColumn":  28
}
}
]
}
],
"shortMessage":  "\"Dispose\" of \"nancyContext\".",
"fullMessage":  "You can\u0027t rely on garbage collection to clean up everything. Specifically, you can\u0027t count on it to release non-memory resources such as \"File\"s. For that, there\u0027s the \"IDisposable\" interface, and the contract that \"Dispose\" will always be called on such objects. When an \"IDisposable\" is a class member, then it\u0027s up to that class to call \"Dispose\" on it, ideally in its own \"Dispose\" method. If it\u0027s a local variable, then it should be instantiated with a \"using\" clause to prompt automatic cleanup when it goes out of scope.",
"properties":  {
"severity":  "Warning",
"warningLevel":  "1",
"defaultSeverity":  "Warning",
"title":  "\"IDisposables\" should be disposed",
"category":  "Reliability",
"helpLink":  "http://vs.sonarlint.org/rules/index.html#version=1.7.0\u0026ruleId=S2930",
"isEnabledByDefault":  "True",
"isSuppressedInSource":  "False"
}
},
{
"ruleId":  "S2930",
"locations":  [
{
"analysisTarget":  [
{
"uri":  "Nancy\\src\\Nancy.Tests\\Unit\\ViewEngines\\DefaultViewFactoryFixture.cs",
"region":  {
"startLine":  302,
"startColumn":  16,
"endLine":  302,
"endColumn":  22
}
}
]
}
],
"shortMessage":  "\"Dispose\" of \"stream\".",
"fullMessage":  "You can\u0027t rely on garbage collection to clean up everything. Specifically, you can\u0027t count on it to release non-memory resources such as \"File\"s. For that, there\u0027s the \"IDisposable\" interface, and the contract that \"Dispose\" will always be called on such objects. When an \"IDisposable\" is a class member, then it\u0027s up to that class to call \"Dispose\" on it, ideally in its own \"Dispose\" method. If it\u0027s a local variable, then it should be instantiated with a \"using\" clause to prompt automatic cleanup when it goes out of scope.",
"properties":  {
"severity":  "Warning",
"warningLevel":  "1",
"defaultSeverity":  "Warning",
"title":  "\"IDisposables\" should be disposed",
"category":  "Reliability",
"helpLink":  "http://vs.sonarlint.org/rules/index.html#version=1.7.0\u0026ruleId=S2930",
"isEnabledByDefault":  "True",
"isSuppressedInSource":  "False"
}
}
]
}
