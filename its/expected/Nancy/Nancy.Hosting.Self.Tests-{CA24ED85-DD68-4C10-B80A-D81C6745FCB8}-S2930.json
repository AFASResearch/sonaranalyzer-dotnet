{
"version":  "0.1",
"toolInfo":  {
"toolName":  "Microsoft (R) Visual C# Compiler",
"productVersion":  "1.1.0",
"fileVersion":  "1.1.0"
},
"issues":  [
{
"ruleId":  "S2930",
"locations":  [
{
"analysisTarget":  [
{
"uri":  "Nancy\\src\\Nancy.Hosting.Self.Tests\\NancySelfHostFixture.cs",
"region":  {
"startLine":  105,
"startColumn":  20,
"endLine":  105,
"endColumn":  26
}
}
]
}
],
"shortMessage":  "\"Dispose\" of \"reader\".",
"fullMessage":  "You can\u0027t rely on garbage collection to clean up everything. Specifically, you can\u0027t count on it to release non-memory resources such as \"File\"s. For that, there\u0027s the \"IDisposable\" interface, and the contract that \"Dispose\" will always be called on such objects. When an \"IDisposable\" is a class member, then it\u0027s up to that class to call \"Dispose\" on it, ideally in its own \"Dispose\" method. If it\u0027s a local variable, then it should be instantiated with a \"using\" clause to prompt automatic cleanup when it goes out of scope.",
"properties":  {
"severity":  "Warning",
"warningLevel":  "1",
"defaultSeverity":  "Warning",
"title":  "\"IDisposables\" should be disposed",
"category":  "Reliability",
"helpLink":  "http://vs.sonarlint.org/rules/index.html#version=1.7.0\u0026ruleId=S2930",
"isEnabledByDefault":  "True",
"isSuppressedInSource":  "False"
}
},
{
"ruleId":  "S2930",
"locations":  [
{
"analysisTarget":  [
{
"uri":  "Nancy\\src\\Nancy.Hosting.Self.Tests\\NancySelfHostFixture.cs",
"region":  {
"startLine":  165,
"startColumn":  20,
"endLine":  165,
"endColumn":  26
}
}
]
}
],
"shortMessage":  "\"Dispose\" of \"writer\".",
"fullMessage":  "You can\u0027t rely on garbage collection to clean up everything. Specifically, you can\u0027t count on it to release non-memory resources such as \"File\"s. For that, there\u0027s the \"IDisposable\" interface, and the contract that \"Dispose\" will always be called on such objects. When an \"IDisposable\" is a class member, then it\u0027s up to that class to call \"Dispose\" on it, ideally in its own \"Dispose\" method. If it\u0027s a local variable, then it should be instantiated with a \"using\" clause to prompt automatic cleanup when it goes out of scope.",
"properties":  {
"severity":  "Warning",
"warningLevel":  "1",
"defaultSeverity":  "Warning",
"title":  "\"IDisposables\" should be disposed",
"category":  "Reliability",
"helpLink":  "http://vs.sonarlint.org/rules/index.html#version=1.7.0\u0026ruleId=S2930",
"isEnabledByDefault":  "True",
"isSuppressedInSource":  "False"
}
},
{
"ruleId":  "S2930",
"locations":  [
{
"analysisTarget":  [
{
"uri":  "Nancy\\src\\Nancy.Hosting.Self.Tests\\NancySelfHostFixture.cs",
"region":  {
"startLine":  181,
"startColumn":  20,
"endLine":  181,
"endColumn":  26
}
}
]
}
],
"shortMessage":  "\"Dispose\" of \"reader\".",
"fullMessage":  "You can\u0027t rely on garbage collection to clean up everything. Specifically, you can\u0027t count on it to release non-memory resources such as \"File\"s. For that, there\u0027s the \"IDisposable\" interface, and the contract that \"Dispose\" will always be called on such objects. When an \"IDisposable\" is a class member, then it\u0027s up to that class to call \"Dispose\" on it, ideally in its own \"Dispose\" method. If it\u0027s a local variable, then it should be instantiated with a \"using\" clause to prompt automatic cleanup when it goes out of scope.",
"properties":  {
"severity":  "Warning",
"warningLevel":  "1",
"defaultSeverity":  "Warning",
"title":  "\"IDisposables\" should be disposed",
"category":  "Reliability",
"helpLink":  "http://vs.sonarlint.org/rules/index.html#version=1.7.0\u0026ruleId=S2930",
"isEnabledByDefault":  "True",
"isSuppressedInSource":  "False"
}
},
{
"ruleId":  "S2930",
"locations":  [
{
"analysisTarget":  [
{
"uri":  "Nancy\\src\\Nancy.Hosting.Self.Tests\\NancySelfHostFixture.cs",
"region":  {
"startLine":  221,
"startColumn":  20,
"endLine":  221,
"endColumn":  26
}
}
]
}
],
"shortMessage":  "\"Dispose\" of \"reader\".",
"fullMessage":  "You can\u0027t rely on garbage collection to clean up everything. Specifically, you can\u0027t count on it to release non-memory resources such as \"File\"s. For that, there\u0027s the \"IDisposable\" interface, and the contract that \"Dispose\" will always be called on such objects. When an \"IDisposable\" is a class member, then it\u0027s up to that class to call \"Dispose\" on it, ideally in its own \"Dispose\" method. If it\u0027s a local variable, then it should be instantiated with a \"using\" clause to prompt automatic cleanup when it goes out of scope.",
"properties":  {
"severity":  "Warning",
"warningLevel":  "1",
"defaultSeverity":  "Warning",
"title":  "\"IDisposables\" should be disposed",
"category":  "Reliability",
"helpLink":  "http://vs.sonarlint.org/rules/index.html#version=1.7.0\u0026ruleId=S2930",
"isEnabledByDefault":  "True",
"isSuppressedInSource":  "False"
}
},
{
"ruleId":  "S2930",
"locations":  [
{
"analysisTarget":  [
{
"uri":  "Nancy\\src\\Nancy.Hosting.Self.Tests\\NancySelfHostFixture.cs",
"region":  {
"startLine":  241,
"startColumn":  16,
"endLine":  241,
"endColumn":  20
}
}
]
}
],
"shortMessage":  "\"Dispose\" of \"host\".",
"fullMessage":  "You can\u0027t rely on garbage collection to clean up everything. Specifically, you can\u0027t count on it to release non-memory resources such as \"File\"s. For that, there\u0027s the \"IDisposable\" interface, and the contract that \"Dispose\" will always be called on such objects. When an \"IDisposable\" is a class member, then it\u0027s up to that class to call \"Dispose\" on it, ideally in its own \"Dispose\" method. If it\u0027s a local variable, then it should be instantiated with a \"using\" clause to prompt automatic cleanup when it goes out of scope.",
"properties":  {
"severity":  "Warning",
"warningLevel":  "1",
"defaultSeverity":  "Warning",
"title":  "\"IDisposables\" should be disposed",
"category":  "Reliability",
"helpLink":  "http://vs.sonarlint.org/rules/index.html#version=1.7.0\u0026ruleId=S2930",
"isEnabledByDefault":  "True",
"isSuppressedInSource":  "False"
}
}
]
}
