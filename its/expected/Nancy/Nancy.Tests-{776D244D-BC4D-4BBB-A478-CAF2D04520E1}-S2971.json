{
"version":  "0.1",
"toolInfo":  {
"toolName":  "Microsoft (R) Visual C# Compiler",
"productVersion":  "1.1.0",
"fileVersion":  "1.1.0"
},
"issues":  [
{
"ruleId":  "S2971",
"locations":  [
{
"analysisTarget":  [
{
"uri":  "Nancy\\src\\Nancy.Tests\\Unit\\Bootstrapper\\NancyBootstrapperBaseFixture.cs",
"region":  {
"startLine":  75,
"startColumn":  44,
"endLine":  75,
"endColumn":  49
}
}
]
}
],
"shortMessage":  "Drop \"Where\" and move the condition into the \"FirstOrDefault\".",
"fullMessage":  "In the interests of readability, code that can be simplified should be simplified. To that end, there are several ways \"IEnumerable LINQ\"s can be simplified. Use \"OfType\" instead of using \"Select\" with \"as\" to type cast elements and then null-checking in a query expression to choose elements based on type. Use \"OfType\" instead of using \"Where\" and the \"is\" operator, followed by a cast in a \"Select\". Use an expression in \"Any\" instead of \"Where(element =\u003e [expression]).Any()\". Use \"Count\" instead of \"Count()\" when it\u0027s available. Don\u0027t call \"ToArray()\" or \"ToList()\" in the middle of a query chain.",
"properties":  {
"severity":  "Warning",
"warningLevel":  "1",
"defaultSeverity":  "Warning",
"title":  "\"IEnumerable\" LINQs should be simplified",
"category":  "Maintainability",
"helpLink":  "http://vs.sonarlint.org/rules/index.html#version=1.9.0\u0026ruleId=S2971",
"isEnabledByDefault":  "True",
"isSuppressedInSource":  "False"
}
},
{
"ruleId":  "S2971",
"locations":  [
{
"analysisTarget":  [
{
"uri":  "Nancy\\src\\Nancy.Tests\\Unit\\Bootstrapper\\NancyBootstrapperBaseFixture.cs",
"region":  {
"startLine":  76,
"startColumn":  44,
"endLine":  76,
"endColumn":  49
}
}
]
}
],
"shortMessage":  "Drop \"Where\" and move the condition into the \"FirstOrDefault\".",
"fullMessage":  "In the interests of readability, code that can be simplified should be simplified. To that end, there are several ways \"IEnumerable LINQ\"s can be simplified. Use \"OfType\" instead of using \"Select\" with \"as\" to type cast elements and then null-checking in a query expression to choose elements based on type. Use \"OfType\" instead of using \"Where\" and the \"is\" operator, followed by a cast in a \"Select\". Use an expression in \"Any\" instead of \"Where(element =\u003e [expression]).Any()\". Use \"Count\" instead of \"Count()\" when it\u0027s available. Don\u0027t call \"ToArray()\" or \"ToList()\" in the middle of a query chain.",
"properties":  {
"severity":  "Warning",
"warningLevel":  "1",
"defaultSeverity":  "Warning",
"title":  "\"IEnumerable\" LINQs should be simplified",
"category":  "Maintainability",
"helpLink":  "http://vs.sonarlint.org/rules/index.html#version=1.9.0\u0026ruleId=S2971",
"isEnabledByDefault":  "True",
"isSuppressedInSource":  "False"
}
},
{
"ruleId":  "S2971",
"locations":  [
{
"analysisTarget":  [
{
"uri":  "Nancy\\src\\Nancy.Tests\\Unit\\Bootstrapper\\NancyInternalConfigurationFixture.cs",
"region":  {
"startLine":  51,
"startColumn":  19,
"endLine":  51,
"endColumn":  24
}
}
]
}
],
"shortMessage":  "Drop \"Where\" and move the condition into the \"Any\".",
"fullMessage":  "In the interests of readability, code that can be simplified should be simplified. To that end, there are several ways \"IEnumerable LINQ\"s can be simplified. Use \"OfType\" instead of using \"Select\" with \"as\" to type cast elements and then null-checking in a query expression to choose elements based on type. Use \"OfType\" instead of using \"Where\" and the \"is\" operator, followed by a cast in a \"Select\". Use an expression in \"Any\" instead of \"Where(element =\u003e [expression]).Any()\". Use \"Count\" instead of \"Count()\" when it\u0027s available. Don\u0027t call \"ToArray()\" or \"ToList()\" in the middle of a query chain.",
"properties":  {
"severity":  "Warning",
"warningLevel":  "1",
"defaultSeverity":  "Warning",
"title":  "\"IEnumerable\" LINQs should be simplified",
"category":  "Maintainability",
"helpLink":  "http://vs.sonarlint.org/rules/index.html#version=1.9.0\u0026ruleId=S2971",
"isEnabledByDefault":  "True",
"isSuppressedInSource":  "False"
}
},
{
"ruleId":  "S2971",
"locations":  [
{
"analysisTarget":  [
{
"uri":  "Nancy\\src\\Nancy.Tests\\Unit\\Routing\\DefaultRequestDispatcherFixture.cs",
"region":  {
"startLine":  102,
"startColumn":  35,
"endLine":  102,
"endColumn":  40
}
}
]
}
],
"shortMessage":  "Use \"Count\" property here instead.",
"fullMessage":  "In the interests of readability, code that can be simplified should be simplified. To that end, there are several ways \"IEnumerable LINQ\"s can be simplified. Use \"OfType\" instead of using \"Select\" with \"as\" to type cast elements and then null-checking in a query expression to choose elements based on type. Use \"OfType\" instead of using \"Where\" and the \"is\" operator, followed by a cast in a \"Select\". Use an expression in \"Any\" instead of \"Where(element =\u003e [expression]).Any()\". Use \"Count\" instead of \"Count()\" when it\u0027s available. Don\u0027t call \"ToArray()\" or \"ToList()\" in the middle of a query chain.",
"properties":  {
"severity":  "Warning",
"warningLevel":  "1",
"defaultSeverity":  "Warning",
"title":  "\"IEnumerable\" LINQs should be simplified",
"category":  "Maintainability",
"helpLink":  "http://vs.sonarlint.org/rules/index.html#version=1.9.0\u0026ruleId=S2971",
"isEnabledByDefault":  "True",
"isSuppressedInSource":  "False"
}
},
{
"ruleId":  "S2971",
"locations":  [
{
"analysisTarget":  [
{
"uri":  "Nancy\\src\\Nancy.Tests\\Unit\\Routing\\DefaultRequestDispatcherFixture.cs",
"region":  {
"startLine":  148,
"startColumn":  35,
"endLine":  148,
"endColumn":  40
}
}
]
}
],
"shortMessage":  "Use \"Count\" property here instead.",
"fullMessage":  "In the interests of readability, code that can be simplified should be simplified. To that end, there are several ways \"IEnumerable LINQ\"s can be simplified. Use \"OfType\" instead of using \"Select\" with \"as\" to type cast elements and then null-checking in a query expression to choose elements based on type. Use \"OfType\" instead of using \"Where\" and the \"is\" operator, followed by a cast in a \"Select\". Use an expression in \"Any\" instead of \"Where(element =\u003e [expression]).Any()\". Use \"Count\" instead of \"Count()\" when it\u0027s available. Don\u0027t call \"ToArray()\" or \"ToList()\" in the middle of a query chain.",
"properties":  {
"severity":  "Warning",
"warningLevel":  "1",
"defaultSeverity":  "Warning",
"title":  "\"IEnumerable\" LINQs should be simplified",
"category":  "Maintainability",
"helpLink":  "http://vs.sonarlint.org/rules/index.html#version=1.9.0\u0026ruleId=S2971",
"isEnabledByDefault":  "True",
"isSuppressedInSource":  "False"
}
},
{
"ruleId":  "S2971",
"locations":  [
{
"analysisTarget":  [
{
"uri":  "Nancy\\src\\Nancy.Tests\\Unit\\Routing\\DefaultRequestDispatcherFixture.cs",
"region":  {
"startLine":  777,
"startColumn":  35,
"endLine":  777,
"endColumn":  40
}
}
]
}
],
"shortMessage":  "Use \"Count\" property here instead.",
"fullMessage":  "In the interests of readability, code that can be simplified should be simplified. To that end, there are several ways \"IEnumerable LINQ\"s can be simplified. Use \"OfType\" instead of using \"Select\" with \"as\" to type cast elements and then null-checking in a query expression to choose elements based on type. Use \"OfType\" instead of using \"Where\" and the \"is\" operator, followed by a cast in a \"Select\". Use an expression in \"Any\" instead of \"Where(element =\u003e [expression]).Any()\". Use \"Count\" instead of \"Count()\" when it\u0027s available. Don\u0027t call \"ToArray()\" or \"ToList()\" in the middle of a query chain.",
"properties":  {
"severity":  "Warning",
"warningLevel":  "1",
"defaultSeverity":  "Warning",
"title":  "\"IEnumerable\" LINQs should be simplified",
"category":  "Maintainability",
"helpLink":  "http://vs.sonarlint.org/rules/index.html#version=1.9.0\u0026ruleId=S2971",
"isEnabledByDefault":  "True",
"isSuppressedInSource":  "False"
}
},
{
"ruleId":  "S2971",
"locations":  [
{
"analysisTarget":  [
{
"uri":  "Nancy\\src\\Nancy.Tests\\Unit\\Routing\\DefaultRequestDispatcherFixture.cs",
"region":  {
"startLine":  819,
"startColumn":  35,
"endLine":  819,
"endColumn":  40
}
}
]
}
],
"shortMessage":  "Use \"Count\" property here instead.",
"fullMessage":  "In the interests of readability, code that can be simplified should be simplified. To that end, there are several ways \"IEnumerable LINQ\"s can be simplified. Use \"OfType\" instead of using \"Select\" with \"as\" to type cast elements and then null-checking in a query expression to choose elements based on type. Use \"OfType\" instead of using \"Where\" and the \"is\" operator, followed by a cast in a \"Select\". Use an expression in \"Any\" instead of \"Where(element =\u003e [expression]).Any()\". Use \"Count\" instead of \"Count()\" when it\u0027s available. Don\u0027t call \"ToArray()\" or \"ToList()\" in the middle of a query chain.",
"properties":  {
"severity":  "Warning",
"warningLevel":  "1",
"defaultSeverity":  "Warning",
"title":  "\"IEnumerable\" LINQs should be simplified",
"category":  "Maintainability",
"helpLink":  "http://vs.sonarlint.org/rules/index.html#version=1.9.0\u0026ruleId=S2971",
"isEnabledByDefault":  "True",
"isSuppressedInSource":  "False"
}
},
{
"ruleId":  "S2971",
"locations":  [
{
"analysisTarget":  [
{
"uri":  "Nancy\\src\\Nancy.Tests\\Unit\\Routing\\DefaultRequestDispatcherFixture.cs",
"region":  {
"startLine":  861,
"startColumn":  35,
"endLine":  861,
"endColumn":  40
}
}
]
}
],
"shortMessage":  "Use \"Count\" property here instead.",
"fullMessage":  "In the interests of readability, code that can be simplified should be simplified. To that end, there are several ways \"IEnumerable LINQ\"s can be simplified. Use \"OfType\" instead of using \"Select\" with \"as\" to type cast elements and then null-checking in a query expression to choose elements based on type. Use \"OfType\" instead of using \"Where\" and the \"is\" operator, followed by a cast in a \"Select\". Use an expression in \"Any\" instead of \"Where(element =\u003e [expression]).Any()\". Use \"Count\" instead of \"Count()\" when it\u0027s available. Don\u0027t call \"ToArray()\" or \"ToList()\" in the middle of a query chain.",
"properties":  {
"severity":  "Warning",
"warningLevel":  "1",
"defaultSeverity":  "Warning",
"title":  "\"IEnumerable\" LINQs should be simplified",
"category":  "Maintainability",
"helpLink":  "http://vs.sonarlint.org/rules/index.html#version=1.9.0\u0026ruleId=S2971",
"isEnabledByDefault":  "True",
"isSuppressedInSource":  "False"
}
},
{
"ruleId":  "S2971",
"locations":  [
{
"analysisTarget":  [
{
"uri":  "Nancy\\src\\Nancy.Tests\\Unit\\Routing\\RouteCacheFixture.cs",
"region":  {
"startLine":  59,
"startColumn":  70,
"endLine":  59,
"endColumn":  75
}
}
]
}
],
"shortMessage":  "Use \"Count\" property here instead.",
"fullMessage":  "In the interests of readability, code that can be simplified should be simplified. To that end, there are several ways \"IEnumerable LINQ\"s can be simplified. Use \"OfType\" instead of using \"Select\" with \"as\" to type cast elements and then null-checking in a query expression to choose elements based on type. Use \"OfType\" instead of using \"Where\" and the \"is\" operator, followed by a cast in a \"Select\". Use an expression in \"Any\" instead of \"Where(element =\u003e [expression]).Any()\". Use \"Count\" instead of \"Count()\" when it\u0027s available. Don\u0027t call \"ToArray()\" or \"ToList()\" in the middle of a query chain.",
"properties":  {
"severity":  "Warning",
"warningLevel":  "1",
"defaultSeverity":  "Warning",
"title":  "\"IEnumerable\" LINQs should be simplified",
"category":  "Maintainability",
"helpLink":  "http://vs.sonarlint.org/rules/index.html#version=1.9.0\u0026ruleId=S2971",
"isEnabledByDefault":  "True",
"isSuppressedInSource":  "False"
}
}
]
}
