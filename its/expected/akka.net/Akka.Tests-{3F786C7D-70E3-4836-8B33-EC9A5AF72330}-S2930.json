{
"version":  "0.1",
"toolInfo":  {
"toolName":  "Microsoft (R) Visual C# Compiler",
"productVersion":  "1.1.0",
"fileVersion":  "1.1.0"
},
"issues":  [
{
"ruleId":  "S2930",
"locations":  [
{
"analysisTarget":  [
{
"uri":  "akka.net\\src\\core\\Akka.Tests\\Actor\\ActorSystemTests.cs",
"region":  {
"startLine":  28,
"startColumn":  16,
"endLine":  28,
"endColumn":  22
}
}
]
}
],
"shortMessage":  "\"Dispose\" of \"system\".",
"fullMessage":  "You can\u0027t rely on garbage collection to clean up everything. Specifically, you can\u0027t count on it to release non-memory resources such as \"File\"s. For that, there\u0027s the \"IDisposable\" interface, and the contract that \"Dispose\" will always be called on such objects. When an \"IDisposable\" is a class member, then it\u0027s up to that class to call \"Dispose\" on it, ideally in its own \"Dispose\" method. If it\u0027s a local variable, then it should be instantiated with a \"using\" clause to prompt automatic cleanup when it goes out of scope.",
"properties":  {
"severity":  "Warning",
"warningLevel":  "1",
"defaultSeverity":  "Warning",
"title":  "\"IDisposables\" should be disposed",
"category":  "Reliability",
"helpLink":  "http://vs.sonarlint.org/rules/index.html#version=1.7.0\u0026ruleId=S2930",
"isEnabledByDefault":  "True",
"isSuppressedInSource":  "False"
}
},
{
"ruleId":  "S2930",
"locations":  [
{
"analysisTarget":  [
{
"uri":  "akka.net\\src\\core\\Akka.Tests\\Actor\\ActorSystemTests.cs",
"region":  {
"startLine":  43,
"startColumn":  16,
"endLine":  43,
"endColumn":  22
}
}
]
}
],
"shortMessage":  "\"Dispose\" of \"system\".",
"fullMessage":  "You can\u0027t rely on garbage collection to clean up everything. Specifically, you can\u0027t count on it to release non-memory resources such as \"File\"s. For that, there\u0027s the \"IDisposable\" interface, and the contract that \"Dispose\" will always be called on such objects. When an \"IDisposable\" is a class member, then it\u0027s up to that class to call \"Dispose\" on it, ideally in its own \"Dispose\" method. If it\u0027s a local variable, then it should be instantiated with a \"using\" clause to prompt automatic cleanup when it goes out of scope.",
"properties":  {
"severity":  "Warning",
"warningLevel":  "1",
"defaultSeverity":  "Warning",
"title":  "\"IDisposables\" should be disposed",
"category":  "Reliability",
"helpLink":  "http://vs.sonarlint.org/rules/index.html#version=1.7.0\u0026ruleId=S2930",
"isEnabledByDefault":  "True",
"isSuppressedInSource":  "False"
}
},
{
"ruleId":  "S2930",
"locations":  [
{
"analysisTarget":  [
{
"uri":  "akka.net\\src\\core\\Akka.Tests\\Actor\\Scheduler\\TaskBasedScheduler_ActionScheduler_Cancellation_Tests.cs",
"region":  {
"startLine":  49,
"startColumn":  16,
"endLine":  49,
"endColumn":  26
}
}
]
}
],
"shortMessage":  "\"Dispose\" of \"cancelable\".",
"fullMessage":  "You can\u0027t rely on garbage collection to clean up everything. Specifically, you can\u0027t count on it to release non-memory resources such as \"File\"s. For that, there\u0027s the \"IDisposable\" interface, and the contract that \"Dispose\" will always be called on such objects. When an \"IDisposable\" is a class member, then it\u0027s up to that class to call \"Dispose\" on it, ideally in its own \"Dispose\" method. If it\u0027s a local variable, then it should be instantiated with a \"using\" clause to prompt automatic cleanup when it goes out of scope.",
"properties":  {
"severity":  "Warning",
"warningLevel":  "1",
"defaultSeverity":  "Warning",
"title":  "\"IDisposables\" should be disposed",
"category":  "Reliability",
"helpLink":  "http://vs.sonarlint.org/rules/index.html#version=1.7.0\u0026ruleId=S2930",
"isEnabledByDefault":  "True",
"isSuppressedInSource":  "False"
}
},
{
"ruleId":  "S2930",
"locations":  [
{
"analysisTarget":  [
{
"uri":  "akka.net\\src\\core\\Akka.Tests\\Actor\\Scheduler\\TaskBasedScheduler_ActionScheduler_Cancellation_Tests.cs",
"region":  {
"startLine":  63,
"startColumn":  16,
"endLine":  63,
"endColumn":  26
}
}
]
}
],
"shortMessage":  "\"Dispose\" of \"cancelable\".",
"fullMessage":  "You can\u0027t rely on garbage collection to clean up everything. Specifically, you can\u0027t count on it to release non-memory resources such as \"File\"s. For that, there\u0027s the \"IDisposable\" interface, and the contract that \"Dispose\" will always be called on such objects. When an \"IDisposable\" is a class member, then it\u0027s up to that class to call \"Dispose\" on it, ideally in its own \"Dispose\" method. If it\u0027s a local variable, then it should be instantiated with a \"using\" clause to prompt automatic cleanup when it goes out of scope.",
"properties":  {
"severity":  "Warning",
"warningLevel":  "1",
"defaultSeverity":  "Warning",
"title":  "\"IDisposables\" should be disposed",
"category":  "Reliability",
"helpLink":  "http://vs.sonarlint.org/rules/index.html#version=1.7.0\u0026ruleId=S2930",
"isEnabledByDefault":  "True",
"isSuppressedInSource":  "False"
}
},
{
"ruleId":  "S2930",
"locations":  [
{
"analysisTarget":  [
{
"uri":  "akka.net\\src\\core\\Akka.Tests\\Actor\\Scheduler\\TaskBasedScheduler_ActionScheduler_Cancellation_Tests.cs",
"region":  {
"startLine":  77,
"startColumn":  16,
"endLine":  77,
"endColumn":  26
}
}
]
}
],
"shortMessage":  "\"Dispose\" of \"cancelable\".",
"fullMessage":  "You can\u0027t rely on garbage collection to clean up everything. Specifically, you can\u0027t count on it to release non-memory resources such as \"File\"s. For that, there\u0027s the \"IDisposable\" interface, and the contract that \"Dispose\" will always be called on such objects. When an \"IDisposable\" is a class member, then it\u0027s up to that class to call \"Dispose\" on it, ideally in its own \"Dispose\" method. If it\u0027s a local variable, then it should be instantiated with a \"using\" clause to prompt automatic cleanup when it goes out of scope.",
"properties":  {
"severity":  "Warning",
"warningLevel":  "1",
"defaultSeverity":  "Warning",
"title":  "\"IDisposables\" should be disposed",
"category":  "Reliability",
"helpLink":  "http://vs.sonarlint.org/rules/index.html#version=1.7.0\u0026ruleId=S2930",
"isEnabledByDefault":  "True",
"isSuppressedInSource":  "False"
}
},
{
"ruleId":  "S2930",
"locations":  [
{
"analysisTarget":  [
{
"uri":  "akka.net\\src\\core\\Akka.Tests\\Actor\\Scheduler\\TaskBasedScheduler_ActionScheduler_Cancellation_Tests.cs",
"region":  {
"startLine":  92,
"startColumn":  16,
"endLine":  92,
"endColumn":  29
}
}
]
}
],
"shortMessage":  "\"Dispose\" of \"cancelableOdd\".",
"fullMessage":  "You can\u0027t rely on garbage collection to clean up everything. Specifically, you can\u0027t count on it to release non-memory resources such as \"File\"s. For that, there\u0027s the \"IDisposable\" interface, and the contract that \"Dispose\" will always be called on such objects. When an \"IDisposable\" is a class member, then it\u0027s up to that class to call \"Dispose\" on it, ideally in its own \"Dispose\" method. If it\u0027s a local variable, then it should be instantiated with a \"using\" clause to prompt automatic cleanup when it goes out of scope.",
"properties":  {
"severity":  "Warning",
"warningLevel":  "1",
"defaultSeverity":  "Warning",
"title":  "\"IDisposables\" should be disposed",
"category":  "Reliability",
"helpLink":  "http://vs.sonarlint.org/rules/index.html#version=1.7.0\u0026ruleId=S2930",
"isEnabledByDefault":  "True",
"isSuppressedInSource":  "False"
}
},
{
"ruleId":  "S2930",
"locations":  [
{
"analysisTarget":  [
{
"uri":  "akka.net\\src\\core\\Akka.Tests\\Actor\\Scheduler\\TaskBasedScheduler_ActionScheduler_Schedule_Tests.cs",
"region":  {
"startLine":  179,
"startColumn":  16,
"endLine":  179,
"endColumn":  32
}
}
]
}
],
"shortMessage":  "\"Dispose\" of \"manualResetEvent\".",
"fullMessage":  "You can\u0027t rely on garbage collection to clean up everything. Specifically, you can\u0027t count on it to release non-memory resources such as \"File\"s. For that, there\u0027s the \"IDisposable\" interface, and the contract that \"Dispose\" will always be called on such objects. When an \"IDisposable\" is a class member, then it\u0027s up to that class to call \"Dispose\" on it, ideally in its own \"Dispose\" method. If it\u0027s a local variable, then it should be instantiated with a \"using\" clause to prompt automatic cleanup when it goes out of scope.",
"properties":  {
"severity":  "Warning",
"warningLevel":  "1",
"defaultSeverity":  "Warning",
"title":  "\"IDisposables\" should be disposed",
"category":  "Reliability",
"helpLink":  "http://vs.sonarlint.org/rules/index.html#version=1.7.0\u0026ruleId=S2930",
"isEnabledByDefault":  "True",
"isSuppressedInSource":  "False"
}
},
{
"ruleId":  "S2930",
"locations":  [
{
"analysisTarget":  [
{
"uri":  "akka.net\\src\\core\\Akka.Tests\\Actor\\Scheduler\\TaskBasedScheduler_ActionScheduler_Schedule_Tests.cs",
"region":  {
"startLine":  190,
"startColumn":  16,
"endLine":  190,
"endColumn":  32
}
}
]
}
],
"shortMessage":  "\"Dispose\" of \"manualResetEvent\".",
"fullMessage":  "You can\u0027t rely on garbage collection to clean up everything. Specifically, you can\u0027t count on it to release non-memory resources such as \"File\"s. For that, there\u0027s the \"IDisposable\" interface, and the contract that \"Dispose\" will always be called on such objects. When an \"IDisposable\" is a class member, then it\u0027s up to that class to call \"Dispose\" on it, ideally in its own \"Dispose\" method. If it\u0027s a local variable, then it should be instantiated with a \"using\" clause to prompt automatic cleanup when it goes out of scope.",
"properties":  {
"severity":  "Warning",
"warningLevel":  "1",
"defaultSeverity":  "Warning",
"title":  "\"IDisposables\" should be disposed",
"category":  "Reliability",
"helpLink":  "http://vs.sonarlint.org/rules/index.html#version=1.7.0\u0026ruleId=S2930",
"isEnabledByDefault":  "True",
"isSuppressedInSource":  "False"
}
},
{
"ruleId":  "S2930",
"locations":  [
{
"analysisTarget":  [
{
"uri":  "akka.net\\src\\core\\Akka.Tests\\Actor\\Scheduler\\TaskBasedScheduler_TellScheduler_Cancellation_Tests.cs",
"region":  {
"startLine":  50,
"startColumn":  16,
"endLine":  50,
"endColumn":  26
}
}
]
}
],
"shortMessage":  "\"Dispose\" of \"cancelable\".",
"fullMessage":  "You can\u0027t rely on garbage collection to clean up everything. Specifically, you can\u0027t count on it to release non-memory resources such as \"File\"s. For that, there\u0027s the \"IDisposable\" interface, and the contract that \"Dispose\" will always be called on such objects. When an \"IDisposable\" is a class member, then it\u0027s up to that class to call \"Dispose\" on it, ideally in its own \"Dispose\" method. If it\u0027s a local variable, then it should be instantiated with a \"using\" clause to prompt automatic cleanup when it goes out of scope.",
"properties":  {
"severity":  "Warning",
"warningLevel":  "1",
"defaultSeverity":  "Warning",
"title":  "\"IDisposables\" should be disposed",
"category":  "Reliability",
"helpLink":  "http://vs.sonarlint.org/rules/index.html#version=1.7.0\u0026ruleId=S2930",
"isEnabledByDefault":  "True",
"isSuppressedInSource":  "False"
}
},
{
"ruleId":  "S2930",
"locations":  [
{
"analysisTarget":  [
{
"uri":  "akka.net\\src\\core\\Akka.Tests\\Actor\\Scheduler\\TaskBasedScheduler_TellScheduler_Cancellation_Tests.cs",
"region":  {
"startLine":  65,
"startColumn":  16,
"endLine":  65,
"endColumn":  26
}
}
]
}
],
"shortMessage":  "\"Dispose\" of \"cancelable\".",
"fullMessage":  "You can\u0027t rely on garbage collection to clean up everything. Specifically, you can\u0027t count on it to release non-memory resources such as \"File\"s. For that, there\u0027s the \"IDisposable\" interface, and the contract that \"Dispose\" will always be called on such objects. When an \"IDisposable\" is a class member, then it\u0027s up to that class to call \"Dispose\" on it, ideally in its own \"Dispose\" method. If it\u0027s a local variable, then it should be instantiated with a \"using\" clause to prompt automatic cleanup when it goes out of scope.",
"properties":  {
"severity":  "Warning",
"warningLevel":  "1",
"defaultSeverity":  "Warning",
"title":  "\"IDisposables\" should be disposed",
"category":  "Reliability",
"helpLink":  "http://vs.sonarlint.org/rules/index.html#version=1.7.0\u0026ruleId=S2930",
"isEnabledByDefault":  "True",
"isSuppressedInSource":  "False"
}
},
{
"ruleId":  "S2930",
"locations":  [
{
"analysisTarget":  [
{
"uri":  "akka.net\\src\\core\\Akka.Tests\\Actor\\Scheduler\\TaskBasedScheduler_TellScheduler_Cancellation_Tests.cs",
"region":  {
"startLine":  80,
"startColumn":  16,
"endLine":  80,
"endColumn":  26
}
}
]
}
],
"shortMessage":  "\"Dispose\" of \"cancelable\".",
"fullMessage":  "You can\u0027t rely on garbage collection to clean up everything. Specifically, you can\u0027t count on it to release non-memory resources such as \"File\"s. For that, there\u0027s the \"IDisposable\" interface, and the contract that \"Dispose\" will always be called on such objects. When an \"IDisposable\" is a class member, then it\u0027s up to that class to call \"Dispose\" on it, ideally in its own \"Dispose\" method. If it\u0027s a local variable, then it should be instantiated with a \"using\" clause to prompt automatic cleanup when it goes out of scope.",
"properties":  {
"severity":  "Warning",
"warningLevel":  "1",
"defaultSeverity":  "Warning",
"title":  "\"IDisposables\" should be disposed",
"category":  "Reliability",
"helpLink":  "http://vs.sonarlint.org/rules/index.html#version=1.7.0\u0026ruleId=S2930",
"isEnabledByDefault":  "True",
"isSuppressedInSource":  "False"
}
},
{
"ruleId":  "S2930",
"locations":  [
{
"analysisTarget":  [
{
"uri":  "akka.net\\src\\core\\Akka.Tests\\Actor\\Scheduler\\TaskBasedScheduler_TellScheduler_Cancellation_Tests.cs",
"region":  {
"startLine":  95,
"startColumn":  16,
"endLine":  95,
"endColumn":  29
}
}
]
}
],
"shortMessage":  "\"Dispose\" of \"cancelableOdd\".",
"fullMessage":  "You can\u0027t rely on garbage collection to clean up everything. Specifically, you can\u0027t count on it to release non-memory resources such as \"File\"s. For that, there\u0027s the \"IDisposable\" interface, and the contract that \"Dispose\" will always be called on such objects. When an \"IDisposable\" is a class member, then it\u0027s up to that class to call \"Dispose\" on it, ideally in its own \"Dispose\" method. If it\u0027s a local variable, then it should be instantiated with a \"using\" clause to prompt automatic cleanup when it goes out of scope.",
"properties":  {
"severity":  "Warning",
"warningLevel":  "1",
"defaultSeverity":  "Warning",
"title":  "\"IDisposables\" should be disposed",
"category":  "Reliability",
"helpLink":  "http://vs.sonarlint.org/rules/index.html#version=1.7.0\u0026ruleId=S2930",
"isEnabledByDefault":  "True",
"isSuppressedInSource":  "False"
}
},
{
"ruleId":  "S2930",
"locations":  [
{
"analysisTarget":  [
{
"uri":  "akka.net\\src\\core\\Akka.Tests\\Actor\\SupervisorHierarchySpec.cs",
"region":  {
"startLine":  100,
"startColumn":  16,
"endLine":  100,
"endColumn":  25
}
}
]
}
],
"shortMessage":  "\"Dispose\" of \"countDown\".",
"fullMessage":  "You can\u0027t rely on garbage collection to clean up everything. Specifically, you can\u0027t count on it to release non-memory resources such as \"File\"s. For that, there\u0027s the \"IDisposable\" interface, and the contract that \"Dispose\" will always be called on such objects. When an \"IDisposable\" is a class member, then it\u0027s up to that class to call \"Dispose\" on it, ideally in its own \"Dispose\" method. If it\u0027s a local variable, then it should be instantiated with a \"using\" clause to prompt automatic cleanup when it goes out of scope.",
"properties":  {
"severity":  "Warning",
"warningLevel":  "1",
"defaultSeverity":  "Warning",
"title":  "\"IDisposables\" should be disposed",
"category":  "Reliability",
"helpLink":  "http://vs.sonarlint.org/rules/index.html#version=1.7.0\u0026ruleId=S2930",
"isEnabledByDefault":  "True",
"isSuppressedInSource":  "False"
}
},
{
"ruleId":  "S2930",
"locations":  [
{
"analysisTarget":  [
{
"uri":  "akka.net\\src\\core\\Akka.Tests\\Actor\\SupervisorHierarchySpec.cs",
"region":  {
"startLine":  128,
"startColumn":  16,
"endLine":  128,
"endColumn":  33
}
}
]
}
],
"shortMessage":  "\"Dispose\" of \"countDownMessages\".",
"fullMessage":  "You can\u0027t rely on garbage collection to clean up everything. Specifically, you can\u0027t count on it to release non-memory resources such as \"File\"s. For that, there\u0027s the \"IDisposable\" interface, and the contract that \"Dispose\" will always be called on such objects. When an \"IDisposable\" is a class member, then it\u0027s up to that class to call \"Dispose\" on it, ideally in its own \"Dispose\" method. If it\u0027s a local variable, then it should be instantiated with a \"using\" clause to prompt automatic cleanup when it goes out of scope.",
"properties":  {
"severity":  "Warning",
"warningLevel":  "1",
"defaultSeverity":  "Warning",
"title":  "\"IDisposables\" should be disposed",
"category":  "Reliability",
"helpLink":  "http://vs.sonarlint.org/rules/index.html#version=1.7.0\u0026ruleId=S2930",
"isEnabledByDefault":  "True",
"isSuppressedInSource":  "False"
}
},
{
"ruleId":  "S2930",
"locations":  [
{
"analysisTarget":  [
{
"uri":  "akka.net\\src\\core\\Akka.Tests\\Actor\\SupervisorHierarchySpec.cs",
"region":  {
"startLine":  129,
"startColumn":  16,
"endLine":  129,
"endColumn":  28
}
}
]
}
],
"shortMessage":  "\"Dispose\" of \"countDownMax\".",
"fullMessage":  "You can\u0027t rely on garbage collection to clean up everything. Specifically, you can\u0027t count on it to release non-memory resources such as \"File\"s. For that, there\u0027s the \"IDisposable\" interface, and the contract that \"Dispose\" will always be called on such objects. When an \"IDisposable\" is a class member, then it\u0027s up to that class to call \"Dispose\" on it, ideally in its own \"Dispose\" method. If it\u0027s a local variable, then it should be instantiated with a \"using\" clause to prompt automatic cleanup when it goes out of scope.",
"properties":  {
"severity":  "Warning",
"warningLevel":  "1",
"defaultSeverity":  "Warning",
"title":  "\"IDisposables\" should be disposed",
"category":  "Reliability",
"helpLink":  "http://vs.sonarlint.org/rules/index.html#version=1.7.0\u0026ruleId=S2930",
"isEnabledByDefault":  "True",
"isSuppressedInSource":  "False"
}
},
{
"ruleId":  "S2930",
"locations":  [
{
"analysisTarget":  [
{
"uri":  "akka.net\\src\\core\\Akka.Tests\\IO\\TcpConnectionSpec.cs",
"region":  {
"startLine":  705,
"startColumn":  16,
"endLine":  705,
"endColumn":  28
}
}
]
}
],
"shortMessage":  "\"Dispose\" of \"serverSocket\".",
"fullMessage":  "You can\u0027t rely on garbage collection to clean up everything. Specifically, you can\u0027t count on it to release non-memory resources such as \"File\"s. For that, there\u0027s the \"IDisposable\" interface, and the contract that \"Dispose\" will always be called on such objects. When an \"IDisposable\" is a class member, then it\u0027s up to that class to call \"Dispose\" on it, ideally in its own \"Dispose\" method. If it\u0027s a local variable, then it should be instantiated with a \"using\" clause to prompt automatic cleanup when it goes out of scope.",
"properties":  {
"severity":  "Warning",
"warningLevel":  "1",
"defaultSeverity":  "Warning",
"title":  "\"IDisposables\" should be disposed",
"category":  "Reliability",
"helpLink":  "http://vs.sonarlint.org/rules/index.html#version=1.7.0\u0026ruleId=S2930",
"isEnabledByDefault":  "True",
"isSuppressedInSource":  "False"
}
},
{
"ruleId":  "S2930",
"locations":  [
{
"analysisTarget":  [
{
"uri":  "akka.net\\src\\core\\Akka.Tests\\IO\\TcpIntegrationSpec.cs",
"region":  {
"startLine":  208,
"startColumn":  20,
"endLine":  208,
"endColumn":  32
}
}
]
}
],
"shortMessage":  "\"Dispose\" of \"serverSocket\".",
"fullMessage":  "You can\u0027t rely on garbage collection to clean up everything. Specifically, you can\u0027t count on it to release non-memory resources such as \"File\"s. For that, there\u0027s the \"IDisposable\" interface, and the contract that \"Dispose\" will always be called on such objects. When an \"IDisposable\" is a class member, then it\u0027s up to that class to call \"Dispose\" on it, ideally in its own \"Dispose\" method. If it\u0027s a local variable, then it should be instantiated with a \"using\" clause to prompt automatic cleanup when it goes out of scope.",
"properties":  {
"severity":  "Warning",
"warningLevel":  "1",
"defaultSeverity":  "Warning",
"title":  "\"IDisposables\" should be disposed",
"category":  "Reliability",
"helpLink":  "http://vs.sonarlint.org/rules/index.html#version=1.7.0\u0026ruleId=S2930",
"isEnabledByDefault":  "True",
"isSuppressedInSource":  "False"
}
},
{
"ruleId":  "S2930",
"locations":  [
{
"analysisTarget":  [
{
"uri":  "akka.net\\src\\core\\Akka.Tests\\Util\\Internal\\InterlockedSpinTests.cs",
"region":  {
"startLine":  22,
"startColumn":  16,
"endLine":  22,
"endColumn":  38
}
}
]
}
],
"shortMessage":  "\"Dispose\" of \"hasEnteredUpdateMethod\".",
"fullMessage":  "You can\u0027t rely on garbage collection to clean up everything. Specifically, you can\u0027t count on it to release non-memory resources such as \"File\"s. For that, there\u0027s the \"IDisposable\" interface, and the contract that \"Dispose\" will always be called on such objects. When an \"IDisposable\" is a class member, then it\u0027s up to that class to call \"Dispose\" on it, ideally in its own \"Dispose\" method. If it\u0027s a local variable, then it should be instantiated with a \"using\" clause to prompt automatic cleanup when it goes out of scope.",
"properties":  {
"severity":  "Warning",
"warningLevel":  "1",
"defaultSeverity":  "Warning",
"title":  "\"IDisposables\" should be disposed",
"category":  "Reliability",
"helpLink":  "http://vs.sonarlint.org/rules/index.html#version=1.7.0\u0026ruleId=S2930",
"isEnabledByDefault":  "True",
"isSuppressedInSource":  "False"
}
},
{
"ruleId":  "S2930",
"locations":  [
{
"analysisTarget":  [
{
"uri":  "akka.net\\src\\core\\Akka.Tests\\Util\\Internal\\InterlockedSpinTests.cs",
"region":  {
"startLine":  23,
"startColumn":  16,
"endLine":  23,
"endColumn":  28
}
}
]
}
],
"shortMessage":  "\"Dispose\" of \"okToContinue\".",
"fullMessage":  "You can\u0027t rely on garbage collection to clean up everything. Specifically, you can\u0027t count on it to release non-memory resources such as \"File\"s. For that, there\u0027s the \"IDisposable\" interface, and the contract that \"Dispose\" will always be called on such objects. When an \"IDisposable\" is a class member, then it\u0027s up to that class to call \"Dispose\" on it, ideally in its own \"Dispose\" method. If it\u0027s a local variable, then it should be instantiated with a \"using\" clause to prompt automatic cleanup when it goes out of scope.",
"properties":  {
"severity":  "Warning",
"warningLevel":  "1",
"defaultSeverity":  "Warning",
"title":  "\"IDisposables\" should be disposed",
"category":  "Reliability",
"helpLink":  "http://vs.sonarlint.org/rules/index.html#version=1.7.0\u0026ruleId=S2930",
"isEnabledByDefault":  "True",
"isSuppressedInSource":  "False"
}
},
{
"ruleId":  "S2930",
"locations":  [
{
"analysisTarget":  [
{
"uri":  "akka.net\\src\\core\\Akka.Tests\\Util\\Internal\\InterlockedSpinTests.cs",
"region":  {
"startLine":  66,
"startColumn":  16,
"endLine":  66,
"endColumn":  38
}
}
]
}
],
"shortMessage":  "\"Dispose\" of \"hasEnteredUpdateMethod\".",
"fullMessage":  "You can\u0027t rely on garbage collection to clean up everything. Specifically, you can\u0027t count on it to release non-memory resources such as \"File\"s. For that, there\u0027s the \"IDisposable\" interface, and the contract that \"Dispose\" will always be called on such objects. When an \"IDisposable\" is a class member, then it\u0027s up to that class to call \"Dispose\" on it, ideally in its own \"Dispose\" method. If it\u0027s a local variable, then it should be instantiated with a \"using\" clause to prompt automatic cleanup when it goes out of scope.",
"properties":  {
"severity":  "Warning",
"warningLevel":  "1",
"defaultSeverity":  "Warning",
"title":  "\"IDisposables\" should be disposed",
"category":  "Reliability",
"helpLink":  "http://vs.sonarlint.org/rules/index.html#version=1.7.0\u0026ruleId=S2930",
"isEnabledByDefault":  "True",
"isSuppressedInSource":  "False"
}
},
{
"ruleId":  "S2930",
"locations":  [
{
"analysisTarget":  [
{
"uri":  "akka.net\\src\\core\\Akka.Tests\\Util\\Internal\\InterlockedSpinTests.cs",
"region":  {
"startLine":  67,
"startColumn":  16,
"endLine":  67,
"endColumn":  28
}
}
]
}
],
"shortMessage":  "\"Dispose\" of \"okToContinue\".",
"fullMessage":  "You can\u0027t rely on garbage collection to clean up everything. Specifically, you can\u0027t count on it to release non-memory resources such as \"File\"s. For that, there\u0027s the \"IDisposable\" interface, and the contract that \"Dispose\" will always be called on such objects. When an \"IDisposable\" is a class member, then it\u0027s up to that class to call \"Dispose\" on it, ideally in its own \"Dispose\" method. If it\u0027s a local variable, then it should be instantiated with a \"using\" clause to prompt automatic cleanup when it goes out of scope.",
"properties":  {
"severity":  "Warning",
"warningLevel":  "1",
"defaultSeverity":  "Warning",
"title":  "\"IDisposables\" should be disposed",
"category":  "Reliability",
"helpLink":  "http://vs.sonarlint.org/rules/index.html#version=1.7.0\u0026ruleId=S2930",
"isEnabledByDefault":  "True",
"isSuppressedInSource":  "False"
}
},
{
"ruleId":  "S2930",
"locations":  [
{
"analysisTarget":  [
{
"uri":  "akka.net\\src\\core\\Akka.Tests\\Util\\Internal\\InterlockedSpinTests.cs",
"region":  {
"startLine":  112,
"startColumn":  16,
"endLine":  112,
"endColumn":  38
}
}
]
}
],
"shortMessage":  "\"Dispose\" of \"hasEnteredUpdateMethod\".",
"fullMessage":  "You can\u0027t rely on garbage collection to clean up everything. Specifically, you can\u0027t count on it to release non-memory resources such as \"File\"s. For that, there\u0027s the \"IDisposable\" interface, and the contract that \"Dispose\" will always be called on such objects. When an \"IDisposable\" is a class member, then it\u0027s up to that class to call \"Dispose\" on it, ideally in its own \"Dispose\" method. If it\u0027s a local variable, then it should be instantiated with a \"using\" clause to prompt automatic cleanup when it goes out of scope.",
"properties":  {
"severity":  "Warning",
"warningLevel":  "1",
"defaultSeverity":  "Warning",
"title":  "\"IDisposables\" should be disposed",
"category":  "Reliability",
"helpLink":  "http://vs.sonarlint.org/rules/index.html#version=1.7.0\u0026ruleId=S2930",
"isEnabledByDefault":  "True",
"isSuppressedInSource":  "False"
}
},
{
"ruleId":  "S2930",
"locations":  [
{
"analysisTarget":  [
{
"uri":  "akka.net\\src\\core\\Akka.Tests\\Util\\Internal\\InterlockedSpinTests.cs",
"region":  {
"startLine":  113,
"startColumn":  16,
"endLine":  113,
"endColumn":  28
}
}
]
}
],
"shortMessage":  "\"Dispose\" of \"okToContinue\".",
"fullMessage":  "You can\u0027t rely on garbage collection to clean up everything. Specifically, you can\u0027t count on it to release non-memory resources such as \"File\"s. For that, there\u0027s the \"IDisposable\" interface, and the contract that \"Dispose\" will always be called on such objects. When an \"IDisposable\" is a class member, then it\u0027s up to that class to call \"Dispose\" on it, ideally in its own \"Dispose\" method. If it\u0027s a local variable, then it should be instantiated with a \"using\" clause to prompt automatic cleanup when it goes out of scope.",
"properties":  {
"severity":  "Warning",
"warningLevel":  "1",
"defaultSeverity":  "Warning",
"title":  "\"IDisposables\" should be disposed",
"category":  "Reliability",
"helpLink":  "http://vs.sonarlint.org/rules/index.html#version=1.7.0\u0026ruleId=S2930",
"isEnabledByDefault":  "True",
"isSuppressedInSource":  "False"
}
}
]
}
