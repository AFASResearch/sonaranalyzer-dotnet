{
"version":  "0.1",
"toolInfo":  {
"toolName":  "Microsoft (R) Visual C# Compiler",
"productVersion":  "1.1.0",
"fileVersion":  "1.1.0"
},
"issues":  [
{
"ruleId":  "S1694",
"locations":  [
{
"analysisTarget":  [
{
"uri":  "akka.net\\src\\core\\Akka\\Actor\\ActorBase.cs",
"region":  {
"startLine":  17,
"startColumn":  26,
"endLine":  17,
"endColumn":  32
}
}
]
}
],
"shortMessage":  "Convert this \"abstract\" class to a concrete class with a private constructor",
"fullMessage":  "The purpose of an abstract class is to provide some heritable behaviors while also defining methods which must be implemented by sub-classes. A class with no abstract methods that was made abstract purely to prevent instantiation should be converted to a concrete class (i.e. remove the \"abstract\" keyword) with a private constructor. A class with only abstract methods and no inheritable behavior should be converted to an interface.",
"properties":  {
"severity":  "Warning",
"warningLevel":  "1",
"defaultSeverity":  "Warning",
"title":  "An abstract class should have both abstract and concrete methods",
"category":  "Design",
"helpLink":  "http://vs.sonarlint.org/rules/index.html#version=1.11.0\u0026ruleId=S1694",
"isEnabledByDefault":  "False",
"isSuppressedInSource":  "False"
}
},
{
"ruleId":  "S1694",
"locations":  [
{
"analysisTarget":  [
{
"uri":  "akka.net\\src\\core\\Akka\\Actor\\ActorProducerPipeline.cs",
"region":  {
"startLine":  40,
"startColumn":  26,
"endLine":  40,
"endColumn":  49
}
}
]
}
],
"shortMessage":  "Convert this \"abstract\" class to a concrete class with a private constructor",
"fullMessage":  "The purpose of an abstract class is to provide some heritable behaviors while also defining methods which must be implemented by sub-classes. A class with no abstract methods that was made abstract purely to prevent instantiation should be converted to a concrete class (i.e. remove the \"abstract\" keyword) with a private constructor. A class with only abstract methods and no inheritable behavior should be converted to an interface.",
"properties":  {
"severity":  "Warning",
"warningLevel":  "1",
"defaultSeverity":  "Warning",
"title":  "An abstract class should have both abstract and concrete methods",
"category":  "Design",
"helpLink":  "http://vs.sonarlint.org/rules/index.html#version=1.11.0\u0026ruleId=S1694",
"isEnabledByDefault":  "False",
"isSuppressedInSource":  "False"
}
},
{
"ruleId":  "S1694",
"locations":  [
{
"analysisTarget":  [
{
"uri":  "akka.net\\src\\core\\Akka\\Actor\\ActorProducerPipeline.cs",
"region":  {
"startLine":  64,
"startColumn":  26,
"endLine":  64,
"endColumn":  49
}
}
]
}
],
"shortMessage":  "Convert this \"abstract\" class to a concrete class with a private constructor",
"fullMessage":  "The purpose of an abstract class is to provide some heritable behaviors while also defining methods which must be implemented by sub-classes. A class with no abstract methods that was made abstract purely to prevent instantiation should be converted to a concrete class (i.e. remove the \"abstract\" keyword) with a private constructor. A class with only abstract methods and no inheritable behavior should be converted to an interface.",
"properties":  {
"severity":  "Warning",
"warningLevel":  "1",
"defaultSeverity":  "Warning",
"title":  "An abstract class should have both abstract and concrete methods",
"category":  "Design",
"helpLink":  "http://vs.sonarlint.org/rules/index.html#version=1.11.0\u0026ruleId=S1694",
"isEnabledByDefault":  "False",
"isSuppressedInSource":  "False"
}
},
{
"ruleId":  "S1694",
"locations":  [
{
"analysisTarget":  [
{
"uri":  "akka.net\\src\\core\\Akka\\Actor\\ActorSelection.cs",
"region":  {
"startLine":  270,
"startColumn":  26,
"endLine":  270,
"endColumn":  46
}
}
]
}
],
"shortMessage":  "Convert this \"abstract\" class to a concrete class with a private constructor",
"fullMessage":  "The purpose of an abstract class is to provide some heritable behaviors while also defining methods which must be implemented by sub-classes. A class with no abstract methods that was made abstract purely to prevent instantiation should be converted to a concrete class (i.e. remove the \"abstract\" keyword) with a private constructor. A class with only abstract methods and no inheritable behavior should be converted to an interface.",
"properties":  {
"severity":  "Warning",
"warningLevel":  "1",
"defaultSeverity":  "Warning",
"title":  "An abstract class should have both abstract and concrete methods",
"category":  "Design",
"helpLink":  "http://vs.sonarlint.org/rules/index.html#version=1.11.0\u0026ruleId=S1694",
"isEnabledByDefault":  "False",
"isSuppressedInSource":  "False"
}
},
{
"ruleId":  "S1694",
"locations":  [
{
"analysisTarget":  [
{
"uri":  "akka.net\\src\\core\\Akka\\Actor\\ChildrenContainer\\Internal\\SuspendReason.cs",
"region":  {
"startLine":  14,
"startColumn":  26,
"endLine":  14,
"endColumn":  39
}
}
]
}
],
"shortMessage":  "Convert this \"abstract\" class to a concrete class with a private constructor",
"fullMessage":  "The purpose of an abstract class is to provide some heritable behaviors while also defining methods which must be implemented by sub-classes. A class with no abstract methods that was made abstract purely to prevent instantiation should be converted to a concrete class (i.e. remove the \"abstract\" keyword) with a private constructor. A class with only abstract methods and no inheritable behavior should be converted to an interface.",
"properties":  {
"severity":  "Warning",
"warningLevel":  "1",
"defaultSeverity":  "Warning",
"title":  "An abstract class should have both abstract and concrete methods",
"category":  "Design",
"helpLink":  "http://vs.sonarlint.org/rules/index.html#version=1.11.0\u0026ruleId=S1694",
"isEnabledByDefault":  "False",
"isSuppressedInSource":  "False"
}
},
{
"ruleId":  "S1694",
"locations":  [
{
"analysisTarget":  [
{
"uri":  "akka.net\\src\\core\\Akka\\Actor\\Exceptions.cs",
"region":  {
"startLine":  15,
"startColumn":  26,
"endLine":  15,
"endColumn":  39
}
}
]
}
],
"shortMessage":  "Convert this \"abstract\" class to a concrete class with a private constructor",
"fullMessage":  "The purpose of an abstract class is to provide some heritable behaviors while also defining methods which must be implemented by sub-classes. A class with no abstract methods that was made abstract purely to prevent instantiation should be converted to a concrete class (i.e. remove the \"abstract\" keyword) with a private constructor. A class with only abstract methods and no inheritable behavior should be converted to an interface.",
"properties":  {
"severity":  "Warning",
"warningLevel":  "1",
"defaultSeverity":  "Warning",
"title":  "An abstract class should have both abstract and concrete methods",
"category":  "Design",
"helpLink":  "http://vs.sonarlint.org/rules/index.html#version=1.11.0\u0026ruleId=S1694",
"isEnabledByDefault":  "False",
"isSuppressedInSource":  "False"
}
},
{
"ruleId":  "S1694",
"locations":  [
{
"analysisTarget":  [
{
"uri":  "akka.net\\src\\core\\Akka\\Actor\\FSM.cs",
"region":  {
"startLine":  100,
"startColumn":  30,
"endLine":  100,
"endColumn":  36
}
}
]
}
],
"shortMessage":  "Convert this \"abstract\" class to a concrete class with a private constructor",
"fullMessage":  "The purpose of an abstract class is to provide some heritable behaviors while also defining methods which must be implemented by sub-classes. A class with no abstract methods that was made abstract purely to prevent instantiation should be converted to a concrete class (i.e. remove the \"abstract\" keyword) with a private constructor. A class with only abstract methods and no inheritable behavior should be converted to an interface.",
"properties":  {
"severity":  "Warning",
"warningLevel":  "1",
"defaultSeverity":  "Warning",
"title":  "An abstract class should have both abstract and concrete methods",
"category":  "Design",
"helpLink":  "http://vs.sonarlint.org/rules/index.html#version=1.11.0\u0026ruleId=S1694",
"isEnabledByDefault":  "False",
"isSuppressedInSource":  "False"
}
},
{
"ruleId":  "S1694",
"locations":  [
{
"analysisTarget":  [
{
"uri":  "akka.net\\src\\core\\Akka\\Actor\\FSM.cs",
"region":  {
"startLine":  384,
"startColumn":  26,
"endLine":  384,
"endColumn":  29
}
}
]
}
],
"shortMessage":  "Convert this \"abstract\" class to a concrete class with a private constructor",
"fullMessage":  "The purpose of an abstract class is to provide some heritable behaviors while also defining methods which must be implemented by sub-classes. A class with no abstract methods that was made abstract purely to prevent instantiation should be converted to a concrete class (i.e. remove the \"abstract\" keyword) with a private constructor. A class with only abstract methods and no inheritable behavior should be converted to an interface.",
"properties":  {
"severity":  "Warning",
"warningLevel":  "1",
"defaultSeverity":  "Warning",
"title":  "An abstract class should have both abstract and concrete methods",
"category":  "Design",
"helpLink":  "http://vs.sonarlint.org/rules/index.html#version=1.11.0\u0026ruleId=S1694",
"isEnabledByDefault":  "False",
"isSuppressedInSource":  "False"
}
},
{
"ruleId":  "S1694",
"locations":  [
{
"analysisTarget":  [
{
"uri":  "akka.net\\src\\core\\Akka\\Actor\\ReceiveActor.cs",
"region":  {
"startLine":  17,
"startColumn":  26,
"endLine":  17,
"endColumn":  38
}
}
]
}
],
"shortMessage":  "Convert this \"abstract\" class to a concrete class with a private constructor",
"fullMessage":  "The purpose of an abstract class is to provide some heritable behaviors while also defining methods which must be implemented by sub-classes. A class with no abstract methods that was made abstract purely to prevent instantiation should be converted to a concrete class (i.e. remove the \"abstract\" keyword) with a private constructor. A class with only abstract methods and no inheritable behavior should be converted to an interface.",
"properties":  {
"severity":  "Warning",
"warningLevel":  "1",
"defaultSeverity":  "Warning",
"title":  "An abstract class should have both abstract and concrete methods",
"category":  "Design",
"helpLink":  "http://vs.sonarlint.org/rules/index.html#version=1.11.0\u0026ruleId=S1694",
"isEnabledByDefault":  "False",
"isSuppressedInSource":  "False"
}
},
{
"ruleId":  "S1694",
"locations":  [
{
"analysisTarget":  [
{
"uri":  "akka.net\\src\\core\\Akka\\Actor\\Stash\\Internal\\AbstractStash.cs",
"region":  {
"startLine":  20,
"startColumn":  26,
"endLine":  20,
"endColumn":  39
}
}
]
}
],
"shortMessage":  "Convert this \"abstract\" class to a concrete class with a private constructor",
"fullMessage":  "The purpose of an abstract class is to provide some heritable behaviors while also defining methods which must be implemented by sub-classes. A class with no abstract methods that was made abstract purely to prevent instantiation should be converted to a concrete class (i.e. remove the \"abstract\" keyword) with a private constructor. A class with only abstract methods and no inheritable behavior should be converted to an interface.",
"properties":  {
"severity":  "Warning",
"warningLevel":  "1",
"defaultSeverity":  "Warning",
"title":  "An abstract class should have both abstract and concrete methods",
"category":  "Design",
"helpLink":  "http://vs.sonarlint.org/rules/index.html#version=1.11.0\u0026ruleId=S1694",
"isEnabledByDefault":  "False",
"isSuppressedInSource":  "False"
}
},
{
"ruleId":  "S1694",
"locations":  [
{
"analysisTarget":  [
{
"uri":  "akka.net\\src\\core\\Akka\\Actor\\TypedActor.cs",
"region":  {
"startLine":  27,
"startColumn":  26,
"endLine":  27,
"endColumn":  36
}
}
]
}
],
"shortMessage":  "Convert this \"abstract\" class to a concrete class with a private constructor",
"fullMessage":  "The purpose of an abstract class is to provide some heritable behaviors while also defining methods which must be implemented by sub-classes. A class with no abstract methods that was made abstract purely to prevent instantiation should be converted to a concrete class (i.e. remove the \"abstract\" keyword) with a private constructor. A class with only abstract methods and no inheritable behavior should be converted to an interface.",
"properties":  {
"severity":  "Warning",
"warningLevel":  "1",
"defaultSeverity":  "Warning",
"title":  "An abstract class should have both abstract and concrete methods",
"category":  "Design",
"helpLink":  "http://vs.sonarlint.org/rules/index.html#version=1.11.0\u0026ruleId=S1694",
"isEnabledByDefault":  "False",
"isSuppressedInSource":  "False"
}
},
{
"ruleId":  "S1694",
"locations":  [
{
"analysisTarget":  [
{
"uri":  "akka.net\\src\\core\\Akka\\Configuration\\Hocon\\CDataConfigurationElement.cs",
"region":  {
"startLine":  33,
"startColumn":  26,
"endLine":  33,
"endColumn":  51
}
}
]
}
],
"shortMessage":  "Convert this \"abstract\" class to a concrete class with a private constructor",
"fullMessage":  "The purpose of an abstract class is to provide some heritable behaviors while also defining methods which must be implemented by sub-classes. A class with no abstract methods that was made abstract purely to prevent instantiation should be converted to a concrete class (i.e. remove the \"abstract\" keyword) with a private constructor. A class with only abstract methods and no inheritable behavior should be converted to an interface.",
"properties":  {
"severity":  "Warning",
"warningLevel":  "1",
"defaultSeverity":  "Warning",
"title":  "An abstract class should have both abstract and concrete methods",
"category":  "Design",
"helpLink":  "http://vs.sonarlint.org/rules/index.html#version=1.11.0\u0026ruleId=S1694",
"isEnabledByDefault":  "False",
"isSuppressedInSource":  "False"
}
},
{
"ruleId":  "S1694",
"locations":  [
{
"analysisTarget":  [
{
"uri":  "akka.net\\src\\core\\Akka\\IO\\Dns.cs",
"region":  {
"startLine":  18,
"startColumn":  26,
"endLine":  18,
"endColumn":  33
}
}
]
}
],
"shortMessage":  "Convert this \"abstract\" class to a concrete class with a private constructor",
"fullMessage":  "The purpose of an abstract class is to provide some heritable behaviors while also defining methods which must be implemented by sub-classes. A class with no abstract methods that was made abstract purely to prevent instantiation should be converted to a concrete class (i.e. remove the \"abstract\" keyword) with a private constructor. A class with only abstract methods and no inheritable behavior should be converted to an interface.",
"properties":  {
"severity":  "Warning",
"warningLevel":  "1",
"defaultSeverity":  "Warning",
"title":  "An abstract class should have both abstract and concrete methods",
"category":  "Design",
"helpLink":  "http://vs.sonarlint.org/rules/index.html#version=1.11.0\u0026ruleId=S1694",
"isEnabledByDefault":  "False",
"isSuppressedInSource":  "False"
}
},
{
"ruleId":  "S1694",
"locations":  [
{
"analysisTarget":  [
{
"uri":  "akka.net\\src\\core\\Akka\\IO\\Dns.cs",
"region":  {
"startLine":  37,
"startColumn":  30,
"endLine":  37,
"endColumn":  37
}
}
]
}
],
"shortMessage":  "Convert this \"abstract\" class to a concrete class with a private constructor",
"fullMessage":  "The purpose of an abstract class is to provide some heritable behaviors while also defining methods which must be implemented by sub-classes. A class with no abstract methods that was made abstract purely to prevent instantiation should be converted to a concrete class (i.e. remove the \"abstract\" keyword) with a private constructor. A class with only abstract methods and no inheritable behavior should be converted to an interface.",
"properties":  {
"severity":  "Warning",
"warningLevel":  "1",
"defaultSeverity":  "Warning",
"title":  "An abstract class should have both abstract and concrete methods",
"category":  "Design",
"helpLink":  "http://vs.sonarlint.org/rules/index.html#version=1.11.0\u0026ruleId=S1694",
"isEnabledByDefault":  "False",
"isSuppressedInSource":  "False"
}
},
{
"ruleId":  "S1694",
"locations":  [
{
"analysisTarget":  [
{
"uri":  "akka.net\\src\\core\\Akka\\IO\\Inet.cs",
"region":  {
"startLine":  13,
"startColumn":  30,
"endLine":  13,
"endColumn":  42
}
}
]
}
],
"shortMessage":  "Convert this \"abstract\" class to a concrete class with a private constructor",
"fullMessage":  "The purpose of an abstract class is to provide some heritable behaviors while also defining methods which must be implemented by sub-classes. A class with no abstract methods that was made abstract purely to prevent instantiation should be converted to a concrete class (i.e. remove the \"abstract\" keyword) with a private constructor. A class with only abstract methods and no inheritable behavior should be converted to an interface.",
"properties":  {
"severity":  "Warning",
"warningLevel":  "1",
"defaultSeverity":  "Warning",
"title":  "An abstract class should have both abstract and concrete methods",
"category":  "Design",
"helpLink":  "http://vs.sonarlint.org/rules/index.html#version=1.11.0\u0026ruleId=S1694",
"isEnabledByDefault":  "False",
"isSuppressedInSource":  "False"
}
},
{
"ruleId":  "S1694",
"locations":  [
{
"analysisTarget":  [
{
"uri":  "akka.net\\src\\core\\Akka\\IO\\Inet.cs",
"region":  {
"startLine":  27,
"startColumn":  30,
"endLine":  27,
"endColumn":  50
}
}
]
}
],
"shortMessage":  "Convert this \"abstract\" class to a concrete class with a private constructor",
"fullMessage":  "The purpose of an abstract class is to provide some heritable behaviors while also defining methods which must be implemented by sub-classes. A class with no abstract methods that was made abstract purely to prevent instantiation should be converted to a concrete class (i.e. remove the \"abstract\" keyword) with a private constructor. A class with only abstract methods and no inheritable behavior should be converted to an interface.",
"properties":  {
"severity":  "Warning",
"warningLevel":  "1",
"defaultSeverity":  "Warning",
"title":  "An abstract class should have both abstract and concrete methods",
"category":  "Design",
"helpLink":  "http://vs.sonarlint.org/rules/index.html#version=1.11.0\u0026ruleId=S1694",
"isEnabledByDefault":  "False",
"isSuppressedInSource":  "False"
}
},
{
"ruleId":  "S1694",
"locations":  [
{
"analysisTarget":  [
{
"uri":  "akka.net\\src\\core\\Akka\\IO\\Inet.cs",
"region":  {
"startLine":  29,
"startColumn":  30,
"endLine":  29,
"endColumn":  44
}
}
]
}
],
"shortMessage":  "Convert this \"abstract\" class to a concrete class with a private constructor",
"fullMessage":  "The purpose of an abstract class is to provide some heritable behaviors while also defining methods which must be implemented by sub-classes. A class with no abstract methods that was made abstract purely to prevent instantiation should be converted to a concrete class (i.e. remove the \"abstract\" keyword) with a private constructor. A class with only abstract methods and no inheritable behavior should be converted to an interface.",
"properties":  {
"severity":  "Warning",
"warningLevel":  "1",
"defaultSeverity":  "Warning",
"title":  "An abstract class should have both abstract and concrete methods",
"category":  "Design",
"helpLink":  "http://vs.sonarlint.org/rules/index.html#version=1.11.0\u0026ruleId=S1694",
"isEnabledByDefault":  "False",
"isSuppressedInSource":  "False"
}
},
{
"ruleId":  "S1694",
"locations":  [
{
"analysisTarget":  [
{
"uri":  "akka.net\\src\\core\\Akka\\IO\\Inet.cs",
"region":  {
"startLine":  35,
"startColumn":  30,
"endLine":  35,
"endColumn":  52
}
}
]
}
],
"shortMessage":  "Convert this \"abstract\" class to a concrete class with a private constructor",
"fullMessage":  "The purpose of an abstract class is to provide some heritable behaviors while also defining methods which must be implemented by sub-classes. A class with no abstract methods that was made abstract purely to prevent instantiation should be converted to a concrete class (i.e. remove the \"abstract\" keyword) with a private constructor. A class with only abstract methods and no inheritable behavior should be converted to an interface.",
"properties":  {
"severity":  "Warning",
"warningLevel":  "1",
"defaultSeverity":  "Warning",
"title":  "An abstract class should have both abstract and concrete methods",
"category":  "Design",
"helpLink":  "http://vs.sonarlint.org/rules/index.html#version=1.11.0\u0026ruleId=S1694",
"isEnabledByDefault":  "False",
"isSuppressedInSource":  "False"
}
},
{
"ruleId":  "S1694",
"locations":  [
{
"analysisTarget":  [
{
"uri":  "akka.net\\src\\core\\Akka\\IO\\Inet.cs",
"region":  {
"startLine":  124,
"startColumn":  30,
"endLine":  124,
"endColumn":  42
}
}
]
}
],
"shortMessage":  "Convert this \"abstract\" class to a concrete class with a private constructor",
"fullMessage":  "The purpose of an abstract class is to provide some heritable behaviors while also defining methods which must be implemented by sub-classes. A class with no abstract methods that was made abstract purely to prevent instantiation should be converted to a concrete class (i.e. remove the \"abstract\" keyword) with a private constructor. A class with only abstract methods and no inheritable behavior should be converted to an interface.",
"properties":  {
"severity":  "Warning",
"warningLevel":  "1",
"defaultSeverity":  "Warning",
"title":  "An abstract class should have both abstract and concrete methods",
"category":  "Design",
"helpLink":  "http://vs.sonarlint.org/rules/index.html#version=1.11.0\u0026ruleId=S1694",
"isEnabledByDefault":  "False",
"isSuppressedInSource":  "False"
}
},
{
"ruleId":  "S1694",
"locations":  [
{
"analysisTarget":  [
{
"uri":  "akka.net\\src\\core\\Akka\\IO\\IO.cs",
"region":  {
"startLine":  11,
"startColumn":  26,
"endLine":  11,
"endColumn":  37
}
}
]
}
],
"shortMessage":  "Convert this \"abstract\" class to an interface",
"fullMessage":  "The purpose of an abstract class is to provide some heritable behaviors while also defining methods which must be implemented by sub-classes. A class with no abstract methods that was made abstract purely to prevent instantiation should be converted to a concrete class (i.e. remove the \"abstract\" keyword) with a private constructor. A class with only abstract methods and no inheritable behavior should be converted to an interface.",
"properties":  {
"severity":  "Warning",
"warningLevel":  "1",
"defaultSeverity":  "Warning",
"title":  "An abstract class should have both abstract and concrete methods",
"category":  "Design",
"helpLink":  "http://vs.sonarlint.org/rules/index.html#version=1.11.0\u0026ruleId=S1694",
"isEnabledByDefault":  "False",
"isSuppressedInSource":  "False"
}
},
{
"ruleId":  "S1694",
"locations":  [
{
"analysisTarget":  [
{
"uri":  "akka.net\\src\\core\\Akka\\IO\\SelectionHandler.cs",
"region":  {
"startLine":  24,
"startColumn":  26,
"endLine":  24,
"endColumn":  50
}
}
]
}
],
"shortMessage":  "Convert this \"abstract\" class to a concrete class with a private constructor",
"fullMessage":  "The purpose of an abstract class is to provide some heritable behaviors while also defining methods which must be implemented by sub-classes. A class with no abstract methods that was made abstract purely to prevent instantiation should be converted to a concrete class (i.e. remove the \"abstract\" keyword) with a private constructor. A class with only abstract methods and no inheritable behavior should be converted to an interface.",
"properties":  {
"severity":  "Warning",
"warningLevel":  "1",
"defaultSeverity":  "Warning",
"title":  "An abstract class should have both abstract and concrete methods",
"category":  "Design",
"helpLink":  "http://vs.sonarlint.org/rules/index.html#version=1.11.0\u0026ruleId=S1694",
"isEnabledByDefault":  "False",
"isSuppressedInSource":  "False"
}
},
{
"ruleId":  "S1694",
"locations":  [
{
"analysisTarget":  [
{
"uri":  "akka.net\\src\\core\\Akka\\IO\\Tcp.cs",
"region":  {
"startLine":  235,
"startColumn":  30,
"endLine":  235,
"endColumn":  42
}
}
]
}
],
"shortMessage":  "Convert this \"abstract\" class to a concrete class with a private constructor",
"fullMessage":  "The purpose of an abstract class is to provide some heritable behaviors while also defining methods which must be implemented by sub-classes. A class with no abstract methods that was made abstract purely to prevent instantiation should be converted to a concrete class (i.e. remove the \"abstract\" keyword) with a private constructor. A class with only abstract methods and no inheritable behavior should be converted to an interface.",
"properties":  {
"severity":  "Warning",
"warningLevel":  "1",
"defaultSeverity":  "Warning",
"title":  "An abstract class should have both abstract and concrete methods",
"category":  "Design",
"helpLink":  "http://vs.sonarlint.org/rules/index.html#version=1.11.0\u0026ruleId=S1694",
"isEnabledByDefault":  "False",
"isSuppressedInSource":  "False"
}
},
{
"ruleId":  "S1694",
"locations":  [
{
"analysisTarget":  [
{
"uri":  "akka.net\\src\\core\\Akka\\IO\\TcpConnection.cs",
"region":  {
"startLine":  694,
"startColumn":  31,
"endLine":  694,
"endColumn":  41
}
}
]
}
],
"shortMessage":  "Convert this \"abstract\" class to a concrete class with a private constructor",
"fullMessage":  "The purpose of an abstract class is to provide some heritable behaviors while also defining methods which must be implemented by sub-classes. A class with no abstract methods that was made abstract purely to prevent instantiation should be converted to a concrete class (i.e. remove the \"abstract\" keyword) with a private constructor. A class with only abstract methods and no inheritable behavior should be converted to an interface.",
"properties":  {
"severity":  "Warning",
"warningLevel":  "1",
"defaultSeverity":  "Warning",
"title":  "An abstract class should have both abstract and concrete methods",
"category":  "Design",
"helpLink":  "http://vs.sonarlint.org/rules/index.html#version=1.11.0\u0026ruleId=S1694",
"isEnabledByDefault":  "False",
"isSuppressedInSource":  "False"
}
},
{
"ruleId":  "S1694",
"locations":  [
{
"analysisTarget":  [
{
"uri":  "akka.net\\src\\core\\Akka\\IO\\TcpConnection.cs",
"region":  {
"startLine":  777,
"startColumn":  31,
"endLine":  777,
"endColumn":  43
}
}
]
}
],
"shortMessage":  "Convert this \"abstract\" class to an interface",
"fullMessage":  "The purpose of an abstract class is to provide some heritable behaviors while also defining methods which must be implemented by sub-classes. A class with no abstract methods that was made abstract purely to prevent instantiation should be converted to a concrete class (i.e. remove the \"abstract\" keyword) with a private constructor. A class with only abstract methods and no inheritable behavior should be converted to an interface.",
"properties":  {
"severity":  "Warning",
"warningLevel":  "1",
"defaultSeverity":  "Warning",
"title":  "An abstract class should have both abstract and concrete methods",
"category":  "Design",
"helpLink":  "http://vs.sonarlint.org/rules/index.html#version=1.11.0\u0026ruleId=S1694",
"isEnabledByDefault":  "False",
"isSuppressedInSource":  "False"
}
},
{
"ruleId":  "S1694",
"locations":  [
{
"analysisTarget":  [
{
"uri":  "akka.net\\src\\core\\Akka\\IO\\Udp.cs",
"region":  {
"startLine":  42,
"startColumn":  30,
"endLine":  42,
"endColumn":  37
}
}
]
}
],
"shortMessage":  "Convert this \"abstract\" class to a concrete class with a private constructor",
"fullMessage":  "The purpose of an abstract class is to provide some heritable behaviors while also defining methods which must be implemented by sub-classes. A class with no abstract methods that was made abstract purely to prevent instantiation should be converted to a concrete class (i.e. remove the \"abstract\" keyword) with a private constructor. A class with only abstract methods and no inheritable behavior should be converted to an interface.",
"properties":  {
"severity":  "Warning",
"warningLevel":  "1",
"defaultSeverity":  "Warning",
"title":  "An abstract class should have both abstract and concrete methods",
"category":  "Design",
"helpLink":  "http://vs.sonarlint.org/rules/index.html#version=1.11.0\u0026ruleId=S1694",
"isEnabledByDefault":  "False",
"isSuppressedInSource":  "False"
}
},
{
"ruleId":  "S1694",
"locations":  [
{
"analysisTarget":  [
{
"uri":  "akka.net\\src\\core\\Akka\\IO\\Udp.cs",
"region":  {
"startLine":  45,
"startColumn":  30,
"endLine":  45,
"endColumn":  37
}
}
]
}
],
"shortMessage":  "Convert this \"abstract\" class to a concrete class with a private constructor",
"fullMessage":  "The purpose of an abstract class is to provide some heritable behaviors while also defining methods which must be implemented by sub-classes. A class with no abstract methods that was made abstract purely to prevent instantiation should be converted to a concrete class (i.e. remove the \"abstract\" keyword) with a private constructor. A class with only abstract methods and no inheritable behavior should be converted to an interface.",
"properties":  {
"severity":  "Warning",
"warningLevel":  "1",
"defaultSeverity":  "Warning",
"title":  "An abstract class should have both abstract and concrete methods",
"category":  "Design",
"helpLink":  "http://vs.sonarlint.org/rules/index.html#version=1.11.0\u0026ruleId=S1694",
"isEnabledByDefault":  "False",
"isSuppressedInSource":  "False"
}
},
{
"ruleId":  "S1694",
"locations":  [
{
"analysisTarget":  [
{
"uri":  "akka.net\\src\\core\\Akka\\IO\\Udp.cs",
"region":  {
"startLine":  199,
"startColumn":  30,
"endLine":  199,
"endColumn":  35
}
}
]
}
],
"shortMessage":  "Convert this \"abstract\" class to a concrete class with a private constructor",
"fullMessage":  "The purpose of an abstract class is to provide some heritable behaviors while also defining methods which must be implemented by sub-classes. A class with no abstract methods that was made abstract purely to prevent instantiation should be converted to a concrete class (i.e. remove the \"abstract\" keyword) with a private constructor. A class with only abstract methods and no inheritable behavior should be converted to an interface.",
"properties":  {
"severity":  "Warning",
"warningLevel":  "1",
"defaultSeverity":  "Warning",
"title":  "An abstract class should have both abstract and concrete methods",
"category":  "Design",
"helpLink":  "http://vs.sonarlint.org/rules/index.html#version=1.11.0\u0026ruleId=S1694",
"isEnabledByDefault":  "False",
"isSuppressedInSource":  "False"
}
},
{
"ruleId":  "S1694",
"locations":  [
{
"analysisTarget":  [
{
"uri":  "akka.net\\src\\core\\Akka\\IO\\UdpConnected.cs",
"region":  {
"startLine":  37,
"startColumn":  30,
"endLine":  37,
"endColumn":  37
}
}
]
}
],
"shortMessage":  "Convert this \"abstract\" class to a concrete class with a private constructor",
"fullMessage":  "The purpose of an abstract class is to provide some heritable behaviors while also defining methods which must be implemented by sub-classes. A class with no abstract methods that was made abstract purely to prevent instantiation should be converted to a concrete class (i.e. remove the \"abstract\" keyword) with a private constructor. A class with only abstract methods and no inheritable behavior should be converted to an interface.",
"properties":  {
"severity":  "Warning",
"warningLevel":  "1",
"defaultSeverity":  "Warning",
"title":  "An abstract class should have both abstract and concrete methods",
"category":  "Design",
"helpLink":  "http://vs.sonarlint.org/rules/index.html#version=1.11.0\u0026ruleId=S1694",
"isEnabledByDefault":  "False",
"isSuppressedInSource":  "False"
}
},
{
"ruleId":  "S1694",
"locations":  [
{
"analysisTarget":  [
{
"uri":  "akka.net\\src\\core\\Akka\\IO\\UdpConnected.cs",
"region":  {
"startLine":  42,
"startColumn":  30,
"endLine":  42,
"endColumn":  37
}
}
]
}
],
"shortMessage":  "Convert this \"abstract\" class to a concrete class with a private constructor",
"fullMessage":  "The purpose of an abstract class is to provide some heritable behaviors while also defining methods which must be implemented by sub-classes. A class with no abstract methods that was made abstract purely to prevent instantiation should be converted to a concrete class (i.e. remove the \"abstract\" keyword) with a private constructor. A class with only abstract methods and no inheritable behavior should be converted to an interface.",
"properties":  {
"severity":  "Warning",
"warningLevel":  "1",
"defaultSeverity":  "Warning",
"title":  "An abstract class should have both abstract and concrete methods",
"category":  "Design",
"helpLink":  "http://vs.sonarlint.org/rules/index.html#version=1.11.0\u0026ruleId=S1694",
"isEnabledByDefault":  "False",
"isSuppressedInSource":  "False"
}
},
{
"ruleId":  "S1694",
"locations":  [
{
"analysisTarget":  [
{
"uri":  "akka.net\\src\\core\\Akka\\IO\\UdpConnected.cs",
"region":  {
"startLine":  176,
"startColumn":  30,
"endLine":  176,
"endColumn":  35
}
}
]
}
],
"shortMessage":  "Convert this \"abstract\" class to a concrete class with a private constructor",
"fullMessage":  "The purpose of an abstract class is to provide some heritable behaviors while also defining methods which must be implemented by sub-classes. A class with no abstract methods that was made abstract purely to prevent instantiation should be converted to a concrete class (i.e. remove the \"abstract\" keyword) with a private constructor. A class with only abstract methods and no inheritable behavior should be converted to an interface.",
"properties":  {
"severity":  "Warning",
"warningLevel":  "1",
"defaultSeverity":  "Warning",
"title":  "An abstract class should have both abstract and concrete methods",
"category":  "Design",
"helpLink":  "http://vs.sonarlint.org/rules/index.html#version=1.11.0\u0026ruleId=S1694",
"isEnabledByDefault":  "False",
"isSuppressedInSource":  "False"
}
},
{
"ruleId":  "S1694",
"locations":  [
{
"analysisTarget":  [
{
"uri":  "akka.net\\src\\core\\Akka\\Routing\\Listeners.cs",
"region":  {
"startLine":  36,
"startColumn":  26,
"endLine":  36,
"endColumn":  41
}
}
]
}
],
"shortMessage":  "Convert this \"abstract\" class to a concrete class with a private constructor",
"fullMessage":  "The purpose of an abstract class is to provide some heritable behaviors while also defining methods which must be implemented by sub-classes. A class with no abstract methods that was made abstract purely to prevent instantiation should be converted to a concrete class (i.e. remove the \"abstract\" keyword) with a private constructor. A class with only abstract methods and no inheritable behavior should be converted to an interface.",
"properties":  {
"severity":  "Warning",
"warningLevel":  "1",
"defaultSeverity":  "Warning",
"title":  "An abstract class should have both abstract and concrete methods",
"category":  "Design",
"helpLink":  "http://vs.sonarlint.org/rules/index.html#version=1.11.0\u0026ruleId=S1694",
"isEnabledByDefault":  "False",
"isSuppressedInSource":  "False"
}
},
{
"ruleId":  "S1694",
"locations":  [
{
"analysisTarget":  [
{
"uri":  "akka.net\\src\\core\\Akka\\Routing\\Resizer.cs",
"region":  {
"startLine":  20,
"startColumn":  26,
"endLine":  20,
"endColumn":  33
}
}
]
}
],
"shortMessage":  "Convert this \"abstract\" class to an interface",
"fullMessage":  "The purpose of an abstract class is to provide some heritable behaviors while also defining methods which must be implemented by sub-classes. A class with no abstract methods that was made abstract purely to prevent instantiation should be converted to a concrete class (i.e. remove the \"abstract\" keyword) with a private constructor. A class with only abstract methods and no inheritable behavior should be converted to an interface.",
"properties":  {
"severity":  "Warning",
"warningLevel":  "1",
"defaultSeverity":  "Warning",
"title":  "An abstract class should have both abstract and concrete methods",
"category":  "Design",
"helpLink":  "http://vs.sonarlint.org/rules/index.html#version=1.11.0\u0026ruleId=S1694",
"isEnabledByDefault":  "False",
"isSuppressedInSource":  "False"
}
},
{
"ruleId":  "S1694",
"locations":  [
{
"analysisTarget":  [
{
"uri":  "akka.net\\src\\core\\Akka\\Routing\\Router.cs",
"region":  {
"startLine":  165,
"startColumn":  26,
"endLine":  165,
"endColumn":  38
}
}
]
}
],
"shortMessage":  "Convert this \"abstract\" class to an interface",
"fullMessage":  "The purpose of an abstract class is to provide some heritable behaviors while also defining methods which must be implemented by sub-classes. A class with no abstract methods that was made abstract purely to prevent instantiation should be converted to a concrete class (i.e. remove the \"abstract\" keyword) with a private constructor. A class with only abstract methods and no inheritable behavior should be converted to an interface.",
"properties":  {
"severity":  "Warning",
"warningLevel":  "1",
"defaultSeverity":  "Warning",
"title":  "An abstract class should have both abstract and concrete methods",
"category":  "Design",
"helpLink":  "http://vs.sonarlint.org/rules/index.html#version=1.11.0\u0026ruleId=S1694",
"isEnabledByDefault":  "False",
"isSuppressedInSource":  "False"
}
},
{
"ruleId":  "S1694",
"locations":  [
{
"analysisTarget":  [
{
"uri":  "akka.net\\src\\core\\Akka\\Routing\\RouterMsg.cs",
"region":  {
"startLine":  30,
"startColumn":  26,
"endLine":  30,
"endColumn":  49
}
}
]
}
],
"shortMessage":  "Convert this \"abstract\" class to a concrete class with a private constructor",
"fullMessage":  "The purpose of an abstract class is to provide some heritable behaviors while also defining methods which must be implemented by sub-classes. A class with no abstract methods that was made abstract purely to prevent instantiation should be converted to a concrete class (i.e. remove the \"abstract\" keyword) with a private constructor. A class with only abstract methods and no inheritable behavior should be converted to an interface.",
"properties":  {
"severity":  "Warning",
"warningLevel":  "1",
"defaultSeverity":  "Warning",
"title":  "An abstract class should have both abstract and concrete methods",
"category":  "Design",
"helpLink":  "http://vs.sonarlint.org/rules/index.html#version=1.11.0\u0026ruleId=S1694",
"isEnabledByDefault":  "False",
"isSuppressedInSource":  "False"
}
},
{
"ruleId":  "S1694",
"locations":  [
{
"analysisTarget":  [
{
"uri":  "akka.net\\src\\core\\Akka\\Util\\Internal\\Collections\\ImmutableAvlTreeBase.cs",
"region":  {
"startLine":  21,
"startColumn":  23,
"endLine":  21,
"endColumn":  43
}
}
]
}
],
"shortMessage":  "Convert this \"abstract\" class to a concrete class with a private constructor",
"fullMessage":  "The purpose of an abstract class is to provide some heritable behaviors while also defining methods which must be implemented by sub-classes. A class with no abstract methods that was made abstract purely to prevent instantiation should be converted to a concrete class (i.e. remove the \"abstract\" keyword) with a private constructor. A class with only abstract methods and no inheritable behavior should be converted to an interface.",
"properties":  {
"severity":  "Warning",
"warningLevel":  "1",
"defaultSeverity":  "Warning",
"title":  "An abstract class should have both abstract and concrete methods",
"category":  "Design",
"helpLink":  "http://vs.sonarlint.org/rules/index.html#version=1.11.0\u0026ruleId=S1694",
"isEnabledByDefault":  "False",
"isSuppressedInSource":  "False"
}
}
]
}
