{
"version":  "0.1",
"toolInfo":  {
"toolName":  "Microsoft (R) Visual C# Compiler",
"productVersion":  "1.1.0",
"fileVersion":  "1.1.0"
},
"issues":  [
{
"ruleId":  "S2360",
"locations":  [
{
"analysisTarget":  [
{
"uri":  "akka.net\\src\\core\\Akka.TestKit\\EventFilter\\DeadLettersFilter.cs",
"region":  {
"startLine":  21,
"startColumn":  124,
"endLine":  21,
"endColumn":  130
}
}
]
}
],
"shortMessage":  "Use the overloading mechanism instead of the optional parameters.",
"fullMessage":  "The overloading mechanism should be used in place of optional parameters for several reasons. Optional parameter values are baked into the method call site code, thus, if a default value has been changed, all referencing assemblies need to be rebuilt, otherwise the original values will be used. The Common Language Specification (CLS) allows compilers to ignore default parameter values, and thus require the caller to explicitly specify the values. The concept of optional argument exists only in VB.Net and C#. In all other languages like C++ or Java, the overloading mechanism is the only way to get the same behavior. Optional parameters prevent muddying the definition of the function contract. Here is a simple example: if there are two optional parameters, when one is defined, is the second one still optional or mandatory?",
"properties":  {
"severity":  "Warning",
"warningLevel":  "1",
"defaultSeverity":  "Warning",
"title":  "Optional parameters should not be used",
"category":  "Design",
"helpLink":  "http://vs.sonarlint.org/rules/index.html#version=1.9.0\u0026ruleId=S2360",
"isEnabledByDefault":  "True",
"isSuppressedInSource":  "False"
}
},
{
"ruleId":  "S2360",
"locations":  [
{
"analysisTarget":  [
{
"uri":  "akka.net\\src\\core\\Akka.TestKit\\EventFilter\\EventFilterFactory.cs",
"region":  {
"startLine":  45,
"startColumn":  86,
"endLine":  45,
"endColumn":  92
}
}
]
}
],
"shortMessage":  "Use the overloading mechanism instead of the optional parameters.",
"fullMessage":  "The overloading mechanism should be used in place of optional parameters for several reasons. Optional parameter values are baked into the method call site code, thus, if a default value has been changed, all referencing assemblies need to be rebuilt, otherwise the original values will be used. The Common Language Specification (CLS) allows compilers to ignore default parameter values, and thus require the caller to explicitly specify the values. The concept of optional argument exists only in VB.Net and C#. In all other languages like C++ or Java, the overloading mechanism is the only way to get the same behavior. Optional parameters prevent muddying the definition of the function contract. Here is a simple example: if there are two optional parameters, when one is defined, is the second one still optional or mandatory?",
"properties":  {
"severity":  "Warning",
"warningLevel":  "1",
"defaultSeverity":  "Warning",
"title":  "Optional parameters should not be used",
"category":  "Design",
"helpLink":  "http://vs.sonarlint.org/rules/index.html#version=1.9.0\u0026ruleId=S2360",
"isEnabledByDefault":  "True",
"isSuppressedInSource":  "False"
}
},
{
"ruleId":  "S2360",
"locations":  [
{
"analysisTarget":  [
{
"uri":  "akka.net\\src\\core\\Akka.TestKit\\EventFilter\\EventFilterFactory.cs",
"region":  {
"startLine":  65,
"startColumn":  94,
"endLine":  65,
"endColumn":  100
}
}
]
}
],
"shortMessage":  "Use the overloading mechanism instead of the optional parameters.",
"fullMessage":  "The overloading mechanism should be used in place of optional parameters for several reasons. Optional parameter values are baked into the method call site code, thus, if a default value has been changed, all referencing assemblies need to be rebuilt, otherwise the original values will be used. The Common Language Specification (CLS) allows compilers to ignore default parameter values, and thus require the caller to explicitly specify the values. The concept of optional argument exists only in VB.Net and C#. In all other languages like C++ or Java, the overloading mechanism is the only way to get the same behavior. Optional parameters prevent muddying the definition of the function contract. Here is a simple example: if there are two optional parameters, when one is defined, is the second one still optional or mandatory?",
"properties":  {
"severity":  "Warning",
"warningLevel":  "1",
"defaultSeverity":  "Warning",
"title":  "Optional parameters should not be used",
"category":  "Design",
"helpLink":  "http://vs.sonarlint.org/rules/index.html#version=1.9.0\u0026ruleId=S2360",
"isEnabledByDefault":  "True",
"isSuppressedInSource":  "False"
}
},
{
"ruleId":  "S2360",
"locations":  [
{
"analysisTarget":  [
{
"uri":  "akka.net\\src\\core\\Akka.TestKit\\EventFilter\\EventFilterFactory.cs",
"region":  {
"startLine":  65,
"startColumn":  127,
"endLine":  65,
"endColumn":  133
}
}
]
}
],
"shortMessage":  "Use the overloading mechanism instead of the optional parameters.",
"fullMessage":  "The overloading mechanism should be used in place of optional parameters for several reasons. Optional parameter values are baked into the method call site code, thus, if a default value has been changed, all referencing assemblies need to be rebuilt, otherwise the original values will be used. The Common Language Specification (CLS) allows compilers to ignore default parameter values, and thus require the caller to explicitly specify the values. The concept of optional argument exists only in VB.Net and C#. In all other languages like C++ or Java, the overloading mechanism is the only way to get the same behavior. Optional parameters prevent muddying the definition of the function contract. Here is a simple example: if there are two optional parameters, when one is defined, is the second one still optional or mandatory?",
"properties":  {
"severity":  "Warning",
"warningLevel":  "1",
"defaultSeverity":  "Warning",
"title":  "Optional parameters should not be used",
"category":  "Design",
"helpLink":  "http://vs.sonarlint.org/rules/index.html#version=1.9.0\u0026ruleId=S2360",
"isEnabledByDefault":  "True",
"isSuppressedInSource":  "False"
}
},
{
"ruleId":  "S2360",
"locations":  [
{
"analysisTarget":  [
{
"uri":  "akka.net\\src\\core\\Akka.TestKit\\EventFilter\\EventFilterFactory.cs",
"region":  {
"startLine":  94,
"startColumn":  72,
"endLine":  94,
"endColumn":  78
}
}
]
}
],
"shortMessage":  "Use the overloading mechanism instead of the optional parameters.",
"fullMessage":  "The overloading mechanism should be used in place of optional parameters for several reasons. Optional parameter values are baked into the method call site code, thus, if a default value has been changed, all referencing assemblies need to be rebuilt, otherwise the original values will be used. The Common Language Specification (CLS) allows compilers to ignore default parameter values, and thus require the caller to explicitly specify the values. The concept of optional argument exists only in VB.Net and C#. In all other languages like C++ or Java, the overloading mechanism is the only way to get the same behavior. Optional parameters prevent muddying the definition of the function contract. Here is a simple example: if there are two optional parameters, when one is defined, is the second one still optional or mandatory?",
"properties":  {
"severity":  "Warning",
"warningLevel":  "1",
"defaultSeverity":  "Warning",
"title":  "Optional parameters should not be used",
"category":  "Design",
"helpLink":  "http://vs.sonarlint.org/rules/index.html#version=1.9.0\u0026ruleId=S2360",
"isEnabledByDefault":  "True",
"isSuppressedInSource":  "False"
}
},
{
"ruleId":  "S2360",
"locations":  [
{
"analysisTarget":  [
{
"uri":  "akka.net\\src\\core\\Akka.TestKit\\EventFilter\\EventFilterFactory.cs",
"region":  {
"startLine":  94,
"startColumn":  93,
"endLine":  94,
"endColumn":  99
}
}
]
}
],
"shortMessage":  "Use the overloading mechanism instead of the optional parameters.",
"fullMessage":  "The overloading mechanism should be used in place of optional parameters for several reasons. Optional parameter values are baked into the method call site code, thus, if a default value has been changed, all referencing assemblies need to be rebuilt, otherwise the original values will be used. The Common Language Specification (CLS) allows compilers to ignore default parameter values, and thus require the caller to explicitly specify the values. The concept of optional argument exists only in VB.Net and C#. In all other languages like C++ or Java, the overloading mechanism is the only way to get the same behavior. Optional parameters prevent muddying the definition of the function contract. Here is a simple example: if there are two optional parameters, when one is defined, is the second one still optional or mandatory?",
"properties":  {
"severity":  "Warning",
"warningLevel":  "1",
"defaultSeverity":  "Warning",
"title":  "Optional parameters should not be used",
"category":  "Design",
"helpLink":  "http://vs.sonarlint.org/rules/index.html#version=1.9.0\u0026ruleId=S2360",
"isEnabledByDefault":  "True",
"isSuppressedInSource":  "False"
}
},
{
"ruleId":  "S2360",
"locations":  [
{
"analysisTarget":  [
{
"uri":  "akka.net\\src\\core\\Akka.TestKit\\EventFilter\\EventFilterFactory.cs",
"region":  {
"startLine":  94,
"startColumn":  117,
"endLine":  94,
"endColumn":  123
}
}
]
}
],
"shortMessage":  "Use the overloading mechanism instead of the optional parameters.",
"fullMessage":  "The overloading mechanism should be used in place of optional parameters for several reasons. Optional parameter values are baked into the method call site code, thus, if a default value has been changed, all referencing assemblies need to be rebuilt, otherwise the original values will be used. The Common Language Specification (CLS) allows compilers to ignore default parameter values, and thus require the caller to explicitly specify the values. The concept of optional argument exists only in VB.Net and C#. In all other languages like C++ or Java, the overloading mechanism is the only way to get the same behavior. Optional parameters prevent muddying the definition of the function contract. Here is a simple example: if there are two optional parameters, when one is defined, is the second one still optional or mandatory?",
"properties":  {
"severity":  "Warning",
"warningLevel":  "1",
"defaultSeverity":  "Warning",
"title":  "Optional parameters should not be used",
"category":  "Design",
"helpLink":  "http://vs.sonarlint.org/rules/index.html#version=1.9.0\u0026ruleId=S2360",
"isEnabledByDefault":  "True",
"isSuppressedInSource":  "False"
}
},
{
"ruleId":  "S2360",
"locations":  [
{
"analysisTarget":  [
{
"uri":  "akka.net\\src\\core\\Akka.TestKit\\EventFilter\\EventFilterFactory.cs",
"region":  {
"startLine":  94,
"startColumn":  139,
"endLine":  94,
"endColumn":  145
}
}
]
}
],
"shortMessage":  "Use the overloading mechanism instead of the optional parameters.",
"fullMessage":  "The overloading mechanism should be used in place of optional parameters for several reasons. Optional parameter values are baked into the method call site code, thus, if a default value has been changed, all referencing assemblies need to be rebuilt, otherwise the original values will be used. The Common Language Specification (CLS) allows compilers to ignore default parameter values, and thus require the caller to explicitly specify the values. The concept of optional argument exists only in VB.Net and C#. In all other languages like C++ or Java, the overloading mechanism is the only way to get the same behavior. Optional parameters prevent muddying the definition of the function contract. Here is a simple example: if there are two optional parameters, when one is defined, is the second one still optional or mandatory?",
"properties":  {
"severity":  "Warning",
"warningLevel":  "1",
"defaultSeverity":  "Warning",
"title":  "Optional parameters should not be used",
"category":  "Design",
"helpLink":  "http://vs.sonarlint.org/rules/index.html#version=1.9.0\u0026ruleId=S2360",
"isEnabledByDefault":  "True",
"isSuppressedInSource":  "False"
}
},
{
"ruleId":  "S2360",
"locations":  [
{
"analysisTarget":  [
{
"uri":  "akka.net\\src\\core\\Akka.TestKit\\EventFilter\\EventFilterFactory.cs",
"region":  {
"startLine":  122,
"startColumn":  80,
"endLine":  122,
"endColumn":  86
}
}
]
}
],
"shortMessage":  "Use the overloading mechanism instead of the optional parameters.",
"fullMessage":  "The overloading mechanism should be used in place of optional parameters for several reasons. Optional parameter values are baked into the method call site code, thus, if a default value has been changed, all referencing assemblies need to be rebuilt, otherwise the original values will be used. The Common Language Specification (CLS) allows compilers to ignore default parameter values, and thus require the caller to explicitly specify the values. The concept of optional argument exists only in VB.Net and C#. In all other languages like C++ or Java, the overloading mechanism is the only way to get the same behavior. Optional parameters prevent muddying the definition of the function contract. Here is a simple example: if there are two optional parameters, when one is defined, is the second one still optional or mandatory?",
"properties":  {
"severity":  "Warning",
"warningLevel":  "1",
"defaultSeverity":  "Warning",
"title":  "Optional parameters should not be used",
"category":  "Design",
"helpLink":  "http://vs.sonarlint.org/rules/index.html#version=1.9.0\u0026ruleId=S2360",
"isEnabledByDefault":  "True",
"isSuppressedInSource":  "False"
}
},
{
"ruleId":  "S2360",
"locations":  [
{
"analysisTarget":  [
{
"uri":  "akka.net\\src\\core\\Akka.TestKit\\EventFilter\\EventFilterFactory.cs",
"region":  {
"startLine":  122,
"startColumn":  101,
"endLine":  122,
"endColumn":  107
}
}
]
}
],
"shortMessage":  "Use the overloading mechanism instead of the optional parameters.",
"fullMessage":  "The overloading mechanism should be used in place of optional parameters for several reasons. Optional parameter values are baked into the method call site code, thus, if a default value has been changed, all referencing assemblies need to be rebuilt, otherwise the original values will be used. The Common Language Specification (CLS) allows compilers to ignore default parameter values, and thus require the caller to explicitly specify the values. The concept of optional argument exists only in VB.Net and C#. In all other languages like C++ or Java, the overloading mechanism is the only way to get the same behavior. Optional parameters prevent muddying the definition of the function contract. Here is a simple example: if there are two optional parameters, when one is defined, is the second one still optional or mandatory?",
"properties":  {
"severity":  "Warning",
"warningLevel":  "1",
"defaultSeverity":  "Warning",
"title":  "Optional parameters should not be used",
"category":  "Design",
"helpLink":  "http://vs.sonarlint.org/rules/index.html#version=1.9.0\u0026ruleId=S2360",
"isEnabledByDefault":  "True",
"isSuppressedInSource":  "False"
}
},
{
"ruleId":  "S2360",
"locations":  [
{
"analysisTarget":  [
{
"uri":  "akka.net\\src\\core\\Akka.TestKit\\EventFilter\\EventFilterFactory.cs",
"region":  {
"startLine":  122,
"startColumn":  125,
"endLine":  122,
"endColumn":  131
}
}
]
}
],
"shortMessage":  "Use the overloading mechanism instead of the optional parameters.",
"fullMessage":  "The overloading mechanism should be used in place of optional parameters for several reasons. Optional parameter values are baked into the method call site code, thus, if a default value has been changed, all referencing assemblies need to be rebuilt, otherwise the original values will be used. The Common Language Specification (CLS) allows compilers to ignore default parameter values, and thus require the caller to explicitly specify the values. The concept of optional argument exists only in VB.Net and C#. In all other languages like C++ or Java, the overloading mechanism is the only way to get the same behavior. Optional parameters prevent muddying the definition of the function contract. Here is a simple example: if there are two optional parameters, when one is defined, is the second one still optional or mandatory?",
"properties":  {
"severity":  "Warning",
"warningLevel":  "1",
"defaultSeverity":  "Warning",
"title":  "Optional parameters should not be used",
"category":  "Design",
"helpLink":  "http://vs.sonarlint.org/rules/index.html#version=1.9.0\u0026ruleId=S2360",
"isEnabledByDefault":  "True",
"isSuppressedInSource":  "False"
}
},
{
"ruleId":  "S2360",
"locations":  [
{
"analysisTarget":  [
{
"uri":  "akka.net\\src\\core\\Akka.TestKit\\EventFilter\\EventFilterFactory.cs",
"region":  {
"startLine":  122,
"startColumn":  147,
"endLine":  122,
"endColumn":  153
}
}
]
}
],
"shortMessage":  "Use the overloading mechanism instead of the optional parameters.",
"fullMessage":  "The overloading mechanism should be used in place of optional parameters for several reasons. Optional parameter values are baked into the method call site code, thus, if a default value has been changed, all referencing assemblies need to be rebuilt, otherwise the original values will be used. The Common Language Specification (CLS) allows compilers to ignore default parameter values, and thus require the caller to explicitly specify the values. The concept of optional argument exists only in VB.Net and C#. In all other languages like C++ or Java, the overloading mechanism is the only way to get the same behavior. Optional parameters prevent muddying the definition of the function contract. Here is a simple example: if there are two optional parameters, when one is defined, is the second one still optional or mandatory?",
"properties":  {
"severity":  "Warning",
"warningLevel":  "1",
"defaultSeverity":  "Warning",
"title":  "Optional parameters should not be used",
"category":  "Design",
"helpLink":  "http://vs.sonarlint.org/rules/index.html#version=1.9.0\u0026ruleId=S2360",
"isEnabledByDefault":  "True",
"isSuppressedInSource":  "False"
}
},
{
"ruleId":  "S2360",
"locations":  [
{
"analysisTarget":  [
{
"uri":  "akka.net\\src\\core\\Akka.TestKit\\EventFilter\\EventFilterFactory.cs",
"region":  {
"startLine":  122,
"startColumn":  180,
"endLine":  122,
"endColumn":  186
}
}
]
}
],
"shortMessage":  "Use the overloading mechanism instead of the optional parameters.",
"fullMessage":  "The overloading mechanism should be used in place of optional parameters for several reasons. Optional parameter values are baked into the method call site code, thus, if a default value has been changed, all referencing assemblies need to be rebuilt, otherwise the original values will be used. The Common Language Specification (CLS) allows compilers to ignore default parameter values, and thus require the caller to explicitly specify the values. The concept of optional argument exists only in VB.Net and C#. In all other languages like C++ or Java, the overloading mechanism is the only way to get the same behavior. Optional parameters prevent muddying the definition of the function contract. Here is a simple example: if there are two optional parameters, when one is defined, is the second one still optional or mandatory?",
"properties":  {
"severity":  "Warning",
"warningLevel":  "1",
"defaultSeverity":  "Warning",
"title":  "Optional parameters should not be used",
"category":  "Design",
"helpLink":  "http://vs.sonarlint.org/rules/index.html#version=1.9.0\u0026ruleId=S2360",
"isEnabledByDefault":  "True",
"isSuppressedInSource":  "False"
}
},
{
"ruleId":  "S2360",
"locations":  [
{
"analysisTarget":  [
{
"uri":  "akka.net\\src\\core\\Akka.TestKit\\EventFilter\\EventFilterFactory.cs",
"region":  {
"startLine":  169,
"startColumn":  81,
"endLine":  169,
"endColumn":  87
}
}
]
}
],
"shortMessage":  "Use the overloading mechanism instead of the optional parameters.",
"fullMessage":  "The overloading mechanism should be used in place of optional parameters for several reasons. Optional parameter values are baked into the method call site code, thus, if a default value has been changed, all referencing assemblies need to be rebuilt, otherwise the original values will be used. The Common Language Specification (CLS) allows compilers to ignore default parameter values, and thus require the caller to explicitly specify the values. The concept of optional argument exists only in VB.Net and C#. In all other languages like C++ or Java, the overloading mechanism is the only way to get the same behavior. Optional parameters prevent muddying the definition of the function contract. Here is a simple example: if there are two optional parameters, when one is defined, is the second one still optional or mandatory?",
"properties":  {
"severity":  "Warning",
"warningLevel":  "1",
"defaultSeverity":  "Warning",
"title":  "Optional parameters should not be used",
"category":  "Design",
"helpLink":  "http://vs.sonarlint.org/rules/index.html#version=1.9.0\u0026ruleId=S2360",
"isEnabledByDefault":  "True",
"isSuppressedInSource":  "False"
}
},
{
"ruleId":  "S2360",
"locations":  [
{
"analysisTarget":  [
{
"uri":  "akka.net\\src\\core\\Akka.TestKit\\EventFilter\\EventFilterFactory.cs",
"region":  {
"startLine":  169,
"startColumn":  102,
"endLine":  169,
"endColumn":  108
}
}
]
}
],
"shortMessage":  "Use the overloading mechanism instead of the optional parameters.",
"fullMessage":  "The overloading mechanism should be used in place of optional parameters for several reasons. Optional parameter values are baked into the method call site code, thus, if a default value has been changed, all referencing assemblies need to be rebuilt, otherwise the original values will be used. The Common Language Specification (CLS) allows compilers to ignore default parameter values, and thus require the caller to explicitly specify the values. The concept of optional argument exists only in VB.Net and C#. In all other languages like C++ or Java, the overloading mechanism is the only way to get the same behavior. Optional parameters prevent muddying the definition of the function contract. Here is a simple example: if there are two optional parameters, when one is defined, is the second one still optional or mandatory?",
"properties":  {
"severity":  "Warning",
"warningLevel":  "1",
"defaultSeverity":  "Warning",
"title":  "Optional parameters should not be used",
"category":  "Design",
"helpLink":  "http://vs.sonarlint.org/rules/index.html#version=1.9.0\u0026ruleId=S2360",
"isEnabledByDefault":  "True",
"isSuppressedInSource":  "False"
}
},
{
"ruleId":  "S2360",
"locations":  [
{
"analysisTarget":  [
{
"uri":  "akka.net\\src\\core\\Akka.TestKit\\EventFilter\\EventFilterFactory.cs",
"region":  {
"startLine":  169,
"startColumn":  126,
"endLine":  169,
"endColumn":  132
}
}
]
}
],
"shortMessage":  "Use the overloading mechanism instead of the optional parameters.",
"fullMessage":  "The overloading mechanism should be used in place of optional parameters for several reasons. Optional parameter values are baked into the method call site code, thus, if a default value has been changed, all referencing assemblies need to be rebuilt, otherwise the original values will be used. The Common Language Specification (CLS) allows compilers to ignore default parameter values, and thus require the caller to explicitly specify the values. The concept of optional argument exists only in VB.Net and C#. In all other languages like C++ or Java, the overloading mechanism is the only way to get the same behavior. Optional parameters prevent muddying the definition of the function contract. Here is a simple example: if there are two optional parameters, when one is defined, is the second one still optional or mandatory?",
"properties":  {
"severity":  "Warning",
"warningLevel":  "1",
"defaultSeverity":  "Warning",
"title":  "Optional parameters should not be used",
"category":  "Design",
"helpLink":  "http://vs.sonarlint.org/rules/index.html#version=1.9.0\u0026ruleId=S2360",
"isEnabledByDefault":  "True",
"isSuppressedInSource":  "False"
}
},
{
"ruleId":  "S2360",
"locations":  [
{
"analysisTarget":  [
{
"uri":  "akka.net\\src\\core\\Akka.TestKit\\EventFilter\\EventFilterFactory.cs",
"region":  {
"startLine":  169,
"startColumn":  148,
"endLine":  169,
"endColumn":  154
}
}
]
}
],
"shortMessage":  "Use the overloading mechanism instead of the optional parameters.",
"fullMessage":  "The overloading mechanism should be used in place of optional parameters for several reasons. Optional parameter values are baked into the method call site code, thus, if a default value has been changed, all referencing assemblies need to be rebuilt, otherwise the original values will be used. The Common Language Specification (CLS) allows compilers to ignore default parameter values, and thus require the caller to explicitly specify the values. The concept of optional argument exists only in VB.Net and C#. In all other languages like C++ or Java, the overloading mechanism is the only way to get the same behavior. Optional parameters prevent muddying the definition of the function contract. Here is a simple example: if there are two optional parameters, when one is defined, is the second one still optional or mandatory?",
"properties":  {
"severity":  "Warning",
"warningLevel":  "1",
"defaultSeverity":  "Warning",
"title":  "Optional parameters should not be used",
"category":  "Design",
"helpLink":  "http://vs.sonarlint.org/rules/index.html#version=1.9.0\u0026ruleId=S2360",
"isEnabledByDefault":  "True",
"isSuppressedInSource":  "False"
}
},
{
"ruleId":  "S2360",
"locations":  [
{
"analysisTarget":  [
{
"uri":  "akka.net\\src\\core\\Akka.TestKit\\EventFilter\\EventFilterFactory.cs",
"region":  {
"startLine":  191,
"startColumn":  95,
"endLine":  191,
"endColumn":  101
}
}
]
}
],
"shortMessage":  "Use the overloading mechanism instead of the optional parameters.",
"fullMessage":  "The overloading mechanism should be used in place of optional parameters for several reasons. Optional parameter values are baked into the method call site code, thus, if a default value has been changed, all referencing assemblies need to be rebuilt, otherwise the original values will be used. The Common Language Specification (CLS) allows compilers to ignore default parameter values, and thus require the caller to explicitly specify the values. The concept of optional argument exists only in VB.Net and C#. In all other languages like C++ or Java, the overloading mechanism is the only way to get the same behavior. Optional parameters prevent muddying the definition of the function contract. Here is a simple example: if there are two optional parameters, when one is defined, is the second one still optional or mandatory?",
"properties":  {
"severity":  "Warning",
"warningLevel":  "1",
"defaultSeverity":  "Warning",
"title":  "Optional parameters should not be used",
"category":  "Design",
"helpLink":  "http://vs.sonarlint.org/rules/index.html#version=1.9.0\u0026ruleId=S2360",
"isEnabledByDefault":  "True",
"isSuppressedInSource":  "False"
}
},
{
"ruleId":  "S2360",
"locations":  [
{
"analysisTarget":  [
{
"uri":  "akka.net\\src\\core\\Akka.TestKit\\EventFilter\\EventFilterFactory.cs",
"region":  {
"startLine":  222,
"startColumn":  70,
"endLine":  222,
"endColumn":  76
}
}
]
}
],
"shortMessage":  "Use the overloading mechanism instead of the optional parameters.",
"fullMessage":  "The overloading mechanism should be used in place of optional parameters for several reasons. Optional parameter values are baked into the method call site code, thus, if a default value has been changed, all referencing assemblies need to be rebuilt, otherwise the original values will be used. The Common Language Specification (CLS) allows compilers to ignore default parameter values, and thus require the caller to explicitly specify the values. The concept of optional argument exists only in VB.Net and C#. In all other languages like C++ or Java, the overloading mechanism is the only way to get the same behavior. Optional parameters prevent muddying the definition of the function contract. Here is a simple example: if there are two optional parameters, when one is defined, is the second one still optional or mandatory?",
"properties":  {
"severity":  "Warning",
"warningLevel":  "1",
"defaultSeverity":  "Warning",
"title":  "Optional parameters should not be used",
"category":  "Design",
"helpLink":  "http://vs.sonarlint.org/rules/index.html#version=1.9.0\u0026ruleId=S2360",
"isEnabledByDefault":  "True",
"isSuppressedInSource":  "False"
}
},
{
"ruleId":  "S2360",
"locations":  [
{
"analysisTarget":  [
{
"uri":  "akka.net\\src\\core\\Akka.TestKit\\EventFilter\\EventFilterFactory.cs",
"region":  {
"startLine":  232,
"startColumn":  100,
"endLine":  232,
"endColumn":  106
}
}
]
}
],
"shortMessage":  "Use the overloading mechanism instead of the optional parameters.",
"fullMessage":  "The overloading mechanism should be used in place of optional parameters for several reasons. Optional parameter values are baked into the method call site code, thus, if a default value has been changed, all referencing assemblies need to be rebuilt, otherwise the original values will be used. The Common Language Specification (CLS) allows compilers to ignore default parameter values, and thus require the caller to explicitly specify the values. The concept of optional argument exists only in VB.Net and C#. In all other languages like C++ or Java, the overloading mechanism is the only way to get the same behavior. Optional parameters prevent muddying the definition of the function contract. Here is a simple example: if there are two optional parameters, when one is defined, is the second one still optional or mandatory?",
"properties":  {
"severity":  "Warning",
"warningLevel":  "1",
"defaultSeverity":  "Warning",
"title":  "Optional parameters should not be used",
"category":  "Design",
"helpLink":  "http://vs.sonarlint.org/rules/index.html#version=1.9.0\u0026ruleId=S2360",
"isEnabledByDefault":  "True",
"isSuppressedInSource":  "False"
}
},
{
"ruleId":  "S2360",
"locations":  [
{
"analysisTarget":  [
{
"uri":  "akka.net\\src\\core\\Akka.TestKit\\EventFilter\\EventFilterFactory.cs",
"region":  {
"startLine":  241,
"startColumn":  71,
"endLine":  241,
"endColumn":  77
}
}
]
}
],
"shortMessage":  "Use the overloading mechanism instead of the optional parameters.",
"fullMessage":  "The overloading mechanism should be used in place of optional parameters for several reasons. Optional parameter values are baked into the method call site code, thus, if a default value has been changed, all referencing assemblies need to be rebuilt, otherwise the original values will be used. The Common Language Specification (CLS) allows compilers to ignore default parameter values, and thus require the caller to explicitly specify the values. The concept of optional argument exists only in VB.Net and C#. In all other languages like C++ or Java, the overloading mechanism is the only way to get the same behavior. Optional parameters prevent muddying the definition of the function contract. Here is a simple example: if there are two optional parameters, when one is defined, is the second one still optional or mandatory?",
"properties":  {
"severity":  "Warning",
"warningLevel":  "1",
"defaultSeverity":  "Warning",
"title":  "Optional parameters should not be used",
"category":  "Design",
"helpLink":  "http://vs.sonarlint.org/rules/index.html#version=1.9.0\u0026ruleId=S2360",
"isEnabledByDefault":  "True",
"isSuppressedInSource":  "False"
}
},
{
"ruleId":  "S2360",
"locations":  [
{
"analysisTarget":  [
{
"uri":  "akka.net\\src\\core\\Akka.TestKit\\EventFilter\\EventFilterFactory.cs",
"region":  {
"startLine":  250,
"startColumn":  99,
"endLine":  250,
"endColumn":  105
}
}
]
}
],
"shortMessage":  "Use the overloading mechanism instead of the optional parameters.",
"fullMessage":  "The overloading mechanism should be used in place of optional parameters for several reasons. Optional parameter values are baked into the method call site code, thus, if a default value has been changed, all referencing assemblies need to be rebuilt, otherwise the original values will be used. The Common Language Specification (CLS) allows compilers to ignore default parameter values, and thus require the caller to explicitly specify the values. The concept of optional argument exists only in VB.Net and C#. In all other languages like C++ or Java, the overloading mechanism is the only way to get the same behavior. Optional parameters prevent muddying the definition of the function contract. Here is a simple example: if there are two optional parameters, when one is defined, is the second one still optional or mandatory?",
"properties":  {
"severity":  "Warning",
"warningLevel":  "1",
"defaultSeverity":  "Warning",
"title":  "Optional parameters should not be used",
"category":  "Design",
"helpLink":  "http://vs.sonarlint.org/rules/index.html#version=1.9.0\u0026ruleId=S2360",
"isEnabledByDefault":  "True",
"isSuppressedInSource":  "False"
}
},
{
"ruleId":  "S2360",
"locations":  [
{
"analysisTarget":  [
{
"uri":  "akka.net\\src\\core\\Akka.TestKit\\EventFilter\\Internal\\DebugFilter.cs",
"region":  {
"startLine":  17,
"startColumn":  57,
"endLine":  17,
"endColumn":  63
}
}
]
}
],
"shortMessage":  "Use the overloading mechanism instead of the optional parameters.",
"fullMessage":  "The overloading mechanism should be used in place of optional parameters for several reasons. Optional parameter values are baked into the method call site code, thus, if a default value has been changed, all referencing assemblies need to be rebuilt, otherwise the original values will be used. The Common Language Specification (CLS) allows compilers to ignore default parameter values, and thus require the caller to explicitly specify the values. The concept of optional argument exists only in VB.Net and C#. In all other languages like C++ or Java, the overloading mechanism is the only way to get the same behavior. Optional parameters prevent muddying the definition of the function contract. Here is a simple example: if there are two optional parameters, when one is defined, is the second one still optional or mandatory?",
"properties":  {
"severity":  "Warning",
"warningLevel":  "1",
"defaultSeverity":  "Warning",
"title":  "Optional parameters should not be used",
"category":  "Design",
"helpLink":  "http://vs.sonarlint.org/rules/index.html#version=1.9.0\u0026ruleId=S2360",
"isEnabledByDefault":  "True",
"isSuppressedInSource":  "False"
}
},
{
"ruleId":  "S2360",
"locations":  [
{
"analysisTarget":  [
{
"uri":  "akka.net\\src\\core\\Akka.TestKit\\EventFilter\\Internal\\DebugFilter.cs",
"region":  {
"startLine":  17,
"startColumn":  94,
"endLine":  17,
"endColumn":  100
}
}
]
}
],
"shortMessage":  "Use the overloading mechanism instead of the optional parameters.",
"fullMessage":  "The overloading mechanism should be used in place of optional parameters for several reasons. Optional parameter values are baked into the method call site code, thus, if a default value has been changed, all referencing assemblies need to be rebuilt, otherwise the original values will be used. The Common Language Specification (CLS) allows compilers to ignore default parameter values, and thus require the caller to explicitly specify the values. The concept of optional argument exists only in VB.Net and C#. In all other languages like C++ or Java, the overloading mechanism is the only way to get the same behavior. Optional parameters prevent muddying the definition of the function contract. Here is a simple example: if there are two optional parameters, when one is defined, is the second one still optional or mandatory?",
"properties":  {
"severity":  "Warning",
"warningLevel":  "1",
"defaultSeverity":  "Warning",
"title":  "Optional parameters should not be used",
"category":  "Design",
"helpLink":  "http://vs.sonarlint.org/rules/index.html#version=1.9.0\u0026ruleId=S2360",
"isEnabledByDefault":  "True",
"isSuppressedInSource":  "False"
}
},
{
"ruleId":  "S2360",
"locations":  [
{
"analysisTarget":  [
{
"uri":  "akka.net\\src\\core\\Akka.TestKit\\EventFilter\\Internal\\ErrorFilter.cs",
"region":  {
"startLine":  22,
"startColumn":  57,
"endLine":  22,
"endColumn":  63
}
}
]
}
],
"shortMessage":  "Use the overloading mechanism instead of the optional parameters.",
"fullMessage":  "The overloading mechanism should be used in place of optional parameters for several reasons. Optional parameter values are baked into the method call site code, thus, if a default value has been changed, all referencing assemblies need to be rebuilt, otherwise the original values will be used. The Common Language Specification (CLS) allows compilers to ignore default parameter values, and thus require the caller to explicitly specify the values. The concept of optional argument exists only in VB.Net and C#. In all other languages like C++ or Java, the overloading mechanism is the only way to get the same behavior. Optional parameters prevent muddying the definition of the function contract. Here is a simple example: if there are two optional parameters, when one is defined, is the second one still optional or mandatory?",
"properties":  {
"severity":  "Warning",
"warningLevel":  "1",
"defaultSeverity":  "Warning",
"title":  "Optional parameters should not be used",
"category":  "Design",
"helpLink":  "http://vs.sonarlint.org/rules/index.html#version=1.9.0\u0026ruleId=S2360",
"isEnabledByDefault":  "True",
"isSuppressedInSource":  "False"
}
},
{
"ruleId":  "S2360",
"locations":  [
{
"analysisTarget":  [
{
"uri":  "akka.net\\src\\core\\Akka.TestKit\\EventFilter\\Internal\\ErrorFilter.cs",
"region":  {
"startLine":  22,
"startColumn":  94,
"endLine":  22,
"endColumn":  100
}
}
]
}
],
"shortMessage":  "Use the overloading mechanism instead of the optional parameters.",
"fullMessage":  "The overloading mechanism should be used in place of optional parameters for several reasons. Optional parameter values are baked into the method call site code, thus, if a default value has been changed, all referencing assemblies need to be rebuilt, otherwise the original values will be used. The Common Language Specification (CLS) allows compilers to ignore default parameter values, and thus require the caller to explicitly specify the values. The concept of optional argument exists only in VB.Net and C#. In all other languages like C++ or Java, the overloading mechanism is the only way to get the same behavior. Optional parameters prevent muddying the definition of the function contract. Here is a simple example: if there are two optional parameters, when one is defined, is the second one still optional or mandatory?",
"properties":  {
"severity":  "Warning",
"warningLevel":  "1",
"defaultSeverity":  "Warning",
"title":  "Optional parameters should not be used",
"category":  "Design",
"helpLink":  "http://vs.sonarlint.org/rules/index.html#version=1.9.0\u0026ruleId=S2360",
"isEnabledByDefault":  "True",
"isSuppressedInSource":  "False"
}
},
{
"ruleId":  "S2360",
"locations":  [
{
"analysisTarget":  [
{
"uri":  "akka.net\\src\\core\\Akka.TestKit\\EventFilter\\Internal\\ErrorFilter.cs",
"region":  {
"startLine":  27,
"startColumn":  77,
"endLine":  27,
"endColumn":  83
}
}
]
}
],
"shortMessage":  "Use the overloading mechanism instead of the optional parameters.",
"fullMessage":  "The overloading mechanism should be used in place of optional parameters for several reasons. Optional parameter values are baked into the method call site code, thus, if a default value has been changed, all referencing assemblies need to be rebuilt, otherwise the original values will be used. The Common Language Specification (CLS) allows compilers to ignore default parameter values, and thus require the caller to explicitly specify the values. The concept of optional argument exists only in VB.Net and C#. In all other languages like C++ or Java, the overloading mechanism is the only way to get the same behavior. Optional parameters prevent muddying the definition of the function contract. Here is a simple example: if there are two optional parameters, when one is defined, is the second one still optional or mandatory?",
"properties":  {
"severity":  "Warning",
"warningLevel":  "1",
"defaultSeverity":  "Warning",
"title":  "Optional parameters should not be used",
"category":  "Design",
"helpLink":  "http://vs.sonarlint.org/rules/index.html#version=1.9.0\u0026ruleId=S2360",
"isEnabledByDefault":  "True",
"isSuppressedInSource":  "False"
}
},
{
"ruleId":  "S2360",
"locations":  [
{
"analysisTarget":  [
{
"uri":  "akka.net\\src\\core\\Akka.TestKit\\EventFilter\\Internal\\ErrorFilter.cs",
"region":  {
"startLine":  27,
"startColumn":  114,
"endLine":  27,
"endColumn":  120
}
}
]
}
],
"shortMessage":  "Use the overloading mechanism instead of the optional parameters.",
"fullMessage":  "The overloading mechanism should be used in place of optional parameters for several reasons. Optional parameter values are baked into the method call site code, thus, if a default value has been changed, all referencing assemblies need to be rebuilt, otherwise the original values will be used. The Common Language Specification (CLS) allows compilers to ignore default parameter values, and thus require the caller to explicitly specify the values. The concept of optional argument exists only in VB.Net and C#. In all other languages like C++ or Java, the overloading mechanism is the only way to get the same behavior. Optional parameters prevent muddying the definition of the function contract. Here is a simple example: if there are two optional parameters, when one is defined, is the second one still optional or mandatory?",
"properties":  {
"severity":  "Warning",
"warningLevel":  "1",
"defaultSeverity":  "Warning",
"title":  "Optional parameters should not be used",
"category":  "Design",
"helpLink":  "http://vs.sonarlint.org/rules/index.html#version=1.9.0\u0026ruleId=S2360",
"isEnabledByDefault":  "True",
"isSuppressedInSource":  "False"
}
},
{
"ruleId":  "S2360",
"locations":  [
{
"analysisTarget":  [
{
"uri":  "akka.net\\src\\core\\Akka.TestKit\\EventFilter\\Internal\\ErrorFilter.cs",
"region":  {
"startLine":  27,
"startColumn":  149,
"endLine":  27,
"endColumn":  155
}
}
]
}
],
"shortMessage":  "Use the overloading mechanism instead of the optional parameters.",
"fullMessage":  "The overloading mechanism should be used in place of optional parameters for several reasons. Optional parameter values are baked into the method call site code, thus, if a default value has been changed, all referencing assemblies need to be rebuilt, otherwise the original values will be used. The Common Language Specification (CLS) allows compilers to ignore default parameter values, and thus require the caller to explicitly specify the values. The concept of optional argument exists only in VB.Net and C#. In all other languages like C++ or Java, the overloading mechanism is the only way to get the same behavior. Optional parameters prevent muddying the definition of the function contract. Here is a simple example: if there are two optional parameters, when one is defined, is the second one still optional or mandatory?",
"properties":  {
"severity":  "Warning",
"warningLevel":  "1",
"defaultSeverity":  "Warning",
"title":  "Optional parameters should not be used",
"category":  "Design",
"helpLink":  "http://vs.sonarlint.org/rules/index.html#version=1.9.0\u0026ruleId=S2360",
"isEnabledByDefault":  "True",
"isSuppressedInSource":  "False"
}
},
{
"ruleId":  "S2360",
"locations":  [
{
"analysisTarget":  [
{
"uri":  "akka.net\\src\\core\\Akka.TestKit\\EventFilter\\Internal\\InfoFilter.cs",
"region":  {
"startLine":  17,
"startColumn":  56,
"endLine":  17,
"endColumn":  62
}
}
]
}
],
"shortMessage":  "Use the overloading mechanism instead of the optional parameters.",
"fullMessage":  "The overloading mechanism should be used in place of optional parameters for several reasons. Optional parameter values are baked into the method call site code, thus, if a default value has been changed, all referencing assemblies need to be rebuilt, otherwise the original values will be used. The Common Language Specification (CLS) allows compilers to ignore default parameter values, and thus require the caller to explicitly specify the values. The concept of optional argument exists only in VB.Net and C#. In all other languages like C++ or Java, the overloading mechanism is the only way to get the same behavior. Optional parameters prevent muddying the definition of the function contract. Here is a simple example: if there are two optional parameters, when one is defined, is the second one still optional or mandatory?",
"properties":  {
"severity":  "Warning",
"warningLevel":  "1",
"defaultSeverity":  "Warning",
"title":  "Optional parameters should not be used",
"category":  "Design",
"helpLink":  "http://vs.sonarlint.org/rules/index.html#version=1.9.0\u0026ruleId=S2360",
"isEnabledByDefault":  "True",
"isSuppressedInSource":  "False"
}
},
{
"ruleId":  "S2360",
"locations":  [
{
"analysisTarget":  [
{
"uri":  "akka.net\\src\\core\\Akka.TestKit\\EventFilter\\Internal\\InfoFilter.cs",
"region":  {
"startLine":  17,
"startColumn":  93,
"endLine":  17,
"endColumn":  99
}
}
]
}
],
"shortMessage":  "Use the overloading mechanism instead of the optional parameters.",
"fullMessage":  "The overloading mechanism should be used in place of optional parameters for several reasons. Optional parameter values are baked into the method call site code, thus, if a default value has been changed, all referencing assemblies need to be rebuilt, otherwise the original values will be used. The Common Language Specification (CLS) allows compilers to ignore default parameter values, and thus require the caller to explicitly specify the values. The concept of optional argument exists only in VB.Net and C#. In all other languages like C++ or Java, the overloading mechanism is the only way to get the same behavior. Optional parameters prevent muddying the definition of the function contract. Here is a simple example: if there are two optional parameters, when one is defined, is the second one still optional or mandatory?",
"properties":  {
"severity":  "Warning",
"warningLevel":  "1",
"defaultSeverity":  "Warning",
"title":  "Optional parameters should not be used",
"category":  "Design",
"helpLink":  "http://vs.sonarlint.org/rules/index.html#version=1.9.0\u0026ruleId=S2360",
"isEnabledByDefault":  "True",
"isSuppressedInSource":  "False"
}
},
{
"ruleId":  "S2360",
"locations":  [
{
"analysisTarget":  [
{
"uri":  "akka.net\\src\\core\\Akka.TestKit\\EventFilter\\Internal\\StringMatcher\\EqualsStringAndPathMatcher.cs",
"region":  {
"startLine":  20,
"startColumn":  73,
"endLine":  20,
"endColumn":  78
}
}
]
}
],
"shortMessage":  "Use the overloading mechanism instead of the optional parameters.",
"fullMessage":  "The overloading mechanism should be used in place of optional parameters for several reasons. Optional parameter values are baked into the method call site code, thus, if a default value has been changed, all referencing assemblies need to be rebuilt, otherwise the original values will be used. The Common Language Specification (CLS) allows compilers to ignore default parameter values, and thus require the caller to explicitly specify the values. The concept of optional argument exists only in VB.Net and C#. In all other languages like C++ or Java, the overloading mechanism is the only way to get the same behavior. Optional parameters prevent muddying the definition of the function contract. Here is a simple example: if there are two optional parameters, when one is defined, is the second one still optional or mandatory?",
"properties":  {
"severity":  "Warning",
"warningLevel":  "1",
"defaultSeverity":  "Warning",
"title":  "Optional parameters should not be used",
"category":  "Design",
"helpLink":  "http://vs.sonarlint.org/rules/index.html#version=1.9.0\u0026ruleId=S2360",
"isEnabledByDefault":  "True",
"isSuppressedInSource":  "False"
}
},
{
"ruleId":  "S2360",
"locations":  [
{
"analysisTarget":  [
{
"uri":  "akka.net\\src\\core\\Akka.TestKit\\EventFilter\\Internal\\StringMatcher\\PredicateMatcher.cs",
"region":  {
"startLine":  19,
"startColumn":  72,
"endLine":  19,
"endColumn":  75
}
}
]
}
],
"shortMessage":  "Use the overloading mechanism instead of the optional parameters.",
"fullMessage":  "The overloading mechanism should be used in place of optional parameters for several reasons. Optional parameter values are baked into the method call site code, thus, if a default value has been changed, all referencing assemblies need to be rebuilt, otherwise the original values will be used. The Common Language Specification (CLS) allows compilers to ignore default parameter values, and thus require the caller to explicitly specify the values. The concept of optional argument exists only in VB.Net and C#. In all other languages like C++ or Java, the overloading mechanism is the only way to get the same behavior. Optional parameters prevent muddying the definition of the function contract. Here is a simple example: if there are two optional parameters, when one is defined, is the second one still optional or mandatory?",
"properties":  {
"severity":  "Warning",
"warningLevel":  "1",
"defaultSeverity":  "Warning",
"title":  "Optional parameters should not be used",
"category":  "Design",
"helpLink":  "http://vs.sonarlint.org/rules/index.html#version=1.9.0\u0026ruleId=S2360",
"isEnabledByDefault":  "True",
"isSuppressedInSource":  "False"
}
},
{
"ruleId":  "S2360",
"locations":  [
{
"analysisTarget":  [
{
"uri":  "akka.net\\src\\core\\Akka.TestKit\\EventFilter\\Internal\\WarningFilter.cs",
"region":  {
"startLine":  17,
"startColumn":  59,
"endLine":  17,
"endColumn":  65
}
}
]
}
],
"shortMessage":  "Use the overloading mechanism instead of the optional parameters.",
"fullMessage":  "The overloading mechanism should be used in place of optional parameters for several reasons. Optional parameter values are baked into the method call site code, thus, if a default value has been changed, all referencing assemblies need to be rebuilt, otherwise the original values will be used. The Common Language Specification (CLS) allows compilers to ignore default parameter values, and thus require the caller to explicitly specify the values. The concept of optional argument exists only in VB.Net and C#. In all other languages like C++ or Java, the overloading mechanism is the only way to get the same behavior. Optional parameters prevent muddying the definition of the function contract. Here is a simple example: if there are two optional parameters, when one is defined, is the second one still optional or mandatory?",
"properties":  {
"severity":  "Warning",
"warningLevel":  "1",
"defaultSeverity":  "Warning",
"title":  "Optional parameters should not be used",
"category":  "Design",
"helpLink":  "http://vs.sonarlint.org/rules/index.html#version=1.9.0\u0026ruleId=S2360",
"isEnabledByDefault":  "True",
"isSuppressedInSource":  "False"
}
},
{
"ruleId":  "S2360",
"locations":  [
{
"analysisTarget":  [
{
"uri":  "akka.net\\src\\core\\Akka.TestKit\\EventFilter\\Internal\\WarningFilter.cs",
"region":  {
"startLine":  17,
"startColumn":  96,
"endLine":  17,
"endColumn":  102
}
}
]
}
],
"shortMessage":  "Use the overloading mechanism instead of the optional parameters.",
"fullMessage":  "The overloading mechanism should be used in place of optional parameters for several reasons. Optional parameter values are baked into the method call site code, thus, if a default value has been changed, all referencing assemblies need to be rebuilt, otherwise the original values will be used. The Common Language Specification (CLS) allows compilers to ignore default parameter values, and thus require the caller to explicitly specify the values. The concept of optional argument exists only in VB.Net and C#. In all other languages like C++ or Java, the overloading mechanism is the only way to get the same behavior. Optional parameters prevent muddying the definition of the function contract. Here is a simple example: if there are two optional parameters, when one is defined, is the second one still optional or mandatory?",
"properties":  {
"severity":  "Warning",
"warningLevel":  "1",
"defaultSeverity":  "Warning",
"title":  "Optional parameters should not be used",
"category":  "Design",
"helpLink":  "http://vs.sonarlint.org/rules/index.html#version=1.9.0\u0026ruleId=S2360",
"isEnabledByDefault":  "True",
"isSuppressedInSource":  "False"
}
},
{
"ruleId":  "S2360",
"locations":  [
{
"analysisTarget":  [
{
"uri":  "akka.net\\src\\core\\Akka.TestKit\\Internal\\InternalTestActorRef.cs",
"region":  {
"startLine":  70,
"startColumn":  61,
"endLine":  70,
"endColumn":  67
}
}
]
}
],
"shortMessage":  "Use the overloading mechanism instead of the optional parameters.",
"fullMessage":  "The overloading mechanism should be used in place of optional parameters for several reasons. Optional parameter values are baked into the method call site code, thus, if a default value has been changed, all referencing assemblies need to be rebuilt, otherwise the original values will be used. The Common Language Specification (CLS) allows compilers to ignore default parameter values, and thus require the caller to explicitly specify the values. The concept of optional argument exists only in VB.Net and C#. In all other languages like C++ or Java, the overloading mechanism is the only way to get the same behavior. Optional parameters prevent muddying the definition of the function contract. Here is a simple example: if there are two optional parameters, when one is defined, is the second one still optional or mandatory?",
"properties":  {
"severity":  "Warning",
"warningLevel":  "1",
"defaultSeverity":  "Warning",
"title":  "Optional parameters should not be used",
"category":  "Design",
"helpLink":  "http://vs.sonarlint.org/rules/index.html#version=1.9.0\u0026ruleId=S2360",
"isEnabledByDefault":  "True",
"isSuppressedInSource":  "False"
}
},
{
"ruleId":  "S2360",
"locations":  [
{
"analysisTarget":  [
{
"uri":  "akka.net\\src\\core\\Akka.TestKit\\Internal\\InternalTestActorRef.cs",
"region":  {
"startLine":  128,
"startColumn":  104,
"endLine":  128,
"endColumn":  110
}
}
]
}
],
"shortMessage":  "Use the overloading mechanism instead of the optional parameters.",
"fullMessage":  "The overloading mechanism should be used in place of optional parameters for several reasons. Optional parameter values are baked into the method call site code, thus, if a default value has been changed, all referencing assemblies need to be rebuilt, otherwise the original values will be used. The Common Language Specification (CLS) allows compilers to ignore default parameter values, and thus require the caller to explicitly specify the values. The concept of optional argument exists only in VB.Net and C#. In all other languages like C++ or Java, the overloading mechanism is the only way to get the same behavior. Optional parameters prevent muddying the definition of the function contract. Here is a simple example: if there are two optional parameters, when one is defined, is the second one still optional or mandatory?",
"properties":  {
"severity":  "Warning",
"warningLevel":  "1",
"defaultSeverity":  "Warning",
"title":  "Optional parameters should not be used",
"category":  "Design",
"helpLink":  "http://vs.sonarlint.org/rules/index.html#version=1.9.0\u0026ruleId=S2360",
"isEnabledByDefault":  "True",
"isSuppressedInSource":  "False"
}
},
{
"ruleId":  "S2360",
"locations":  [
{
"analysisTarget":  [
{
"uri":  "akka.net\\src\\core\\Akka.TestKit\\Internal\\InternalTestActorRef.cs",
"region":  {
"startLine":  128,
"startColumn":  124,
"endLine":  128,
"endColumn":  130
}
}
]
}
],
"shortMessage":  "Use the overloading mechanism instead of the optional parameters.",
"fullMessage":  "The overloading mechanism should be used in place of optional parameters for several reasons. Optional parameter values are baked into the method call site code, thus, if a default value has been changed, all referencing assemblies need to be rebuilt, otherwise the original values will be used. The Common Language Specification (CLS) allows compilers to ignore default parameter values, and thus require the caller to explicitly specify the values. The concept of optional argument exists only in VB.Net and C#. In all other languages like C++ or Java, the overloading mechanism is the only way to get the same behavior. Optional parameters prevent muddying the definition of the function contract. Here is a simple example: if there are two optional parameters, when one is defined, is the second one still optional or mandatory?",
"properties":  {
"severity":  "Warning",
"warningLevel":  "1",
"defaultSeverity":  "Warning",
"title":  "Optional parameters should not be used",
"category":  "Design",
"helpLink":  "http://vs.sonarlint.org/rules/index.html#version=1.9.0\u0026ruleId=S2360",
"isEnabledByDefault":  "True",
"isSuppressedInSource":  "False"
}
},
{
"ruleId":  "S2360",
"locations":  [
{
"analysisTarget":  [
{
"uri":  "akka.net\\src\\core\\Akka.TestKit\\ITestKitAssertions.cs",
"region":  {
"startLine":  14,
"startColumn":  32,
"endLine":  14,
"endColumn":  36
}
}
]
}
],
"shortMessage":  "Use the overloading mechanism instead of the optional parameters.",
"fullMessage":  "The overloading mechanism should be used in place of optional parameters for several reasons. Optional parameter values are baked into the method call site code, thus, if a default value has been changed, all referencing assemblies need to be rebuilt, otherwise the original values will be used. The Common Language Specification (CLS) allows compilers to ignore default parameter values, and thus require the caller to explicitly specify the values. The concept of optional argument exists only in VB.Net and C#. In all other languages like C++ or Java, the overloading mechanism is the only way to get the same behavior. Optional parameters prevent muddying the definition of the function contract. Here is a simple example: if there are two optional parameters, when one is defined, is the second one still optional or mandatory?",
"properties":  {
"severity":  "Warning",
"warningLevel":  "1",
"defaultSeverity":  "Warning",
"title":  "Optional parameters should not be used",
"category":  "Design",
"helpLink":  "http://vs.sonarlint.org/rules/index.html#version=1.9.0\u0026ruleId=S2360",
"isEnabledByDefault":  "True",
"isSuppressedInSource":  "False"
}
},
{
"ruleId":  "S2360",
"locations":  [
{
"analysisTarget":  [
{
"uri":  "akka.net\\src\\core\\Akka.TestKit\\ITestKitAssertions.cs",
"region":  {
"startLine":  15,
"startColumn":  54,
"endLine":  15,
"endColumn":  58
}
}
]
}
],
"shortMessage":  "Use the overloading mechanism instead of the optional parameters.",
"fullMessage":  "The overloading mechanism should be used in place of optional parameters for several reasons. Optional parameter values are baked into the method call site code, thus, if a default value has been changed, all referencing assemblies need to be rebuilt, otherwise the original values will be used. The Common Language Specification (CLS) allows compilers to ignore default parameter values, and thus require the caller to explicitly specify the values. The concept of optional argument exists only in VB.Net and C#. In all other languages like C++ or Java, the overloading mechanism is the only way to get the same behavior. Optional parameters prevent muddying the definition of the function contract. Here is a simple example: if there are two optional parameters, when one is defined, is the second one still optional or mandatory?",
"properties":  {
"severity":  "Warning",
"warningLevel":  "1",
"defaultSeverity":  "Warning",
"title":  "Optional parameters should not be used",
"category":  "Design",
"helpLink":  "http://vs.sonarlint.org/rules/index.html#version=1.9.0\u0026ruleId=S2360",
"isEnabledByDefault":  "True",
"isSuppressedInSource":  "False"
}
},
{
"ruleId":  "S2360",
"locations":  [
{
"analysisTarget":  [
{
"uri":  "akka.net\\src\\core\\Akka.TestKit\\ITestKitAssertions.cs",
"region":  {
"startLine":  16,
"startColumn":  55,
"endLine":  16,
"endColumn":  59
}
}
]
}
],
"shortMessage":  "Use the overloading mechanism instead of the optional parameters.",
"fullMessage":  "The overloading mechanism should be used in place of optional parameters for several reasons. Optional parameter values are baked into the method call site code, thus, if a default value has been changed, all referencing assemblies need to be rebuilt, otherwise the original values will be used. The Common Language Specification (CLS) allows compilers to ignore default parameter values, and thus require the caller to explicitly specify the values. The concept of optional argument exists only in VB.Net and C#. In all other languages like C++ or Java, the overloading mechanism is the only way to get the same behavior. Optional parameters prevent muddying the definition of the function contract. Here is a simple example: if there are two optional parameters, when one is defined, is the second one still optional or mandatory?",
"properties":  {
"severity":  "Warning",
"warningLevel":  "1",
"defaultSeverity":  "Warning",
"title":  "Optional parameters should not be used",
"category":  "Design",
"helpLink":  "http://vs.sonarlint.org/rules/index.html#version=1.9.0\u0026ruleId=S2360",
"isEnabledByDefault":  "True",
"isSuppressedInSource":  "False"
}
},
{
"ruleId":  "S2360",
"locations":  [
{
"analysisTarget":  [
{
"uri":  "akka.net\\src\\core\\Akka.TestKit\\ITestKitAssertions.cs",
"region":  {
"startLine":  17,
"startColumn":  64,
"endLine":  17,
"endColumn":  68
}
}
]
}
],
"shortMessage":  "Use the overloading mechanism instead of the optional parameters.",
"fullMessage":  "The overloading mechanism should be used in place of optional parameters for several reasons. Optional parameter values are baked into the method call site code, thus, if a default value has been changed, all referencing assemblies need to be rebuilt, otherwise the original values will be used. The Common Language Specification (CLS) allows compilers to ignore default parameter values, and thus require the caller to explicitly specify the values. The concept of optional argument exists only in VB.Net and C#. In all other languages like C++ or Java, the overloading mechanism is the only way to get the same behavior. Optional parameters prevent muddying the definition of the function contract. Here is a simple example: if there are two optional parameters, when one is defined, is the second one still optional or mandatory?",
"properties":  {
"severity":  "Warning",
"warningLevel":  "1",
"defaultSeverity":  "Warning",
"title":  "Optional parameters should not be used",
"category":  "Design",
"helpLink":  "http://vs.sonarlint.org/rules/index.html#version=1.9.0\u0026ruleId=S2360",
"isEnabledByDefault":  "True",
"isSuppressedInSource":  "False"
}
},
{
"ruleId":  "S2360",
"locations":  [
{
"analysisTarget":  [
{
"uri":  "akka.net\\src\\core\\Akka.TestKit\\ITestKitAssertions.cs",
"region":  {
"startLine":  18,
"startColumn":  89,
"endLine":  18,
"endColumn":  93
}
}
]
}
],
"shortMessage":  "Use the overloading mechanism instead of the optional parameters.",
"fullMessage":  "The overloading mechanism should be used in place of optional parameters for several reasons. Optional parameter values are baked into the method call site code, thus, if a default value has been changed, all referencing assemblies need to be rebuilt, otherwise the original values will be used. The Common Language Specification (CLS) allows compilers to ignore default parameter values, and thus require the caller to explicitly specify the values. The concept of optional argument exists only in VB.Net and C#. In all other languages like C++ or Java, the overloading mechanism is the only way to get the same behavior. Optional parameters prevent muddying the definition of the function contract. Here is a simple example: if there are two optional parameters, when one is defined, is the second one still optional or mandatory?",
"properties":  {
"severity":  "Warning",
"warningLevel":  "1",
"defaultSeverity":  "Warning",
"title":  "Optional parameters should not be used",
"category":  "Design",
"helpLink":  "http://vs.sonarlint.org/rules/index.html#version=1.9.0\u0026ruleId=S2360",
"isEnabledByDefault":  "True",
"isSuppressedInSource":  "False"
}
},
{
"ruleId":  "S2360",
"locations":  [
{
"analysisTarget":  [
{
"uri":  "akka.net\\src\\core\\Akka.TestKit\\TestActorRef.cs",
"region":  {
"startLine":  28,
"startColumn":  87,
"endLine":  28,
"endColumn":  93
}
}
]
}
],
"shortMessage":  "Use the overloading mechanism instead of the optional parameters.",
"fullMessage":  "The overloading mechanism should be used in place of optional parameters for several reasons. Optional parameter values are baked into the method call site code, thus, if a default value has been changed, all referencing assemblies need to be rebuilt, otherwise the original values will be used. The Common Language Specification (CLS) allows compilers to ignore default parameter values, and thus require the caller to explicitly specify the values. The concept of optional argument exists only in VB.Net and C#. In all other languages like C++ or Java, the overloading mechanism is the only way to get the same behavior. Optional parameters prevent muddying the definition of the function contract. Here is a simple example: if there are two optional parameters, when one is defined, is the second one still optional or mandatory?",
"properties":  {
"severity":  "Warning",
"warningLevel":  "1",
"defaultSeverity":  "Warning",
"title":  "Optional parameters should not be used",
"category":  "Design",
"helpLink":  "http://vs.sonarlint.org/rules/index.html#version=1.9.0\u0026ruleId=S2360",
"isEnabledByDefault":  "True",
"isSuppressedInSource":  "False"
}
},
{
"ruleId":  "S2360",
"locations":  [
{
"analysisTarget":  [
{
"uri":  "akka.net\\src\\core\\Akka.TestKit\\TestActorRef.cs",
"region":  {
"startLine":  28,
"startColumn":  107,
"endLine":  28,
"endColumn":  113
}
}
]
}
],
"shortMessage":  "Use the overloading mechanism instead of the optional parameters.",
"fullMessage":  "The overloading mechanism should be used in place of optional parameters for several reasons. Optional parameter values are baked into the method call site code, thus, if a default value has been changed, all referencing assemblies need to be rebuilt, otherwise the original values will be used. The Common Language Specification (CLS) allows compilers to ignore default parameter values, and thus require the caller to explicitly specify the values. The concept of optional argument exists only in VB.Net and C#. In all other languages like C++ or Java, the overloading mechanism is the only way to get the same behavior. Optional parameters prevent muddying the definition of the function contract. Here is a simple example: if there are two optional parameters, when one is defined, is the second one still optional or mandatory?",
"properties":  {
"severity":  "Warning",
"warningLevel":  "1",
"defaultSeverity":  "Warning",
"title":  "Optional parameters should not be used",
"category":  "Design",
"helpLink":  "http://vs.sonarlint.org/rules/index.html#version=1.9.0\u0026ruleId=S2360",
"isEnabledByDefault":  "True",
"isSuppressedInSource":  "False"
}
},
{
"ruleId":  "S2360",
"locations":  [
{
"analysisTarget":  [
{
"uri":  "akka.net\\src\\core\\Akka.TestKit\\TestActorRefBase.cs",
"region":  {
"startLine":  37,
"startColumn":  61,
"endLine":  37,
"endColumn":  67
}
}
]
}
],
"shortMessage":  "Use the overloading mechanism instead of the optional parameters.",
"fullMessage":  "The overloading mechanism should be used in place of optional parameters for several reasons. Optional parameter values are baked into the method call site code, thus, if a default value has been changed, all referencing assemblies need to be rebuilt, otherwise the original values will be used. The Common Language Specification (CLS) allows compilers to ignore default parameter values, and thus require the caller to explicitly specify the values. The concept of optional argument exists only in VB.Net and C#. In all other languages like C++ or Java, the overloading mechanism is the only way to get the same behavior. Optional parameters prevent muddying the definition of the function contract. Here is a simple example: if there are two optional parameters, when one is defined, is the second one still optional or mandatory?",
"properties":  {
"severity":  "Warning",
"warningLevel":  "1",
"defaultSeverity":  "Warning",
"title":  "Optional parameters should not be used",
"category":  "Design",
"helpLink":  "http://vs.sonarlint.org/rules/index.html#version=1.9.0\u0026ruleId=S2360",
"isEnabledByDefault":  "True",
"isSuppressedInSource":  "False"
}
},
{
"ruleId":  "S2360",
"locations":  [
{
"analysisTarget":  [
{
"uri":  "akka.net\\src\\core\\Akka.TestKit\\TestActors\\EchoActor.cs",
"region":  {
"startLine":  19,
"startColumn":  73,
"endLine":  19,
"endColumn":  78
}
}
]
}
],
"shortMessage":  "Use the overloading mechanism instead of the optional parameters.",
"fullMessage":  "The overloading mechanism should be used in place of optional parameters for several reasons. Optional parameter values are baked into the method call site code, thus, if a default value has been changed, all referencing assemblies need to be rebuilt, otherwise the original values will be used. The Common Language Specification (CLS) allows compilers to ignore default parameter values, and thus require the caller to explicitly specify the values. The concept of optional argument exists only in VB.Net and C#. In all other languages like C++ or Java, the overloading mechanism is the only way to get the same behavior. Optional parameters prevent muddying the definition of the function contract. Here is a simple example: if there are two optional parameters, when one is defined, is the second one still optional or mandatory?",
"properties":  {
"severity":  "Warning",
"warningLevel":  "1",
"defaultSeverity":  "Warning",
"title":  "Optional parameters should not be used",
"category":  "Design",
"helpLink":  "http://vs.sonarlint.org/rules/index.html#version=1.9.0\u0026ruleId=S2360",
"isEnabledByDefault":  "True",
"isSuppressedInSource":  "False"
}
},
{
"ruleId":  "S2360",
"locations":  [
{
"analysisTarget":  [
{
"uri":  "akka.net\\src\\core\\Akka.TestKit\\TestActors\\EchoActor.cs",
"region":  {
"startLine":  39,
"startColumn":  83,
"endLine":  39,
"endColumn":  89
}
}
]
}
],
"shortMessage":  "Use the overloading mechanism instead of the optional parameters.",
"fullMessage":  "The overloading mechanism should be used in place of optional parameters for several reasons. Optional parameter values are baked into the method call site code, thus, if a default value has been changed, all referencing assemblies need to be rebuilt, otherwise the original values will be used. The Common Language Specification (CLS) allows compilers to ignore default parameter values, and thus require the caller to explicitly specify the values. The concept of optional argument exists only in VB.Net and C#. In all other languages like C++ or Java, the overloading mechanism is the only way to get the same behavior. Optional parameters prevent muddying the definition of the function contract. Here is a simple example: if there are two optional parameters, when one is defined, is the second one still optional or mandatory?",
"properties":  {
"severity":  "Warning",
"warningLevel":  "1",
"defaultSeverity":  "Warning",
"title":  "Optional parameters should not be used",
"category":  "Design",
"helpLink":  "http://vs.sonarlint.org/rules/index.html#version=1.9.0\u0026ruleId=S2360",
"isEnabledByDefault":  "True",
"isSuppressedInSource":  "False"
}
},
{
"ruleId":  "S2360",
"locations":  [
{
"analysisTarget":  [
{
"uri":  "akka.net\\src\\core\\Akka.TestKit\\TestBarrier.cs",
"region":  {
"startLine":  31,
"startColumn":  83,
"endLine":  31,
"endColumn":  88
}
}
]
}
],
"shortMessage":  "Use the overloading mechanism instead of the optional parameters.",
"fullMessage":  "The overloading mechanism should be used in place of optional parameters for several reasons. Optional parameter values are baked into the method call site code, thus, if a default value has been changed, all referencing assemblies need to be rebuilt, otherwise the original values will be used. The Common Language Specification (CLS) allows compilers to ignore default parameter values, and thus require the caller to explicitly specify the values. The concept of optional argument exists only in VB.Net and C#. In all other languages like C++ or Java, the overloading mechanism is the only way to get the same behavior. Optional parameters prevent muddying the definition of the function contract. Here is a simple example: if there are two optional parameters, when one is defined, is the second one still optional or mandatory?",
"properties":  {
"severity":  "Warning",
"warningLevel":  "1",
"defaultSeverity":  "Warning",
"title":  "Optional parameters should not be used",
"category":  "Design",
"helpLink":  "http://vs.sonarlint.org/rules/index.html#version=1.9.0\u0026ruleId=S2360",
"isEnabledByDefault":  "True",
"isSuppressedInSource":  "False"
}
},
{
"ruleId":  "S2360",
"locations":  [
{
"analysisTarget":  [
{
"uri":  "akka.net\\src\\core\\Akka.TestKit\\TestFSMRef.cs",
"region":  {
"startLine":  22,
"startColumn":  80,
"endLine":  22,
"endColumn":  86
}
}
]
}
],
"shortMessage":  "Use the overloading mechanism instead of the optional parameters.",
"fullMessage":  "The overloading mechanism should be used in place of optional parameters for several reasons. Optional parameter values are baked into the method call site code, thus, if a default value has been changed, all referencing assemblies need to be rebuilt, otherwise the original values will be used. The Common Language Specification (CLS) allows compilers to ignore default parameter values, and thus require the caller to explicitly specify the values. The concept of optional argument exists only in VB.Net and C#. In all other languages like C++ or Java, the overloading mechanism is the only way to get the same behavior. Optional parameters prevent muddying the definition of the function contract. Here is a simple example: if there are two optional parameters, when one is defined, is the second one still optional or mandatory?",
"properties":  {
"severity":  "Warning",
"warningLevel":  "1",
"defaultSeverity":  "Warning",
"title":  "Optional parameters should not be used",
"category":  "Design",
"helpLink":  "http://vs.sonarlint.org/rules/index.html#version=1.9.0\u0026ruleId=S2360",
"isEnabledByDefault":  "True",
"isSuppressedInSource":  "False"
}
},
{
"ruleId":  "S2360",
"locations":  [
{
"analysisTarget":  [
{
"uri":  "akka.net\\src\\core\\Akka.TestKit\\TestFSMRef.cs",
"region":  {
"startLine":  22,
"startColumn":  100,
"endLine":  22,
"endColumn":  106
}
}
]
}
],
"shortMessage":  "Use the overloading mechanism instead of the optional parameters.",
"fullMessage":  "The overloading mechanism should be used in place of optional parameters for several reasons. Optional parameter values are baked into the method call site code, thus, if a default value has been changed, all referencing assemblies need to be rebuilt, otherwise the original values will be used. The Common Language Specification (CLS) allows compilers to ignore default parameter values, and thus require the caller to explicitly specify the values. The concept of optional argument exists only in VB.Net and C#. In all other languages like C++ or Java, the overloading mechanism is the only way to get the same behavior. Optional parameters prevent muddying the definition of the function contract. Here is a simple example: if there are two optional parameters, when one is defined, is the second one still optional or mandatory?",
"properties":  {
"severity":  "Warning",
"warningLevel":  "1",
"defaultSeverity":  "Warning",
"title":  "Optional parameters should not be used",
"category":  "Design",
"helpLink":  "http://vs.sonarlint.org/rules/index.html#version=1.9.0\u0026ruleId=S2360",
"isEnabledByDefault":  "True",
"isSuppressedInSource":  "False"
}
},
{
"ruleId":  "S2360",
"locations":  [
{
"analysisTarget":  [
{
"uri":  "akka.net\\src\\core\\Akka.TestKit\\TestFSMRef.cs",
"region":  {
"startLine":  22,
"startColumn":  129,
"endLine":  22,
"endColumn":  136
}
}
]
}
],
"shortMessage":  "Use the overloading mechanism instead of the optional parameters.",
"fullMessage":  "The overloading mechanism should be used in place of optional parameters for several reasons. Optional parameter values are baked into the method call site code, thus, if a default value has been changed, all referencing assemblies need to be rebuilt, otherwise the original values will be used. The Common Language Specification (CLS) allows compilers to ignore default parameter values, and thus require the caller to explicitly specify the values. The concept of optional argument exists only in VB.Net and C#. In all other languages like C++ or Java, the overloading mechanism is the only way to get the same behavior. Optional parameters prevent muddying the definition of the function contract. Here is a simple example: if there are two optional parameters, when one is defined, is the second one still optional or mandatory?",
"properties":  {
"severity":  "Warning",
"warningLevel":  "1",
"defaultSeverity":  "Warning",
"title":  "Optional parameters should not be used",
"category":  "Design",
"helpLink":  "http://vs.sonarlint.org/rules/index.html#version=1.9.0\u0026ruleId=S2360",
"isEnabledByDefault":  "True",
"isSuppressedInSource":  "False"
}
},
{
"ruleId":  "S2360",
"locations":  [
{
"analysisTarget":  [
{
"uri":  "akka.net\\src\\core\\Akka.TestKit\\TestFSMRef.cs",
"region":  {
"startLine":  40,
"startColumn":  68,
"endLine":  40,
"endColumn":  74
}
}
]
}
],
"shortMessage":  "Use the overloading mechanism instead of the optional parameters.",
"fullMessage":  "The overloading mechanism should be used in place of optional parameters for several reasons. Optional parameter values are baked into the method call site code, thus, if a default value has been changed, all referencing assemblies need to be rebuilt, otherwise the original values will be used. The Common Language Specification (CLS) allows compilers to ignore default parameter values, and thus require the caller to explicitly specify the values. The concept of optional argument exists only in VB.Net and C#. In all other languages like C++ or Java, the overloading mechanism is the only way to get the same behavior. Optional parameters prevent muddying the definition of the function contract. Here is a simple example: if there are two optional parameters, when one is defined, is the second one still optional or mandatory?",
"properties":  {
"severity":  "Warning",
"warningLevel":  "1",
"defaultSeverity":  "Warning",
"title":  "Optional parameters should not be used",
"category":  "Design",
"helpLink":  "http://vs.sonarlint.org/rules/index.html#version=1.9.0\u0026ruleId=S2360",
"isEnabledByDefault":  "True",
"isSuppressedInSource":  "False"
}
},
{
"ruleId":  "S2360",
"locations":  [
{
"analysisTarget":  [
{
"uri":  "akka.net\\src\\core\\Akka.TestKit\\TestFSMRef.cs",
"region":  {
"startLine":  60,
"startColumn":  65,
"endLine":  60,
"endColumn":  71
}
}
]
}
],
"shortMessage":  "Use the overloading mechanism instead of the optional parameters.",
"fullMessage":  "The overloading mechanism should be used in place of optional parameters for several reasons. Optional parameter values are baked into the method call site code, thus, if a default value has been changed, all referencing assemblies need to be rebuilt, otherwise the original values will be used. The Common Language Specification (CLS) allows compilers to ignore default parameter values, and thus require the caller to explicitly specify the values. The concept of optional argument exists only in VB.Net and C#. In all other languages like C++ or Java, the overloading mechanism is the only way to get the same behavior. Optional parameters prevent muddying the definition of the function contract. Here is a simple example: if there are two optional parameters, when one is defined, is the second one still optional or mandatory?",
"properties":  {
"severity":  "Warning",
"warningLevel":  "1",
"defaultSeverity":  "Warning",
"title":  "Optional parameters should not be used",
"category":  "Design",
"helpLink":  "http://vs.sonarlint.org/rules/index.html#version=1.9.0\u0026ruleId=S2360",
"isEnabledByDefault":  "True",
"isSuppressedInSource":  "False"
}
},
{
"ruleId":  "S2360",
"locations":  [
{
"analysisTarget":  [
{
"uri":  "akka.net\\src\\core\\Akka.TestKit\\TestFSMRef.cs",
"region":  {
"startLine":  70,
"startColumn":  82,
"endLine":  70,
"endColumn":  88
}
}
]
}
],
"shortMessage":  "Use the overloading mechanism instead of the optional parameters.",
"fullMessage":  "The overloading mechanism should be used in place of optional parameters for several reasons. Optional parameter values are baked into the method call site code, thus, if a default value has been changed, all referencing assemblies need to be rebuilt, otherwise the original values will be used. The Common Language Specification (CLS) allows compilers to ignore default parameter values, and thus require the caller to explicitly specify the values. The concept of optional argument exists only in VB.Net and C#. In all other languages like C++ or Java, the overloading mechanism is the only way to get the same behavior. Optional parameters prevent muddying the definition of the function contract. Here is a simple example: if there are two optional parameters, when one is defined, is the second one still optional or mandatory?",
"properties":  {
"severity":  "Warning",
"warningLevel":  "1",
"defaultSeverity":  "Warning",
"title":  "Optional parameters should not be used",
"category":  "Design",
"helpLink":  "http://vs.sonarlint.org/rules/index.html#version=1.9.0\u0026ruleId=S2360",
"isEnabledByDefault":  "True",
"isSuppressedInSource":  "False"
}
},
{
"ruleId":  "S2360",
"locations":  [
{
"analysisTarget":  [
{
"uri":  "akka.net\\src\\core\\Akka.TestKit\\TestFSMRef.cs",
"region":  {
"startLine":  70,
"startColumn":  116,
"endLine":  70,
"endColumn":  122
}
}
]
}
],
"shortMessage":  "Use the overloading mechanism instead of the optional parameters.",
"fullMessage":  "The overloading mechanism should be used in place of optional parameters for several reasons. Optional parameter values are baked into the method call site code, thus, if a default value has been changed, all referencing assemblies need to be rebuilt, otherwise the original values will be used. The Common Language Specification (CLS) allows compilers to ignore default parameter values, and thus require the caller to explicitly specify the values. The concept of optional argument exists only in VB.Net and C#. In all other languages like C++ or Java, the overloading mechanism is the only way to get the same behavior. Optional parameters prevent muddying the definition of the function contract. Here is a simple example: if there are two optional parameters, when one is defined, is the second one still optional or mandatory?",
"properties":  {
"severity":  "Warning",
"warningLevel":  "1",
"defaultSeverity":  "Warning",
"title":  "Optional parameters should not be used",
"category":  "Design",
"helpLink":  "http://vs.sonarlint.org/rules/index.html#version=1.9.0\u0026ruleId=S2360",
"isEnabledByDefault":  "True",
"isSuppressedInSource":  "False"
}
},
{
"ruleId":  "S2360",
"locations":  [
{
"analysisTarget":  [
{
"uri":  "akka.net\\src\\core\\Akka.TestKit\\TestFSMRef.cs",
"region":  {
"startLine":  79,
"startColumn":  84,
"endLine":  79,
"endColumn":  91
}
}
]
}
],
"shortMessage":  "Use the overloading mechanism instead of the optional parameters.",
"fullMessage":  "The overloading mechanism should be used in place of optional parameters for several reasons. Optional parameter values are baked into the method call site code, thus, if a default value has been changed, all referencing assemblies need to be rebuilt, otherwise the original values will be used. The Common Language Specification (CLS) allows compilers to ignore default parameter values, and thus require the caller to explicitly specify the values. The concept of optional argument exists only in VB.Net and C#. In all other languages like C++ or Java, the overloading mechanism is the only way to get the same behavior. Optional parameters prevent muddying the definition of the function contract. Here is a simple example: if there are two optional parameters, when one is defined, is the second one still optional or mandatory?",
"properties":  {
"severity":  "Warning",
"warningLevel":  "1",
"defaultSeverity":  "Warning",
"title":  "Optional parameters should not be used",
"category":  "Design",
"helpLink":  "http://vs.sonarlint.org/rules/index.html#version=1.9.0\u0026ruleId=S2360",
"isEnabledByDefault":  "True",
"isSuppressedInSource":  "False"
}
},
{
"ruleId":  "S2360",
"locations":  [
{
"analysisTarget":  [
{
"uri":  "akka.net\\src\\core\\Akka.TestKit\\TestKitBase.cs",
"region":  {
"startLine":  327,
"startColumn":  56,
"endLine":  327,
"endColumn":  62
}
}
]
}
],
"shortMessage":  "Use the overloading mechanism instead of the optional parameters.",
"fullMessage":  "The overloading mechanism should be used in place of optional parameters for several reasons. Optional parameter values are baked into the method call site code, thus, if a default value has been changed, all referencing assemblies need to be rebuilt, otherwise the original values will be used. The Common Language Specification (CLS) allows compilers to ignore default parameter values, and thus require the caller to explicitly specify the values. The concept of optional argument exists only in VB.Net and C#. In all other languages like C++ or Java, the overloading mechanism is the only way to get the same behavior. Optional parameters prevent muddying the definition of the function contract. Here is a simple example: if there are two optional parameters, when one is defined, is the second one still optional or mandatory?",
"properties":  {
"severity":  "Warning",
"warningLevel":  "1",
"defaultSeverity":  "Warning",
"title":  "Optional parameters should not be used",
"category":  "Design",
"helpLink":  "http://vs.sonarlint.org/rules/index.html#version=1.9.0\u0026ruleId=S2360",
"isEnabledByDefault":  "True",
"isSuppressedInSource":  "False"
}
},
{
"ruleId":  "S2360",
"locations":  [
{
"analysisTarget":  [
{
"uri":  "akka.net\\src\\core\\Akka.TestKit\\TestKitBase.cs",
"region":  {
"startLine":  327,
"startColumn":  90,
"endLine":  327,
"endColumn":  97
}
}
]
}
],
"shortMessage":  "Use the overloading mechanism instead of the optional parameters.",
"fullMessage":  "The overloading mechanism should be used in place of optional parameters for several reasons. Optional parameter values are baked into the method call site code, thus, if a default value has been changed, all referencing assemblies need to be rebuilt, otherwise the original values will be used. The Common Language Specification (CLS) allows compilers to ignore default parameter values, and thus require the caller to explicitly specify the values. The concept of optional argument exists only in VB.Net and C#. In all other languages like C++ or Java, the overloading mechanism is the only way to get the same behavior. Optional parameters prevent muddying the definition of the function contract. Here is a simple example: if there are two optional parameters, when one is defined, is the second one still optional or mandatory?",
"properties":  {
"severity":  "Warning",
"warningLevel":  "1",
"defaultSeverity":  "Warning",
"title":  "Optional parameters should not be used",
"category":  "Design",
"helpLink":  "http://vs.sonarlint.org/rules/index.html#version=1.9.0\u0026ruleId=S2360",
"isEnabledByDefault":  "True",
"isSuppressedInSource":  "False"
}
},
{
"ruleId":  "S2360",
"locations":  [
{
"analysisTarget":  [
{
"uri":  "akka.net\\src\\core\\Akka.TestKit\\TestKitBase.cs",
"region":  {
"startLine":  386,
"startColumn":  60,
"endLine":  386,
"endColumn":  65
}
}
]
}
],
"shortMessage":  "Use the overloading mechanism instead of the optional parameters.",
"fullMessage":  "The overloading mechanism should be used in place of optional parameters for several reasons. Optional parameter values are baked into the method call site code, thus, if a default value has been changed, all referencing assemblies need to be rebuilt, otherwise the original values will be used. The Common Language Specification (CLS) allows compilers to ignore default parameter values, and thus require the caller to explicitly specify the values. The concept of optional argument exists only in VB.Net and C#. In all other languages like C++ or Java, the overloading mechanism is the only way to get the same behavior. Optional parameters prevent muddying the definition of the function contract. Here is a simple example: if there are two optional parameters, when one is defined, is the second one still optional or mandatory?",
"properties":  {
"severity":  "Warning",
"warningLevel":  "1",
"defaultSeverity":  "Warning",
"title":  "Optional parameters should not be used",
"category":  "Design",
"helpLink":  "http://vs.sonarlint.org/rules/index.html#version=1.9.0\u0026ruleId=S2360",
"isEnabledByDefault":  "True",
"isSuppressedInSource":  "False"
}
},
{
"ruleId":  "S2360",
"locations":  [
{
"analysisTarget":  [
{
"uri":  "akka.net\\src\\core\\Akka.TestKit\\TestKitBase.cs",
"region":  {
"startLine":  397,
"startColumn":  81,
"endLine":  397,
"endColumn":  87
}
}
]
}
],
"shortMessage":  "Use the overloading mechanism instead of the optional parameters.",
"fullMessage":  "The overloading mechanism should be used in place of optional parameters for several reasons. Optional parameter values are baked into the method call site code, thus, if a default value has been changed, all referencing assemblies need to be rebuilt, otherwise the original values will be used. The Common Language Specification (CLS) allows compilers to ignore default parameter values, and thus require the caller to explicitly specify the values. The concept of optional argument exists only in VB.Net and C#. In all other languages like C++ or Java, the overloading mechanism is the only way to get the same behavior. Optional parameters prevent muddying the definition of the function contract. Here is a simple example: if there are two optional parameters, when one is defined, is the second one still optional or mandatory?",
"properties":  {
"severity":  "Warning",
"warningLevel":  "1",
"defaultSeverity":  "Warning",
"title":  "Optional parameters should not be used",
"category":  "Design",
"helpLink":  "http://vs.sonarlint.org/rules/index.html#version=1.9.0\u0026ruleId=S2360",
"isEnabledByDefault":  "True",
"isSuppressedInSource":  "False"
}
},
{
"ruleId":  "S2360",
"locations":  [
{
"analysisTarget":  [
{
"uri":  "akka.net\\src\\core\\Akka.TestKit\\TestKitBase.cs",
"region":  {
"startLine":  411,
"startColumn":  58,
"endLine":  411,
"endColumn":  60
}
}
]
}
],
"shortMessage":  "Use the overloading mechanism instead of the optional parameters.",
"fullMessage":  "The overloading mechanism should be used in place of optional parameters for several reasons. Optional parameter values are baked into the method call site code, thus, if a default value has been changed, all referencing assemblies need to be rebuilt, otherwise the original values will be used. The Common Language Specification (CLS) allows compilers to ignore default parameter values, and thus require the caller to explicitly specify the values. The concept of optional argument exists only in VB.Net and C#. In all other languages like C++ or Java, the overloading mechanism is the only way to get the same behavior. Optional parameters prevent muddying the definition of the function contract. Here is a simple example: if there are two optional parameters, when one is defined, is the second one still optional or mandatory?",
"properties":  {
"severity":  "Warning",
"warningLevel":  "1",
"defaultSeverity":  "Warning",
"title":  "Optional parameters should not be used",
"category":  "Design",
"helpLink":  "http://vs.sonarlint.org/rules/index.html#version=1.9.0\u0026ruleId=S2360",
"isEnabledByDefault":  "True",
"isSuppressedInSource":  "False"
}
},
{
"ruleId":  "S2360",
"locations":  [
{
"analysisTarget":  [
{
"uri":  "akka.net\\src\\core\\Akka.TestKit\\TestKitBase_ActorOf.cs",
"region":  {
"startLine":  98,
"startColumn":  89,
"endLine":  98,
"endColumn":  95
}
}
]
}
],
"shortMessage":  "Use the overloading mechanism instead of the optional parameters.",
"fullMessage":  "The overloading mechanism should be used in place of optional parameters for several reasons. Optional parameter values are baked into the method call site code, thus, if a default value has been changed, all referencing assemblies need to be rebuilt, otherwise the original values will be used. The Common Language Specification (CLS) allows compilers to ignore default parameter values, and thus require the caller to explicitly specify the values. The concept of optional argument exists only in VB.Net and C#. In all other languages like C++ or Java, the overloading mechanism is the only way to get the same behavior. Optional parameters prevent muddying the definition of the function contract. Here is a simple example: if there are two optional parameters, when one is defined, is the second one still optional or mandatory?",
"properties":  {
"severity":  "Warning",
"warningLevel":  "1",
"defaultSeverity":  "Warning",
"title":  "Optional parameters should not be used",
"category":  "Design",
"helpLink":  "http://vs.sonarlint.org/rules/index.html#version=1.9.0\u0026ruleId=S2360",
"isEnabledByDefault":  "True",
"isSuppressedInSource":  "False"
}
},
{
"ruleId":  "S2360",
"locations":  [
{
"analysisTarget":  [
{
"uri":  "akka.net\\src\\core\\Akka.TestKit\\TestKitBase_ActorOf.cs",
"region":  {
"startLine":  116,
"startColumn":  74,
"endLine":  116,
"endColumn":  80
}
}
]
}
],
"shortMessage":  "Use the overloading mechanism instead of the optional parameters.",
"fullMessage":  "The overloading mechanism should be used in place of optional parameters for several reasons. Optional parameter values are baked into the method call site code, thus, if a default value has been changed, all referencing assemblies need to be rebuilt, otherwise the original values will be used. The Common Language Specification (CLS) allows compilers to ignore default parameter values, and thus require the caller to explicitly specify the values. The concept of optional argument exists only in VB.Net and C#. In all other languages like C++ or Java, the overloading mechanism is the only way to get the same behavior. Optional parameters prevent muddying the definition of the function contract. Here is a simple example: if there are two optional parameters, when one is defined, is the second one still optional or mandatory?",
"properties":  {
"severity":  "Warning",
"warningLevel":  "1",
"defaultSeverity":  "Warning",
"title":  "Optional parameters should not be used",
"category":  "Design",
"helpLink":  "http://vs.sonarlint.org/rules/index.html#version=1.9.0\u0026ruleId=S2360",
"isEnabledByDefault":  "True",
"isSuppressedInSource":  "False"
}
},
{
"ruleId":  "S2360",
"locations":  [
{
"analysisTarget":  [
{
"uri":  "akka.net\\src\\core\\Akka.TestKit\\TestKitBase_ActorOf.cs",
"region":  {
"startLine":  141,
"startColumn":  113,
"endLine":  141,
"endColumn":  119
}
}
]
}
],
"shortMessage":  "Use the overloading mechanism instead of the optional parameters.",
"fullMessage":  "The overloading mechanism should be used in place of optional parameters for several reasons. Optional parameter values are baked into the method call site code, thus, if a default value has been changed, all referencing assemblies need to be rebuilt, otherwise the original values will be used. The Common Language Specification (CLS) allows compilers to ignore default parameter values, and thus require the caller to explicitly specify the values. The concept of optional argument exists only in VB.Net and C#. In all other languages like C++ or Java, the overloading mechanism is the only way to get the same behavior. Optional parameters prevent muddying the definition of the function contract. Here is a simple example: if there are two optional parameters, when one is defined, is the second one still optional or mandatory?",
"properties":  {
"severity":  "Warning",
"warningLevel":  "1",
"defaultSeverity":  "Warning",
"title":  "Optional parameters should not be used",
"category":  "Design",
"helpLink":  "http://vs.sonarlint.org/rules/index.html#version=1.9.0\u0026ruleId=S2360",
"isEnabledByDefault":  "True",
"isSuppressedInSource":  "False"
}
},
{
"ruleId":  "S2360",
"locations":  [
{
"analysisTarget":  [
{
"uri":  "akka.net\\src\\core\\Akka.TestKit\\TestKitBase_ActorOf.cs",
"region":  {
"startLine":  153,
"startColumn":  91,
"endLine":  153,
"endColumn":  97
}
}
]
}
],
"shortMessage":  "Use the overloading mechanism instead of the optional parameters.",
"fullMessage":  "The overloading mechanism should be used in place of optional parameters for several reasons. Optional parameter values are baked into the method call site code, thus, if a default value has been changed, all referencing assemblies need to be rebuilt, otherwise the original values will be used. The Common Language Specification (CLS) allows compilers to ignore default parameter values, and thus require the caller to explicitly specify the values. The concept of optional argument exists only in VB.Net and C#. In all other languages like C++ or Java, the overloading mechanism is the only way to get the same behavior. Optional parameters prevent muddying the definition of the function contract. Here is a simple example: if there are two optional parameters, when one is defined, is the second one still optional or mandatory?",
"properties":  {
"severity":  "Warning",
"warningLevel":  "1",
"defaultSeverity":  "Warning",
"title":  "Optional parameters should not be used",
"category":  "Design",
"helpLink":  "http://vs.sonarlint.org/rules/index.html#version=1.9.0\u0026ruleId=S2360",
"isEnabledByDefault":  "True",
"isSuppressedInSource":  "False"
}
},
{
"ruleId":  "S2360",
"locations":  [
{
"analysisTarget":  [
{
"uri":  "akka.net\\src\\core\\Akka.TestKit\\TestKitBase_ActorOf.cs",
"region":  {
"startLine":  170,
"startColumn":  134,
"endLine":  170,
"endColumn":  140
}
}
]
}
],
"shortMessage":  "Use the overloading mechanism instead of the optional parameters.",
"fullMessage":  "The overloading mechanism should be used in place of optional parameters for several reasons. Optional parameter values are baked into the method call site code, thus, if a default value has been changed, all referencing assemblies need to be rebuilt, otherwise the original values will be used. The Common Language Specification (CLS) allows compilers to ignore default parameter values, and thus require the caller to explicitly specify the values. The concept of optional argument exists only in VB.Net and C#. In all other languages like C++ or Java, the overloading mechanism is the only way to get the same behavior. Optional parameters prevent muddying the definition of the function contract. Here is a simple example: if there are two optional parameters, when one is defined, is the second one still optional or mandatory?",
"properties":  {
"severity":  "Warning",
"warningLevel":  "1",
"defaultSeverity":  "Warning",
"title":  "Optional parameters should not be used",
"category":  "Design",
"helpLink":  "http://vs.sonarlint.org/rules/index.html#version=1.9.0\u0026ruleId=S2360",
"isEnabledByDefault":  "True",
"isSuppressedInSource":  "False"
}
},
{
"ruleId":  "S2360",
"locations":  [
{
"analysisTarget":  [
{
"uri":  "akka.net\\src\\core\\Akka.TestKit\\TestKitBase_ActorOf.cs",
"region":  {
"startLine":  186,
"startColumn":  112,
"endLine":  186,
"endColumn":  118
}
}
]
}
],
"shortMessage":  "Use the overloading mechanism instead of the optional parameters.",
"fullMessage":  "The overloading mechanism should be used in place of optional parameters for several reasons. Optional parameter values are baked into the method call site code, thus, if a default value has been changed, all referencing assemblies need to be rebuilt, otherwise the original values will be used. The Common Language Specification (CLS) allows compilers to ignore default parameter values, and thus require the caller to explicitly specify the values. The concept of optional argument exists only in VB.Net and C#. In all other languages like C++ or Java, the overloading mechanism is the only way to get the same behavior. Optional parameters prevent muddying the definition of the function contract. Here is a simple example: if there are two optional parameters, when one is defined, is the second one still optional or mandatory?",
"properties":  {
"severity":  "Warning",
"warningLevel":  "1",
"defaultSeverity":  "Warning",
"title":  "Optional parameters should not be used",
"category":  "Design",
"helpLink":  "http://vs.sonarlint.org/rules/index.html#version=1.9.0\u0026ruleId=S2360",
"isEnabledByDefault":  "True",
"isSuppressedInSource":  "False"
}
},
{
"ruleId":  "S2360",
"locations":  [
{
"analysisTarget":  [
{
"uri":  "akka.net\\src\\core\\Akka.TestKit\\TestKitBase_ActorOf.cs",
"region":  {
"startLine":  198,
"startColumn":  100,
"endLine":  198,
"endColumn":  106
}
}
]
}
],
"shortMessage":  "Use the overloading mechanism instead of the optional parameters.",
"fullMessage":  "The overloading mechanism should be used in place of optional parameters for several reasons. Optional parameter values are baked into the method call site code, thus, if a default value has been changed, all referencing assemblies need to be rebuilt, otherwise the original values will be used. The Common Language Specification (CLS) allows compilers to ignore default parameter values, and thus require the caller to explicitly specify the values. The concept of optional argument exists only in VB.Net and C#. In all other languages like C++ or Java, the overloading mechanism is the only way to get the same behavior. Optional parameters prevent muddying the definition of the function contract. Here is a simple example: if there are two optional parameters, when one is defined, is the second one still optional or mandatory?",
"properties":  {
"severity":  "Warning",
"warningLevel":  "1",
"defaultSeverity":  "Warning",
"title":  "Optional parameters should not be used",
"category":  "Design",
"helpLink":  "http://vs.sonarlint.org/rules/index.html#version=1.9.0\u0026ruleId=S2360",
"isEnabledByDefault":  "True",
"isSuppressedInSource":  "False"
}
},
{
"ruleId":  "S2360",
"locations":  [
{
"analysisTarget":  [
{
"uri":  "akka.net\\src\\core\\Akka.TestKit\\TestKitBase_ActorOf.cs",
"region":  {
"startLine":  209,
"startColumn":  78,
"endLine":  209,
"endColumn":  84
}
}
]
}
],
"shortMessage":  "Use the overloading mechanism instead of the optional parameters.",
"fullMessage":  "The overloading mechanism should be used in place of optional parameters for several reasons. Optional parameter values are baked into the method call site code, thus, if a default value has been changed, all referencing assemblies need to be rebuilt, otherwise the original values will be used. The Common Language Specification (CLS) allows compilers to ignore default parameter values, and thus require the caller to explicitly specify the values. The concept of optional argument exists only in VB.Net and C#. In all other languages like C++ or Java, the overloading mechanism is the only way to get the same behavior. Optional parameters prevent muddying the definition of the function contract. Here is a simple example: if there are two optional parameters, when one is defined, is the second one still optional or mandatory?",
"properties":  {
"severity":  "Warning",
"warningLevel":  "1",
"defaultSeverity":  "Warning",
"title":  "Optional parameters should not be used",
"category":  "Design",
"helpLink":  "http://vs.sonarlint.org/rules/index.html#version=1.9.0\u0026ruleId=S2360",
"isEnabledByDefault":  "True",
"isSuppressedInSource":  "False"
}
},
{
"ruleId":  "S2360",
"locations":  [
{
"analysisTarget":  [
{
"uri":  "akka.net\\src\\core\\Akka.TestKit\\TestKitBase_ActorOf.cs",
"region":  {
"startLine":  230,
"startColumn":  145,
"endLine":  230,
"endColumn":  151
}
}
]
}
],
"shortMessage":  "Use the overloading mechanism instead of the optional parameters.",
"fullMessage":  "The overloading mechanism should be used in place of optional parameters for several reasons. Optional parameter values are baked into the method call site code, thus, if a default value has been changed, all referencing assemblies need to be rebuilt, otherwise the original values will be used. The Common Language Specification (CLS) allows compilers to ignore default parameter values, and thus require the caller to explicitly specify the values. The concept of optional argument exists only in VB.Net and C#. In all other languages like C++ or Java, the overloading mechanism is the only way to get the same behavior. Optional parameters prevent muddying the definition of the function contract. Here is a simple example: if there are two optional parameters, when one is defined, is the second one still optional or mandatory?",
"properties":  {
"severity":  "Warning",
"warningLevel":  "1",
"defaultSeverity":  "Warning",
"title":  "Optional parameters should not be used",
"category":  "Design",
"helpLink":  "http://vs.sonarlint.org/rules/index.html#version=1.9.0\u0026ruleId=S2360",
"isEnabledByDefault":  "True",
"isSuppressedInSource":  "False"
}
},
{
"ruleId":  "S2360",
"locations":  [
{
"analysisTarget":  [
{
"uri":  "akka.net\\src\\core\\Akka.TestKit\\TestKitBase_ActorOf.cs",
"region":  {
"startLine":  230,
"startColumn":  170,
"endLine":  230,
"endColumn":  177
}
}
]
}
],
"shortMessage":  "Use the overloading mechanism instead of the optional parameters.",
"fullMessage":  "The overloading mechanism should be used in place of optional parameters for several reasons. Optional parameter values are baked into the method call site code, thus, if a default value has been changed, all referencing assemblies need to be rebuilt, otherwise the original values will be used. The Common Language Specification (CLS) allows compilers to ignore default parameter values, and thus require the caller to explicitly specify the values. The concept of optional argument exists only in VB.Net and C#. In all other languages like C++ or Java, the overloading mechanism is the only way to get the same behavior. Optional parameters prevent muddying the definition of the function contract. Here is a simple example: if there are two optional parameters, when one is defined, is the second one still optional or mandatory?",
"properties":  {
"severity":  "Warning",
"warningLevel":  "1",
"defaultSeverity":  "Warning",
"title":  "Optional parameters should not be used",
"category":  "Design",
"helpLink":  "http://vs.sonarlint.org/rules/index.html#version=1.9.0\u0026ruleId=S2360",
"isEnabledByDefault":  "True",
"isSuppressedInSource":  "False"
}
},
{
"ruleId":  "S2360",
"locations":  [
{
"analysisTarget":  [
{
"uri":  "akka.net\\src\\core\\Akka.TestKit\\TestKitBase_ActorOf.cs",
"region":  {
"startLine":  246,
"startColumn":  123,
"endLine":  246,
"endColumn":  129
}
}
]
}
],
"shortMessage":  "Use the overloading mechanism instead of the optional parameters.",
"fullMessage":  "The overloading mechanism should be used in place of optional parameters for several reasons. Optional parameter values are baked into the method call site code, thus, if a default value has been changed, all referencing assemblies need to be rebuilt, otherwise the original values will be used. The Common Language Specification (CLS) allows compilers to ignore default parameter values, and thus require the caller to explicitly specify the values. The concept of optional argument exists only in VB.Net and C#. In all other languages like C++ or Java, the overloading mechanism is the only way to get the same behavior. Optional parameters prevent muddying the definition of the function contract. Here is a simple example: if there are two optional parameters, when one is defined, is the second one still optional or mandatory?",
"properties":  {
"severity":  "Warning",
"warningLevel":  "1",
"defaultSeverity":  "Warning",
"title":  "Optional parameters should not be used",
"category":  "Design",
"helpLink":  "http://vs.sonarlint.org/rules/index.html#version=1.9.0\u0026ruleId=S2360",
"isEnabledByDefault":  "True",
"isSuppressedInSource":  "False"
}
},
{
"ruleId":  "S2360",
"locations":  [
{
"analysisTarget":  [
{
"uri":  "akka.net\\src\\core\\Akka.TestKit\\TestKitBase_ActorOf.cs",
"region":  {
"startLine":  246,
"startColumn":  148,
"endLine":  246,
"endColumn":  155
}
}
]
}
],
"shortMessage":  "Use the overloading mechanism instead of the optional parameters.",
"fullMessage":  "The overloading mechanism should be used in place of optional parameters for several reasons. Optional parameter values are baked into the method call site code, thus, if a default value has been changed, all referencing assemblies need to be rebuilt, otherwise the original values will be used. The Common Language Specification (CLS) allows compilers to ignore default parameter values, and thus require the caller to explicitly specify the values. The concept of optional argument exists only in VB.Net and C#. In all other languages like C++ or Java, the overloading mechanism is the only way to get the same behavior. Optional parameters prevent muddying the definition of the function contract. Here is a simple example: if there are two optional parameters, when one is defined, is the second one still optional or mandatory?",
"properties":  {
"severity":  "Warning",
"warningLevel":  "1",
"defaultSeverity":  "Warning",
"title":  "Optional parameters should not be used",
"category":  "Design",
"helpLink":  "http://vs.sonarlint.org/rules/index.html#version=1.9.0\u0026ruleId=S2360",
"isEnabledByDefault":  "True",
"isSuppressedInSource":  "False"
}
},
{
"ruleId":  "S2360",
"locations":  [
{
"analysisTarget":  [
{
"uri":  "akka.net\\src\\core\\Akka.TestKit\\TestKitBase_ActorOf.cs",
"region":  {
"startLine":  264,
"startColumn":  132,
"endLine":  264,
"endColumn":  138
}
}
]
}
],
"shortMessage":  "Use the overloading mechanism instead of the optional parameters.",
"fullMessage":  "The overloading mechanism should be used in place of optional parameters for several reasons. Optional parameter values are baked into the method call site code, thus, if a default value has been changed, all referencing assemblies need to be rebuilt, otherwise the original values will be used. The Common Language Specification (CLS) allows compilers to ignore default parameter values, and thus require the caller to explicitly specify the values. The concept of optional argument exists only in VB.Net and C#. In all other languages like C++ or Java, the overloading mechanism is the only way to get the same behavior. Optional parameters prevent muddying the definition of the function contract. Here is a simple example: if there are two optional parameters, when one is defined, is the second one still optional or mandatory?",
"properties":  {
"severity":  "Warning",
"warningLevel":  "1",
"defaultSeverity":  "Warning",
"title":  "Optional parameters should not be used",
"category":  "Design",
"helpLink":  "http://vs.sonarlint.org/rules/index.html#version=1.9.0\u0026ruleId=S2360",
"isEnabledByDefault":  "True",
"isSuppressedInSource":  "False"
}
},
{
"ruleId":  "S2360",
"locations":  [
{
"analysisTarget":  [
{
"uri":  "akka.net\\src\\core\\Akka.TestKit\\TestKitBase_ActorOf.cs",
"region":  {
"startLine":  264,
"startColumn":  157,
"endLine":  264,
"endColumn":  164
}
}
]
}
],
"shortMessage":  "Use the overloading mechanism instead of the optional parameters.",
"fullMessage":  "The overloading mechanism should be used in place of optional parameters for several reasons. Optional parameter values are baked into the method call site code, thus, if a default value has been changed, all referencing assemblies need to be rebuilt, otherwise the original values will be used. The Common Language Specification (CLS) allows compilers to ignore default parameter values, and thus require the caller to explicitly specify the values. The concept of optional argument exists only in VB.Net and C#. In all other languages like C++ or Java, the overloading mechanism is the only way to get the same behavior. Optional parameters prevent muddying the definition of the function contract. Here is a simple example: if there are two optional parameters, when one is defined, is the second one still optional or mandatory?",
"properties":  {
"severity":  "Warning",
"warningLevel":  "1",
"defaultSeverity":  "Warning",
"title":  "Optional parameters should not be used",
"category":  "Design",
"helpLink":  "http://vs.sonarlint.org/rules/index.html#version=1.9.0\u0026ruleId=S2360",
"isEnabledByDefault":  "True",
"isSuppressedInSource":  "False"
}
},
{
"ruleId":  "S2360",
"locations":  [
{
"analysisTarget":  [
{
"uri":  "akka.net\\src\\core\\Akka.TestKit\\TestKitBase_ActorOf.cs",
"region":  {
"startLine":  280,
"startColumn":  110,
"endLine":  280,
"endColumn":  116
}
}
]
}
],
"shortMessage":  "Use the overloading mechanism instead of the optional parameters.",
"fullMessage":  "The overloading mechanism should be used in place of optional parameters for several reasons. Optional parameter values are baked into the method call site code, thus, if a default value has been changed, all referencing assemblies need to be rebuilt, otherwise the original values will be used. The Common Language Specification (CLS) allows compilers to ignore default parameter values, and thus require the caller to explicitly specify the values. The concept of optional argument exists only in VB.Net and C#. In all other languages like C++ or Java, the overloading mechanism is the only way to get the same behavior. Optional parameters prevent muddying the definition of the function contract. Here is a simple example: if there are two optional parameters, when one is defined, is the second one still optional or mandatory?",
"properties":  {
"severity":  "Warning",
"warningLevel":  "1",
"defaultSeverity":  "Warning",
"title":  "Optional parameters should not be used",
"category":  "Design",
"helpLink":  "http://vs.sonarlint.org/rules/index.html#version=1.9.0\u0026ruleId=S2360",
"isEnabledByDefault":  "True",
"isSuppressedInSource":  "False"
}
},
{
"ruleId":  "S2360",
"locations":  [
{
"analysisTarget":  [
{
"uri":  "akka.net\\src\\core\\Akka.TestKit\\TestKitBase_ActorOf.cs",
"region":  {
"startLine":  280,
"startColumn":  135,
"endLine":  280,
"endColumn":  142
}
}
]
}
],
"shortMessage":  "Use the overloading mechanism instead of the optional parameters.",
"fullMessage":  "The overloading mechanism should be used in place of optional parameters for several reasons. Optional parameter values are baked into the method call site code, thus, if a default value has been changed, all referencing assemblies need to be rebuilt, otherwise the original values will be used. The Common Language Specification (CLS) allows compilers to ignore default parameter values, and thus require the caller to explicitly specify the values. The concept of optional argument exists only in VB.Net and C#. In all other languages like C++ or Java, the overloading mechanism is the only way to get the same behavior. Optional parameters prevent muddying the definition of the function contract. Here is a simple example: if there are two optional parameters, when one is defined, is the second one still optional or mandatory?",
"properties":  {
"severity":  "Warning",
"warningLevel":  "1",
"defaultSeverity":  "Warning",
"title":  "Optional parameters should not be used",
"category":  "Design",
"helpLink":  "http://vs.sonarlint.org/rules/index.html#version=1.9.0\u0026ruleId=S2360",
"isEnabledByDefault":  "True",
"isSuppressedInSource":  "False"
}
},
{
"ruleId":  "S2360",
"locations":  [
{
"analysisTarget":  [
{
"uri":  "akka.net\\src\\core\\Akka.TestKit\\TestKitBase_ActorOf.cs",
"region":  {
"startLine":  298,
"startColumn":  169,
"endLine":  298,
"endColumn":  175
}
}
]
}
],
"shortMessage":  "Use the overloading mechanism instead of the optional parameters.",
"fullMessage":  "The overloading mechanism should be used in place of optional parameters for several reasons. Optional parameter values are baked into the method call site code, thus, if a default value has been changed, all referencing assemblies need to be rebuilt, otherwise the original values will be used. The Common Language Specification (CLS) allows compilers to ignore default parameter values, and thus require the caller to explicitly specify the values. The concept of optional argument exists only in VB.Net and C#. In all other languages like C++ or Java, the overloading mechanism is the only way to get the same behavior. Optional parameters prevent muddying the definition of the function contract. Here is a simple example: if there are two optional parameters, when one is defined, is the second one still optional or mandatory?",
"properties":  {
"severity":  "Warning",
"warningLevel":  "1",
"defaultSeverity":  "Warning",
"title":  "Optional parameters should not be used",
"category":  "Design",
"helpLink":  "http://vs.sonarlint.org/rules/index.html#version=1.9.0\u0026ruleId=S2360",
"isEnabledByDefault":  "True",
"isSuppressedInSource":  "False"
}
},
{
"ruleId":  "S2360",
"locations":  [
{
"analysisTarget":  [
{
"uri":  "akka.net\\src\\core\\Akka.TestKit\\TestKitBase_ActorOf.cs",
"region":  {
"startLine":  298,
"startColumn":  194,
"endLine":  298,
"endColumn":  201
}
}
]
}
],
"shortMessage":  "Use the overloading mechanism instead of the optional parameters.",
"fullMessage":  "The overloading mechanism should be used in place of optional parameters for several reasons. Optional parameter values are baked into the method call site code, thus, if a default value has been changed, all referencing assemblies need to be rebuilt, otherwise the original values will be used. The Common Language Specification (CLS) allows compilers to ignore default parameter values, and thus require the caller to explicitly specify the values. The concept of optional argument exists only in VB.Net and C#. In all other languages like C++ or Java, the overloading mechanism is the only way to get the same behavior. Optional parameters prevent muddying the definition of the function contract. Here is a simple example: if there are two optional parameters, when one is defined, is the second one still optional or mandatory?",
"properties":  {
"severity":  "Warning",
"warningLevel":  "1",
"defaultSeverity":  "Warning",
"title":  "Optional parameters should not be used",
"category":  "Design",
"helpLink":  "http://vs.sonarlint.org/rules/index.html#version=1.9.0\u0026ruleId=S2360",
"isEnabledByDefault":  "True",
"isSuppressedInSource":  "False"
}
},
{
"ruleId":  "S2360",
"locations":  [
{
"analysisTarget":  [
{
"uri":  "akka.net\\src\\core\\Akka.TestKit\\TestKitBase_ActorOf.cs",
"region":  {
"startLine":  315,
"startColumn":  147,
"endLine":  315,
"endColumn":  153
}
}
]
}
],
"shortMessage":  "Use the overloading mechanism instead of the optional parameters.",
"fullMessage":  "The overloading mechanism should be used in place of optional parameters for several reasons. Optional parameter values are baked into the method call site code, thus, if a default value has been changed, all referencing assemblies need to be rebuilt, otherwise the original values will be used. The Common Language Specification (CLS) allows compilers to ignore default parameter values, and thus require the caller to explicitly specify the values. The concept of optional argument exists only in VB.Net and C#. In all other languages like C++ or Java, the overloading mechanism is the only way to get the same behavior. Optional parameters prevent muddying the definition of the function contract. Here is a simple example: if there are two optional parameters, when one is defined, is the second one still optional or mandatory?",
"properties":  {
"severity":  "Warning",
"warningLevel":  "1",
"defaultSeverity":  "Warning",
"title":  "Optional parameters should not be used",
"category":  "Design",
"helpLink":  "http://vs.sonarlint.org/rules/index.html#version=1.9.0\u0026ruleId=S2360",
"isEnabledByDefault":  "True",
"isSuppressedInSource":  "False"
}
},
{
"ruleId":  "S2360",
"locations":  [
{
"analysisTarget":  [
{
"uri":  "akka.net\\src\\core\\Akka.TestKit\\TestKitBase_ActorOf.cs",
"region":  {
"startLine":  315,
"startColumn":  172,
"endLine":  315,
"endColumn":  179
}
}
]
}
],
"shortMessage":  "Use the overloading mechanism instead of the optional parameters.",
"fullMessage":  "The overloading mechanism should be used in place of optional parameters for several reasons. Optional parameter values are baked into the method call site code, thus, if a default value has been changed, all referencing assemblies need to be rebuilt, otherwise the original values will be used. The Common Language Specification (CLS) allows compilers to ignore default parameter values, and thus require the caller to explicitly specify the values. The concept of optional argument exists only in VB.Net and C#. In all other languages like C++ or Java, the overloading mechanism is the only way to get the same behavior. Optional parameters prevent muddying the definition of the function contract. Here is a simple example: if there are two optional parameters, when one is defined, is the second one still optional or mandatory?",
"properties":  {
"severity":  "Warning",
"warningLevel":  "1",
"defaultSeverity":  "Warning",
"title":  "Optional parameters should not be used",
"category":  "Design",
"helpLink":  "http://vs.sonarlint.org/rules/index.html#version=1.9.0\u0026ruleId=S2360",
"isEnabledByDefault":  "True",
"isSuppressedInSource":  "False"
}
},
{
"ruleId":  "S2360",
"locations":  [
{
"analysisTarget":  [
{
"uri":  "akka.net\\src\\core\\Akka.TestKit\\TestKitBase_AwaitAssert.cs",
"region":  {
"startLine":  29,
"startColumn":  68,
"endLine":  29,
"endColumn":  73
}
}
]
}
],
"shortMessage":  "Use the overloading mechanism instead of the optional parameters.",
"fullMessage":  "The overloading mechanism should be used in place of optional parameters for several reasons. Optional parameter values are baked into the method call site code, thus, if a default value has been changed, all referencing assemblies need to be rebuilt, otherwise the original values will be used. The Common Language Specification (CLS) allows compilers to ignore default parameter values, and thus require the caller to explicitly specify the values. The concept of optional argument exists only in VB.Net and C#. In all other languages like C++ or Java, the overloading mechanism is the only way to get the same behavior. Optional parameters prevent muddying the definition of the function contract. Here is a simple example: if there are two optional parameters, when one is defined, is the second one still optional or mandatory?",
"properties":  {
"severity":  "Warning",
"warningLevel":  "1",
"defaultSeverity":  "Warning",
"title":  "Optional parameters should not be used",
"category":  "Design",
"helpLink":  "http://vs.sonarlint.org/rules/index.html#version=1.9.0\u0026ruleId=S2360",
"isEnabledByDefault":  "True",
"isSuppressedInSource":  "False"
}
},
{
"ruleId":  "S2360",
"locations":  [
{
"analysisTarget":  [
{
"uri":  "akka.net\\src\\core\\Akka.TestKit\\TestKitBase_AwaitAssert.cs",
"region":  {
"startLine":  29,
"startColumn":  93,
"endLine":  29,
"endColumn":  98
}
}
]
}
],
"shortMessage":  "Use the overloading mechanism instead of the optional parameters.",
"fullMessage":  "The overloading mechanism should be used in place of optional parameters for several reasons. Optional parameter values are baked into the method call site code, thus, if a default value has been changed, all referencing assemblies need to be rebuilt, otherwise the original values will be used. The Common Language Specification (CLS) allows compilers to ignore default parameter values, and thus require the caller to explicitly specify the values. The concept of optional argument exists only in VB.Net and C#. In all other languages like C++ or Java, the overloading mechanism is the only way to get the same behavior. Optional parameters prevent muddying the definition of the function contract. Here is a simple example: if there are two optional parameters, when one is defined, is the second one still optional or mandatory?",
"properties":  {
"severity":  "Warning",
"warningLevel":  "1",
"defaultSeverity":  "Warning",
"title":  "Optional parameters should not be used",
"category":  "Design",
"helpLink":  "http://vs.sonarlint.org/rules/index.html#version=1.9.0\u0026ruleId=S2360",
"isEnabledByDefault":  "True",
"isSuppressedInSource":  "False"
}
},
{
"ruleId":  "S2360",
"locations":  [
{
"analysisTarget":  [
{
"uri":  "akka.net\\src\\core\\Akka.TestKit\\TestKitBase_AwaitConditions.cs",
"region":  {
"startLine":  117,
"startColumn":  118,
"endLine":  117,
"endColumn":  124
}
}
]
}
],
"shortMessage":  "Use the overloading mechanism instead of the optional parameters.",
"fullMessage":  "The overloading mechanism should be used in place of optional parameters for several reasons. Optional parameter values are baked into the method call site code, thus, if a default value has been changed, all referencing assemblies need to be rebuilt, otherwise the original values will be used. The Common Language Specification (CLS) allows compilers to ignore default parameter values, and thus require the caller to explicitly specify the values. The concept of optional argument exists only in VB.Net and C#. In all other languages like C++ or Java, the overloading mechanism is the only way to get the same behavior. Optional parameters prevent muddying the definition of the function contract. Here is a simple example: if there are two optional parameters, when one is defined, is the second one still optional or mandatory?",
"properties":  {
"severity":  "Warning",
"warningLevel":  "1",
"defaultSeverity":  "Warning",
"title":  "Optional parameters should not be used",
"category":  "Design",
"helpLink":  "http://vs.sonarlint.org/rules/index.html#version=1.9.0\u0026ruleId=S2360",
"isEnabledByDefault":  "True",
"isSuppressedInSource":  "False"
}
},
{
"ruleId":  "S2360",
"locations":  [
{
"analysisTarget":  [
{
"uri":  "akka.net\\src\\core\\Akka.TestKit\\TestKitBase_AwaitConditions.cs",
"region":  {
"startLine":  141,
"startColumn":  108,
"endLine":  141,
"endColumn":  114
}
}
]
}
],
"shortMessage":  "Use the overloading mechanism instead of the optional parameters.",
"fullMessage":  "The overloading mechanism should be used in place of optional parameters for several reasons. Optional parameter values are baked into the method call site code, thus, if a default value has been changed, all referencing assemblies need to be rebuilt, otherwise the original values will be used. The Common Language Specification (CLS) allows compilers to ignore default parameter values, and thus require the caller to explicitly specify the values. The concept of optional argument exists only in VB.Net and C#. In all other languages like C++ or Java, the overloading mechanism is the only way to get the same behavior. Optional parameters prevent muddying the definition of the function contract. Here is a simple example: if there are two optional parameters, when one is defined, is the second one still optional or mandatory?",
"properties":  {
"severity":  "Warning",
"warningLevel":  "1",
"defaultSeverity":  "Warning",
"title":  "Optional parameters should not be used",
"category":  "Design",
"helpLink":  "http://vs.sonarlint.org/rules/index.html#version=1.9.0\u0026ruleId=S2360",
"isEnabledByDefault":  "True",
"isSuppressedInSource":  "False"
}
},
{
"ruleId":  "S2360",
"locations":  [
{
"analysisTarget":  [
{
"uri":  "akka.net\\src\\core\\Akka.TestKit\\TestKitBase_Expect.cs",
"region":  {
"startLine":  26,
"startColumn":  49,
"endLine":  26,
"endColumn":  55
}
}
]
}
],
"shortMessage":  "Use the overloading mechanism instead of the optional parameters.",
"fullMessage":  "The overloading mechanism should be used in place of optional parameters for several reasons. Optional parameter values are baked into the method call site code, thus, if a default value has been changed, all referencing assemblies need to be rebuilt, otherwise the original values will be used. The Common Language Specification (CLS) allows compilers to ignore default parameter values, and thus require the caller to explicitly specify the values. The concept of optional argument exists only in VB.Net and C#. In all other languages like C++ or Java, the overloading mechanism is the only way to get the same behavior. Optional parameters prevent muddying the definition of the function contract. Here is a simple example: if there are two optional parameters, when one is defined, is the second one still optional or mandatory?",
"properties":  {
"severity":  "Warning",
"warningLevel":  "1",
"defaultSeverity":  "Warning",
"title":  "Optional parameters should not be used",
"category":  "Design",
"helpLink":  "http://vs.sonarlint.org/rules/index.html#version=1.9.0\u0026ruleId=S2360",
"isEnabledByDefault":  "True",
"isSuppressedInSource":  "False"
}
},
{
"ruleId":  "S2360",
"locations":  [
{
"analysisTarget":  [
{
"uri":  "akka.net\\src\\core\\Akka.TestKit\\TestKitBase_Expect.cs",
"region":  {
"startLine":  26,
"startColumn":  69,
"endLine":  26,
"endColumn":  75
}
}
]
}
],
"shortMessage":  "Use the overloading mechanism instead of the optional parameters.",
"fullMessage":  "The overloading mechanism should be used in place of optional parameters for several reasons. Optional parameter values are baked into the method call site code, thus, if a default value has been changed, all referencing assemblies need to be rebuilt, otherwise the original values will be used. The Common Language Specification (CLS) allows compilers to ignore default parameter values, and thus require the caller to explicitly specify the values. The concept of optional argument exists only in VB.Net and C#. In all other languages like C++ or Java, the overloading mechanism is the only way to get the same behavior. Optional parameters prevent muddying the definition of the function contract. Here is a simple example: if there are two optional parameters, when one is defined, is the second one still optional or mandatory?",
"properties":  {
"severity":  "Warning",
"warningLevel":  "1",
"defaultSeverity":  "Warning",
"title":  "Optional parameters should not be used",
"category":  "Design",
"helpLink":  "http://vs.sonarlint.org/rules/index.html#version=1.9.0\u0026ruleId=S2360",
"isEnabledByDefault":  "True",
"isSuppressedInSource":  "False"
}
},
{
"ruleId":  "S2360",
"locations":  [
{
"analysisTarget":  [
{
"uri":  "akka.net\\src\\core\\Akka.TestKit\\TestKitBase_Expect.cs",
"region":  {
"startLine":  39,
"startColumn":  59,
"endLine":  39,
"endColumn":  65
}
}
]
}
],
"shortMessage":  "Use the overloading mechanism instead of the optional parameters.",
"fullMessage":  "The overloading mechanism should be used in place of optional parameters for several reasons. Optional parameter values are baked into the method call site code, thus, if a default value has been changed, all referencing assemblies need to be rebuilt, otherwise the original values will be used. The Common Language Specification (CLS) allows compilers to ignore default parameter values, and thus require the caller to explicitly specify the values. The concept of optional argument exists only in VB.Net and C#. In all other languages like C++ or Java, the overloading mechanism is the only way to get the same behavior. Optional parameters prevent muddying the definition of the function contract. Here is a simple example: if there are two optional parameters, when one is defined, is the second one still optional or mandatory?",
"properties":  {
"severity":  "Warning",
"warningLevel":  "1",
"defaultSeverity":  "Warning",
"title":  "Optional parameters should not be used",
"category":  "Design",
"helpLink":  "http://vs.sonarlint.org/rules/index.html#version=1.9.0\u0026ruleId=S2360",
"isEnabledByDefault":  "True",
"isSuppressedInSource":  "False"
}
},
{
"ruleId":  "S2360",
"locations":  [
{
"analysisTarget":  [
{
"uri":  "akka.net\\src\\core\\Akka.TestKit\\TestKitBase_Expect.cs",
"region":  {
"startLine":  39,
"startColumn":  79,
"endLine":  39,
"endColumn":  85
}
}
]
}
],
"shortMessage":  "Use the overloading mechanism instead of the optional parameters.",
"fullMessage":  "The overloading mechanism should be used in place of optional parameters for several reasons. Optional parameter values are baked into the method call site code, thus, if a default value has been changed, all referencing assemblies need to be rebuilt, otherwise the original values will be used. The Common Language Specification (CLS) allows compilers to ignore default parameter values, and thus require the caller to explicitly specify the values. The concept of optional argument exists only in VB.Net and C#. In all other languages like C++ or Java, the overloading mechanism is the only way to get the same behavior. Optional parameters prevent muddying the definition of the function contract. Here is a simple example: if there are two optional parameters, when one is defined, is the second one still optional or mandatory?",
"properties":  {
"severity":  "Warning",
"warningLevel":  "1",
"defaultSeverity":  "Warning",
"title":  "Optional parameters should not be used",
"category":  "Design",
"helpLink":  "http://vs.sonarlint.org/rules/index.html#version=1.9.0\u0026ruleId=S2360",
"isEnabledByDefault":  "True",
"isSuppressedInSource":  "False"
}
},
{
"ruleId":  "S2360",
"locations":  [
{
"analysisTarget":  [
{
"uri":  "akka.net\\src\\core\\Akka.TestKit\\TestKitBase_Expect.cs",
"region":  {
"startLine":  54,
"startColumn":  72,
"endLine":  54,
"endColumn":  78
}
}
]
}
],
"shortMessage":  "Use the overloading mechanism instead of the optional parameters.",
"fullMessage":  "The overloading mechanism should be used in place of optional parameters for several reasons. Optional parameter values are baked into the method call site code, thus, if a default value has been changed, all referencing assemblies need to be rebuilt, otherwise the original values will be used. The Common Language Specification (CLS) allows compilers to ignore default parameter values, and thus require the caller to explicitly specify the values. The concept of optional argument exists only in VB.Net and C#. In all other languages like C++ or Java, the overloading mechanism is the only way to get the same behavior. Optional parameters prevent muddying the definition of the function contract. Here is a simple example: if there are two optional parameters, when one is defined, is the second one still optional or mandatory?",
"properties":  {
"severity":  "Warning",
"warningLevel":  "1",
"defaultSeverity":  "Warning",
"title":  "Optional parameters should not be used",
"category":  "Design",
"helpLink":  "http://vs.sonarlint.org/rules/index.html#version=1.9.0\u0026ruleId=S2360",
"isEnabledByDefault":  "True",
"isSuppressedInSource":  "False"
}
},
{
"ruleId":  "S2360",
"locations":  [
{
"analysisTarget":  [
{
"uri":  "akka.net\\src\\core\\Akka.TestKit\\TestKitBase_Expect.cs",
"region":  {
"startLine":  54,
"startColumn":  92,
"endLine":  54,
"endColumn":  98
}
}
]
}
],
"shortMessage":  "Use the overloading mechanism instead of the optional parameters.",
"fullMessage":  "The overloading mechanism should be used in place of optional parameters for several reasons. Optional parameter values are baked into the method call site code, thus, if a default value has been changed, all referencing assemblies need to be rebuilt, otherwise the original values will be used. The Common Language Specification (CLS) allows compilers to ignore default parameter values, and thus require the caller to explicitly specify the values. The concept of optional argument exists only in VB.Net and C#. In all other languages like C++ or Java, the overloading mechanism is the only way to get the same behavior. Optional parameters prevent muddying the definition of the function contract. Here is a simple example: if there are two optional parameters, when one is defined, is the second one still optional or mandatory?",
"properties":  {
"severity":  "Warning",
"warningLevel":  "1",
"defaultSeverity":  "Warning",
"title":  "Optional parameters should not be used",
"category":  "Design",
"helpLink":  "http://vs.sonarlint.org/rules/index.html#version=1.9.0\u0026ruleId=S2360",
"isEnabledByDefault":  "True",
"isSuppressedInSource":  "False"
}
},
{
"ruleId":  "S2360",
"locations":  [
{
"analysisTarget":  [
{
"uri":  "akka.net\\src\\core\\Akka.TestKit\\TestKitBase_Expect.cs",
"region":  {
"startLine":  74,
"startColumn":  66,
"endLine":  74,
"endColumn":  72
}
}
]
}
],
"shortMessage":  "Use the overloading mechanism instead of the optional parameters.",
"fullMessage":  "The overloading mechanism should be used in place of optional parameters for several reasons. Optional parameter values are baked into the method call site code, thus, if a default value has been changed, all referencing assemblies need to be rebuilt, otherwise the original values will be used. The Common Language Specification (CLS) allows compilers to ignore default parameter values, and thus require the caller to explicitly specify the values. The concept of optional argument exists only in VB.Net and C#. In all other languages like C++ or Java, the overloading mechanism is the only way to get the same behavior. Optional parameters prevent muddying the definition of the function contract. Here is a simple example: if there are two optional parameters, when one is defined, is the second one still optional or mandatory?",
"properties":  {
"severity":  "Warning",
"warningLevel":  "1",
"defaultSeverity":  "Warning",
"title":  "Optional parameters should not be used",
"category":  "Design",
"helpLink":  "http://vs.sonarlint.org/rules/index.html#version=1.9.0\u0026ruleId=S2360",
"isEnabledByDefault":  "True",
"isSuppressedInSource":  "False"
}
},
{
"ruleId":  "S2360",
"locations":  [
{
"analysisTarget":  [
{
"uri":  "akka.net\\src\\core\\Akka.TestKit\\TestKitBase_Expect.cs",
"region":  {
"startLine":  74,
"startColumn":  86,
"endLine":  74,
"endColumn":  92
}
}
]
}
],
"shortMessage":  "Use the overloading mechanism instead of the optional parameters.",
"fullMessage":  "The overloading mechanism should be used in place of optional parameters for several reasons. Optional parameter values are baked into the method call site code, thus, if a default value has been changed, all referencing assemblies need to be rebuilt, otherwise the original values will be used. The Common Language Specification (CLS) allows compilers to ignore default parameter values, and thus require the caller to explicitly specify the values. The concept of optional argument exists only in VB.Net and C#. In all other languages like C++ or Java, the overloading mechanism is the only way to get the same behavior. Optional parameters prevent muddying the definition of the function contract. Here is a simple example: if there are two optional parameters, when one is defined, is the second one still optional or mandatory?",
"properties":  {
"severity":  "Warning",
"warningLevel":  "1",
"defaultSeverity":  "Warning",
"title":  "Optional parameters should not be used",
"category":  "Design",
"helpLink":  "http://vs.sonarlint.org/rules/index.html#version=1.9.0\u0026ruleId=S2360",
"isEnabledByDefault":  "True",
"isSuppressedInSource":  "False"
}
},
{
"ruleId":  "S2360",
"locations":  [
{
"analysisTarget":  [
{
"uri":  "akka.net\\src\\core\\Akka.TestKit\\TestKitBase_Expect.cs",
"region":  {
"startLine":  89,
"startColumn":  93,
"endLine":  89,
"endColumn":  99
}
}
]
}
],
"shortMessage":  "Use the overloading mechanism instead of the optional parameters.",
"fullMessage":  "The overloading mechanism should be used in place of optional parameters for several reasons. Optional parameter values are baked into the method call site code, thus, if a default value has been changed, all referencing assemblies need to be rebuilt, otherwise the original values will be used. The Common Language Specification (CLS) allows compilers to ignore default parameter values, and thus require the caller to explicitly specify the values. The concept of optional argument exists only in VB.Net and C#. In all other languages like C++ or Java, the overloading mechanism is the only way to get the same behavior. Optional parameters prevent muddying the definition of the function contract. Here is a simple example: if there are two optional parameters, when one is defined, is the second one still optional or mandatory?",
"properties":  {
"severity":  "Warning",
"warningLevel":  "1",
"defaultSeverity":  "Warning",
"title":  "Optional parameters should not be used",
"category":  "Design",
"helpLink":  "http://vs.sonarlint.org/rules/index.html#version=1.9.0\u0026ruleId=S2360",
"isEnabledByDefault":  "True",
"isSuppressedInSource":  "False"
}
},
{
"ruleId":  "S2360",
"locations":  [
{
"analysisTarget":  [
{
"uri":  "akka.net\\src\\core\\Akka.TestKit\\TestKitBase_Expect.cs",
"region":  {
"startLine":  89,
"startColumn":  113,
"endLine":  89,
"endColumn":  119
}
}
]
}
],
"shortMessage":  "Use the overloading mechanism instead of the optional parameters.",
"fullMessage":  "The overloading mechanism should be used in place of optional parameters for several reasons. Optional parameter values are baked into the method call site code, thus, if a default value has been changed, all referencing assemblies need to be rebuilt, otherwise the original values will be used. The Common Language Specification (CLS) allows compilers to ignore default parameter values, and thus require the caller to explicitly specify the values. The concept of optional argument exists only in VB.Net and C#. In all other languages like C++ or Java, the overloading mechanism is the only way to get the same behavior. Optional parameters prevent muddying the definition of the function contract. Here is a simple example: if there are two optional parameters, when one is defined, is the second one still optional or mandatory?",
"properties":  {
"severity":  "Warning",
"warningLevel":  "1",
"defaultSeverity":  "Warning",
"title":  "Optional parameters should not be used",
"category":  "Design",
"helpLink":  "http://vs.sonarlint.org/rules/index.html#version=1.9.0\u0026ruleId=S2360",
"isEnabledByDefault":  "True",
"isSuppressedInSource":  "False"
}
},
{
"ruleId":  "S2360",
"locations":  [
{
"analysisTarget":  [
{
"uri":  "akka.net\\src\\core\\Akka.TestKit\\TestKitBase_Expect.cs",
"region":  {
"startLine":  107,
"startColumn":  93,
"endLine":  107,
"endColumn":  99
}
}
]
}
],
"shortMessage":  "Use the overloading mechanism instead of the optional parameters.",
"fullMessage":  "The overloading mechanism should be used in place of optional parameters for several reasons. Optional parameter values are baked into the method call site code, thus, if a default value has been changed, all referencing assemblies need to be rebuilt, otherwise the original values will be used. The Common Language Specification (CLS) allows compilers to ignore default parameter values, and thus require the caller to explicitly specify the values. The concept of optional argument exists only in VB.Net and C#. In all other languages like C++ or Java, the overloading mechanism is the only way to get the same behavior. Optional parameters prevent muddying the definition of the function contract. Here is a simple example: if there are two optional parameters, when one is defined, is the second one still optional or mandatory?",
"properties":  {
"severity":  "Warning",
"warningLevel":  "1",
"defaultSeverity":  "Warning",
"title":  "Optional parameters should not be used",
"category":  "Design",
"helpLink":  "http://vs.sonarlint.org/rules/index.html#version=1.9.0\u0026ruleId=S2360",
"isEnabledByDefault":  "True",
"isSuppressedInSource":  "False"
}
},
{
"ruleId":  "S2360",
"locations":  [
{
"analysisTarget":  [
{
"uri":  "akka.net\\src\\core\\Akka.TestKit\\TestKitBase_Expect.cs",
"region":  {
"startLine":  107,
"startColumn":  113,
"endLine":  107,
"endColumn":  119
}
}
]
}
],
"shortMessage":  "Use the overloading mechanism instead of the optional parameters.",
"fullMessage":  "The overloading mechanism should be used in place of optional parameters for several reasons. Optional parameter values are baked into the method call site code, thus, if a default value has been changed, all referencing assemblies need to be rebuilt, otherwise the original values will be used. The Common Language Specification (CLS) allows compilers to ignore default parameter values, and thus require the caller to explicitly specify the values. The concept of optional argument exists only in VB.Net and C#. In all other languages like C++ or Java, the overloading mechanism is the only way to get the same behavior. Optional parameters prevent muddying the definition of the function contract. Here is a simple example: if there are two optional parameters, when one is defined, is the second one still optional or mandatory?",
"properties":  {
"severity":  "Warning",
"warningLevel":  "1",
"defaultSeverity":  "Warning",
"title":  "Optional parameters should not be used",
"category":  "Design",
"helpLink":  "http://vs.sonarlint.org/rules/index.html#version=1.9.0\u0026ruleId=S2360",
"isEnabledByDefault":  "True",
"isSuppressedInSource":  "False"
}
},
{
"ruleId":  "S2360",
"locations":  [
{
"analysisTarget":  [
{
"uri":  "akka.net\\src\\core\\Akka.TestKit\\TestKitBase_Expect.cs",
"region":  {
"startLine":  121,
"startColumn":  87,
"endLine":  121,
"endColumn":  93
}
}
]
}
],
"shortMessage":  "Use the overloading mechanism instead of the optional parameters.",
"fullMessage":  "The overloading mechanism should be used in place of optional parameters for several reasons. Optional parameter values are baked into the method call site code, thus, if a default value has been changed, all referencing assemblies need to be rebuilt, otherwise the original values will be used. The Common Language Specification (CLS) allows compilers to ignore default parameter values, and thus require the caller to explicitly specify the values. The concept of optional argument exists only in VB.Net and C#. In all other languages like C++ or Java, the overloading mechanism is the only way to get the same behavior. Optional parameters prevent muddying the definition of the function contract. Here is a simple example: if there are two optional parameters, when one is defined, is the second one still optional or mandatory?",
"properties":  {
"severity":  "Warning",
"warningLevel":  "1",
"defaultSeverity":  "Warning",
"title":  "Optional parameters should not be used",
"category":  "Design",
"helpLink":  "http://vs.sonarlint.org/rules/index.html#version=1.9.0\u0026ruleId=S2360",
"isEnabledByDefault":  "True",
"isSuppressedInSource":  "False"
}
},
{
"ruleId":  "S2360",
"locations":  [
{
"analysisTarget":  [
{
"uri":  "akka.net\\src\\core\\Akka.TestKit\\TestKitBase_Expect.cs",
"region":  {
"startLine":  121,
"startColumn":  107,
"endLine":  121,
"endColumn":  113
}
}
]
}
],
"shortMessage":  "Use the overloading mechanism instead of the optional parameters.",
"fullMessage":  "The overloading mechanism should be used in place of optional parameters for several reasons. Optional parameter values are baked into the method call site code, thus, if a default value has been changed, all referencing assemblies need to be rebuilt, otherwise the original values will be used. The Common Language Specification (CLS) allows compilers to ignore default parameter values, and thus require the caller to explicitly specify the values. The concept of optional argument exists only in VB.Net and C#. In all other languages like C++ or Java, the overloading mechanism is the only way to get the same behavior. Optional parameters prevent muddying the definition of the function contract. Here is a simple example: if there are two optional parameters, when one is defined, is the second one still optional or mandatory?",
"properties":  {
"severity":  "Warning",
"warningLevel":  "1",
"defaultSeverity":  "Warning",
"title":  "Optional parameters should not be used",
"category":  "Design",
"helpLink":  "http://vs.sonarlint.org/rules/index.html#version=1.9.0\u0026ruleId=S2360",
"isEnabledByDefault":  "True",
"isSuppressedInSource":  "False"
}
},
{
"ruleId":  "S2360",
"locations":  [
{
"analysisTarget":  [
{
"uri":  "akka.net\\src\\core\\Akka.TestKit\\TestKitBase_Expect.cs",
"region":  {
"startLine":  134,
"startColumn":  79,
"endLine":  134,
"endColumn":  85
}
}
]
}
],
"shortMessage":  "Use the overloading mechanism instead of the optional parameters.",
"fullMessage":  "The overloading mechanism should be used in place of optional parameters for several reasons. Optional parameter values are baked into the method call site code, thus, if a default value has been changed, all referencing assemblies need to be rebuilt, otherwise the original values will be used. The Common Language Specification (CLS) allows compilers to ignore default parameter values, and thus require the caller to explicitly specify the values. The concept of optional argument exists only in VB.Net and C#. In all other languages like C++ or Java, the overloading mechanism is the only way to get the same behavior. Optional parameters prevent muddying the definition of the function contract. Here is a simple example: if there are two optional parameters, when one is defined, is the second one still optional or mandatory?",
"properties":  {
"severity":  "Warning",
"warningLevel":  "1",
"defaultSeverity":  "Warning",
"title":  "Optional parameters should not be used",
"category":  "Design",
"helpLink":  "http://vs.sonarlint.org/rules/index.html#version=1.9.0\u0026ruleId=S2360",
"isEnabledByDefault":  "True",
"isSuppressedInSource":  "False"
}
},
{
"ruleId":  "S2360",
"locations":  [
{
"analysisTarget":  [
{
"uri":  "akka.net\\src\\core\\Akka.TestKit\\TestKitBase_Expect.cs",
"region":  {
"startLine":  134,
"startColumn":  99,
"endLine":  134,
"endColumn":  105
}
}
]
}
],
"shortMessage":  "Use the overloading mechanism instead of the optional parameters.",
"fullMessage":  "The overloading mechanism should be used in place of optional parameters for several reasons. Optional parameter values are baked into the method call site code, thus, if a default value has been changed, all referencing assemblies need to be rebuilt, otherwise the original values will be used. The Common Language Specification (CLS) allows compilers to ignore default parameter values, and thus require the caller to explicitly specify the values. The concept of optional argument exists only in VB.Net and C#. In all other languages like C++ or Java, the overloading mechanism is the only way to get the same behavior. Optional parameters prevent muddying the definition of the function contract. Here is a simple example: if there are two optional parameters, when one is defined, is the second one still optional or mandatory?",
"properties":  {
"severity":  "Warning",
"warningLevel":  "1",
"defaultSeverity":  "Warning",
"title":  "Optional parameters should not be used",
"category":  "Design",
"helpLink":  "http://vs.sonarlint.org/rules/index.html#version=1.9.0\u0026ruleId=S2360",
"isEnabledByDefault":  "True",
"isSuppressedInSource":  "False"
}
},
{
"ruleId":  "S2360",
"locations":  [
{
"analysisTarget":  [
{
"uri":  "akka.net\\src\\core\\Akka.TestKit\\TestKitBase_ExpectMsgFrom.cs",
"region":  {
"startLine":  24,
"startColumn":  71,
"endLine":  24,
"endColumn":  77
}
}
]
}
],
"shortMessage":  "Use the overloading mechanism instead of the optional parameters.",
"fullMessage":  "The overloading mechanism should be used in place of optional parameters for several reasons. Optional parameter values are baked into the method call site code, thus, if a default value has been changed, all referencing assemblies need to be rebuilt, otherwise the original values will be used. The Common Language Specification (CLS) allows compilers to ignore default parameter values, and thus require the caller to explicitly specify the values. The concept of optional argument exists only in VB.Net and C#. In all other languages like C++ or Java, the overloading mechanism is the only way to get the same behavior. Optional parameters prevent muddying the definition of the function contract. Here is a simple example: if there are two optional parameters, when one is defined, is the second one still optional or mandatory?",
"properties":  {
"severity":  "Warning",
"warningLevel":  "1",
"defaultSeverity":  "Warning",
"title":  "Optional parameters should not be used",
"category":  "Design",
"helpLink":  "http://vs.sonarlint.org/rules/index.html#version=1.9.0\u0026ruleId=S2360",
"isEnabledByDefault":  "True",
"isSuppressedInSource":  "False"
}
},
{
"ruleId":  "S2360",
"locations":  [
{
"analysisTarget":  [
{
"uri":  "akka.net\\src\\core\\Akka.TestKit\\TestKitBase_ExpectMsgFrom.cs",
"region":  {
"startLine":  24,
"startColumn":  91,
"endLine":  24,
"endColumn":  97
}
}
]
}
],
"shortMessage":  "Use the overloading mechanism instead of the optional parameters.",
"fullMessage":  "The overloading mechanism should be used in place of optional parameters for several reasons. Optional parameter values are baked into the method call site code, thus, if a default value has been changed, all referencing assemblies need to be rebuilt, otherwise the original values will be used. The Common Language Specification (CLS) allows compilers to ignore default parameter values, and thus require the caller to explicitly specify the values. The concept of optional argument exists only in VB.Net and C#. In all other languages like C++ or Java, the overloading mechanism is the only way to get the same behavior. Optional parameters prevent muddying the definition of the function contract. Here is a simple example: if there are two optional parameters, when one is defined, is the second one still optional or mandatory?",
"properties":  {
"severity":  "Warning",
"warningLevel":  "1",
"defaultSeverity":  "Warning",
"title":  "Optional parameters should not be used",
"category":  "Design",
"helpLink":  "http://vs.sonarlint.org/rules/index.html#version=1.9.0\u0026ruleId=S2360",
"isEnabledByDefault":  "True",
"isSuppressedInSource":  "False"
}
},
{
"ruleId":  "S2360",
"locations":  [
{
"analysisTarget":  [
{
"uri":  "akka.net\\src\\core\\Akka.TestKit\\TestKitBase_ExpectMsgFrom.cs",
"region":  {
"startLine":  38,
"startColumn":  81,
"endLine":  38,
"endColumn":  87
}
}
]
}
],
"shortMessage":  "Use the overloading mechanism instead of the optional parameters.",
"fullMessage":  "The overloading mechanism should be used in place of optional parameters for several reasons. Optional parameter values are baked into the method call site code, thus, if a default value has been changed, all referencing assemblies need to be rebuilt, otherwise the original values will be used. The Common Language Specification (CLS) allows compilers to ignore default parameter values, and thus require the caller to explicitly specify the values. The concept of optional argument exists only in VB.Net and C#. In all other languages like C++ or Java, the overloading mechanism is the only way to get the same behavior. Optional parameters prevent muddying the definition of the function contract. Here is a simple example: if there are two optional parameters, when one is defined, is the second one still optional or mandatory?",
"properties":  {
"severity":  "Warning",
"warningLevel":  "1",
"defaultSeverity":  "Warning",
"title":  "Optional parameters should not be used",
"category":  "Design",
"helpLink":  "http://vs.sonarlint.org/rules/index.html#version=1.9.0\u0026ruleId=S2360",
"isEnabledByDefault":  "True",
"isSuppressedInSource":  "False"
}
},
{
"ruleId":  "S2360",
"locations":  [
{
"analysisTarget":  [
{
"uri":  "akka.net\\src\\core\\Akka.TestKit\\TestKitBase_ExpectMsgFrom.cs",
"region":  {
"startLine":  38,
"startColumn":  101,
"endLine":  38,
"endColumn":  107
}
}
]
}
],
"shortMessage":  "Use the overloading mechanism instead of the optional parameters.",
"fullMessage":  "The overloading mechanism should be used in place of optional parameters for several reasons. Optional parameter values are baked into the method call site code, thus, if a default value has been changed, all referencing assemblies need to be rebuilt, otherwise the original values will be used. The Common Language Specification (CLS) allows compilers to ignore default parameter values, and thus require the caller to explicitly specify the values. The concept of optional argument exists only in VB.Net and C#. In all other languages like C++ or Java, the overloading mechanism is the only way to get the same behavior. Optional parameters prevent muddying the definition of the function contract. Here is a simple example: if there are two optional parameters, when one is defined, is the second one still optional or mandatory?",
"properties":  {
"severity":  "Warning",
"warningLevel":  "1",
"defaultSeverity":  "Warning",
"title":  "Optional parameters should not be used",
"category":  "Design",
"helpLink":  "http://vs.sonarlint.org/rules/index.html#version=1.9.0\u0026ruleId=S2360",
"isEnabledByDefault":  "True",
"isSuppressedInSource":  "False"
}
},
{
"ruleId":  "S2360",
"locations":  [
{
"analysisTarget":  [
{
"uri":  "akka.net\\src\\core\\Akka.TestKit\\TestKitBase_ExpectMsgFrom.cs",
"region":  {
"startLine":  52,
"startColumn":  94,
"endLine":  52,
"endColumn":  100
}
}
]
}
],
"shortMessage":  "Use the overloading mechanism instead of the optional parameters.",
"fullMessage":  "The overloading mechanism should be used in place of optional parameters for several reasons. Optional parameter values are baked into the method call site code, thus, if a default value has been changed, all referencing assemblies need to be rebuilt, otherwise the original values will be used. The Common Language Specification (CLS) allows compilers to ignore default parameter values, and thus require the caller to explicitly specify the values. The concept of optional argument exists only in VB.Net and C#. In all other languages like C++ or Java, the overloading mechanism is the only way to get the same behavior. Optional parameters prevent muddying the definition of the function contract. Here is a simple example: if there are two optional parameters, when one is defined, is the second one still optional or mandatory?",
"properties":  {
"severity":  "Warning",
"warningLevel":  "1",
"defaultSeverity":  "Warning",
"title":  "Optional parameters should not be used",
"category":  "Design",
"helpLink":  "http://vs.sonarlint.org/rules/index.html#version=1.9.0\u0026ruleId=S2360",
"isEnabledByDefault":  "True",
"isSuppressedInSource":  "False"
}
},
{
"ruleId":  "S2360",
"locations":  [
{
"analysisTarget":  [
{
"uri":  "akka.net\\src\\core\\Akka.TestKit\\TestKitBase_ExpectMsgFrom.cs",
"region":  {
"startLine":  52,
"startColumn":  114,
"endLine":  52,
"endColumn":  120
}
}
]
}
],
"shortMessage":  "Use the overloading mechanism instead of the optional parameters.",
"fullMessage":  "The overloading mechanism should be used in place of optional parameters for several reasons. Optional parameter values are baked into the method call site code, thus, if a default value has been changed, all referencing assemblies need to be rebuilt, otherwise the original values will be used. The Common Language Specification (CLS) allows compilers to ignore default parameter values, and thus require the caller to explicitly specify the values. The concept of optional argument exists only in VB.Net and C#. In all other languages like C++ or Java, the overloading mechanism is the only way to get the same behavior. Optional parameters prevent muddying the definition of the function contract. Here is a simple example: if there are two optional parameters, when one is defined, is the second one still optional or mandatory?",
"properties":  {
"severity":  "Warning",
"warningLevel":  "1",
"defaultSeverity":  "Warning",
"title":  "Optional parameters should not be used",
"category":  "Design",
"helpLink":  "http://vs.sonarlint.org/rules/index.html#version=1.9.0\u0026ruleId=S2360",
"isEnabledByDefault":  "True",
"isSuppressedInSource":  "False"
}
},
{
"ruleId":  "S2360",
"locations":  [
{
"analysisTarget":  [
{
"uri":  "akka.net\\src\\core\\Akka.TestKit\\TestKitBase_ExpectMsgFrom.cs",
"region":  {
"startLine":  72,
"startColumn":  107,
"endLine":  72,
"endColumn":  113
}
}
]
}
],
"shortMessage":  "Use the overloading mechanism instead of the optional parameters.",
"fullMessage":  "The overloading mechanism should be used in place of optional parameters for several reasons. Optional parameter values are baked into the method call site code, thus, if a default value has been changed, all referencing assemblies need to be rebuilt, otherwise the original values will be used. The Common Language Specification (CLS) allows compilers to ignore default parameter values, and thus require the caller to explicitly specify the values. The concept of optional argument exists only in VB.Net and C#. In all other languages like C++ or Java, the overloading mechanism is the only way to get the same behavior. Optional parameters prevent muddying the definition of the function contract. Here is a simple example: if there are two optional parameters, when one is defined, is the second one still optional or mandatory?",
"properties":  {
"severity":  "Warning",
"warningLevel":  "1",
"defaultSeverity":  "Warning",
"title":  "Optional parameters should not be used",
"category":  "Design",
"helpLink":  "http://vs.sonarlint.org/rules/index.html#version=1.9.0\u0026ruleId=S2360",
"isEnabledByDefault":  "True",
"isSuppressedInSource":  "False"
}
},
{
"ruleId":  "S2360",
"locations":  [
{
"analysisTarget":  [
{
"uri":  "akka.net\\src\\core\\Akka.TestKit\\TestKitBase_ExpectMsgFrom.cs",
"region":  {
"startLine":  72,
"startColumn":  127,
"endLine":  72,
"endColumn":  133
}
}
]
}
],
"shortMessage":  "Use the overloading mechanism instead of the optional parameters.",
"fullMessage":  "The overloading mechanism should be used in place of optional parameters for several reasons. Optional parameter values are baked into the method call site code, thus, if a default value has been changed, all referencing assemblies need to be rebuilt, otherwise the original values will be used. The Common Language Specification (CLS) allows compilers to ignore default parameter values, and thus require the caller to explicitly specify the values. The concept of optional argument exists only in VB.Net and C#. In all other languages like C++ or Java, the overloading mechanism is the only way to get the same behavior. Optional parameters prevent muddying the definition of the function contract. Here is a simple example: if there are two optional parameters, when one is defined, is the second one still optional or mandatory?",
"properties":  {
"severity":  "Warning",
"warningLevel":  "1",
"defaultSeverity":  "Warning",
"title":  "Optional parameters should not be used",
"category":  "Design",
"helpLink":  "http://vs.sonarlint.org/rules/index.html#version=1.9.0\u0026ruleId=S2360",
"isEnabledByDefault":  "True",
"isSuppressedInSource":  "False"
}
},
{
"ruleId":  "S2360",
"locations":  [
{
"analysisTarget":  [
{
"uri":  "akka.net\\src\\core\\Akka.TestKit\\TestKitBase_ExpectMsgFrom.cs",
"region":  {
"startLine":  102,
"startColumn":  95,
"endLine":  102,
"endColumn":  101
}
}
]
}
],
"shortMessage":  "Use the overloading mechanism instead of the optional parameters.",
"fullMessage":  "The overloading mechanism should be used in place of optional parameters for several reasons. Optional parameter values are baked into the method call site code, thus, if a default value has been changed, all referencing assemblies need to be rebuilt, otherwise the original values will be used. The Common Language Specification (CLS) allows compilers to ignore default parameter values, and thus require the caller to explicitly specify the values. The concept of optional argument exists only in VB.Net and C#. In all other languages like C++ or Java, the overloading mechanism is the only way to get the same behavior. Optional parameters prevent muddying the definition of the function contract. Here is a simple example: if there are two optional parameters, when one is defined, is the second one still optional or mandatory?",
"properties":  {
"severity":  "Warning",
"warningLevel":  "1",
"defaultSeverity":  "Warning",
"title":  "Optional parameters should not be used",
"category":  "Design",
"helpLink":  "http://vs.sonarlint.org/rules/index.html#version=1.9.0\u0026ruleId=S2360",
"isEnabledByDefault":  "True",
"isSuppressedInSource":  "False"
}
},
{
"ruleId":  "S2360",
"locations":  [
{
"analysisTarget":  [
{
"uri":  "akka.net\\src\\core\\Akka.TestKit\\TestKitBase_ExpectMsgFrom.cs",
"region":  {
"startLine":  102,
"startColumn":  115,
"endLine":  102,
"endColumn":  121
}
}
]
}
],
"shortMessage":  "Use the overloading mechanism instead of the optional parameters.",
"fullMessage":  "The overloading mechanism should be used in place of optional parameters for several reasons. Optional parameter values are baked into the method call site code, thus, if a default value has been changed, all referencing assemblies need to be rebuilt, otherwise the original values will be used. The Common Language Specification (CLS) allows compilers to ignore default parameter values, and thus require the caller to explicitly specify the values. The concept of optional argument exists only in VB.Net and C#. In all other languages like C++ or Java, the overloading mechanism is the only way to get the same behavior. Optional parameters prevent muddying the definition of the function contract. Here is a simple example: if there are two optional parameters, when one is defined, is the second one still optional or mandatory?",
"properties":  {
"severity":  "Warning",
"warningLevel":  "1",
"defaultSeverity":  "Warning",
"title":  "Optional parameters should not be used",
"category":  "Design",
"helpLink":  "http://vs.sonarlint.org/rules/index.html#version=1.9.0\u0026ruleId=S2360",
"isEnabledByDefault":  "True",
"isSuppressedInSource":  "False"
}
},
{
"ruleId":  "S2360",
"locations":  [
{
"analysisTarget":  [
{
"uri":  "akka.net\\src\\core\\Akka.TestKit\\TestKitBase_ExpectMsgFrom.cs",
"region":  {
"startLine":  117,
"startColumn":  109,
"endLine":  117,
"endColumn":  115
}
}
]
}
],
"shortMessage":  "Use the overloading mechanism instead of the optional parameters.",
"fullMessage":  "The overloading mechanism should be used in place of optional parameters for several reasons. Optional parameter values are baked into the method call site code, thus, if a default value has been changed, all referencing assemblies need to be rebuilt, otherwise the original values will be used. The Common Language Specification (CLS) allows compilers to ignore default parameter values, and thus require the caller to explicitly specify the values. The concept of optional argument exists only in VB.Net and C#. In all other languages like C++ or Java, the overloading mechanism is the only way to get the same behavior. Optional parameters prevent muddying the definition of the function contract. Here is a simple example: if there are two optional parameters, when one is defined, is the second one still optional or mandatory?",
"properties":  {
"severity":  "Warning",
"warningLevel":  "1",
"defaultSeverity":  "Warning",
"title":  "Optional parameters should not be used",
"category":  "Design",
"helpLink":  "http://vs.sonarlint.org/rules/index.html#version=1.9.0\u0026ruleId=S2360",
"isEnabledByDefault":  "True",
"isSuppressedInSource":  "False"
}
},
{
"ruleId":  "S2360",
"locations":  [
{
"analysisTarget":  [
{
"uri":  "akka.net\\src\\core\\Akka.TestKit\\TestKitBase_ExpectMsgFrom.cs",
"region":  {
"startLine":  117,
"startColumn":  129,
"endLine":  117,
"endColumn":  135
}
}
]
}
],
"shortMessage":  "Use the overloading mechanism instead of the optional parameters.",
"fullMessage":  "The overloading mechanism should be used in place of optional parameters for several reasons. Optional parameter values are baked into the method call site code, thus, if a default value has been changed, all referencing assemblies need to be rebuilt, otherwise the original values will be used. The Common Language Specification (CLS) allows compilers to ignore default parameter values, and thus require the caller to explicitly specify the values. The concept of optional argument exists only in VB.Net and C#. In all other languages like C++ or Java, the overloading mechanism is the only way to get the same behavior. Optional parameters prevent muddying the definition of the function contract. Here is a simple example: if there are two optional parameters, when one is defined, is the second one still optional or mandatory?",
"properties":  {
"severity":  "Warning",
"warningLevel":  "1",
"defaultSeverity":  "Warning",
"title":  "Optional parameters should not be used",
"category":  "Design",
"helpLink":  "http://vs.sonarlint.org/rules/index.html#version=1.9.0\u0026ruleId=S2360",
"isEnabledByDefault":  "True",
"isSuppressedInSource":  "False"
}
},
{
"ruleId":  "S2360",
"locations":  [
{
"analysisTarget":  [
{
"uri":  "akka.net\\src\\core\\Akka.TestKit\\TestKitBase_Receive.cs",
"region":  {
"startLine":  25,
"startColumn":  80,
"endLine":  25,
"endColumn":  86
}
}
]
}
],
"shortMessage":  "Use the overloading mechanism instead of the optional parameters.",
"fullMessage":  "The overloading mechanism should be used in place of optional parameters for several reasons. Optional parameter values are baked into the method call site code, thus, if a default value has been changed, all referencing assemblies need to be rebuilt, otherwise the original values will be used. The Common Language Specification (CLS) allows compilers to ignore default parameter values, and thus require the caller to explicitly specify the values. The concept of optional argument exists only in VB.Net and C#. In all other languages like C++ or Java, the overloading mechanism is the only way to get the same behavior. Optional parameters prevent muddying the definition of the function contract. Here is a simple example: if there are two optional parameters, when one is defined, is the second one still optional or mandatory?",
"properties":  {
"severity":  "Warning",
"warningLevel":  "1",
"defaultSeverity":  "Warning",
"title":  "Optional parameters should not be used",
"category":  "Design",
"helpLink":  "http://vs.sonarlint.org/rules/index.html#version=1.9.0\u0026ruleId=S2360",
"isEnabledByDefault":  "True",
"isSuppressedInSource":  "False"
}
},
{
"ruleId":  "S2360",
"locations":  [
{
"analysisTarget":  [
{
"uri":  "akka.net\\src\\core\\Akka.TestKit\\TestKitBase_Receive.cs",
"region":  {
"startLine":  25,
"startColumn":  100,
"endLine":  25,
"endColumn":  104
}
}
]
}
],
"shortMessage":  "Use the overloading mechanism instead of the optional parameters.",
"fullMessage":  "The overloading mechanism should be used in place of optional parameters for several reasons. Optional parameter values are baked into the method call site code, thus, if a default value has been changed, all referencing assemblies need to be rebuilt, otherwise the original values will be used. The Common Language Specification (CLS) allows compilers to ignore default parameter values, and thus require the caller to explicitly specify the values. The concept of optional argument exists only in VB.Net and C#. In all other languages like C++ or Java, the overloading mechanism is the only way to get the same behavior. Optional parameters prevent muddying the definition of the function contract. Here is a simple example: if there are two optional parameters, when one is defined, is the second one still optional or mandatory?",
"properties":  {
"severity":  "Warning",
"warningLevel":  "1",
"defaultSeverity":  "Warning",
"title":  "Optional parameters should not be used",
"category":  "Design",
"helpLink":  "http://vs.sonarlint.org/rules/index.html#version=1.9.0\u0026ruleId=S2360",
"isEnabledByDefault":  "True",
"isSuppressedInSource":  "False"
}
},
{
"ruleId":  "S2360",
"locations":  [
{
"analysisTarget":  [
{
"uri":  "akka.net\\src\\core\\Akka.TestKit\\TestKitBase_Receive.cs",
"region":  {
"startLine":  39,
"startColumn":  73,
"endLine":  39,
"endColumn":  79
}
}
]
}
],
"shortMessage":  "Use the overloading mechanism instead of the optional parameters.",
"fullMessage":  "The overloading mechanism should be used in place of optional parameters for several reasons. Optional parameter values are baked into the method call site code, thus, if a default value has been changed, all referencing assemblies need to be rebuilt, otherwise the original values will be used. The Common Language Specification (CLS) allows compilers to ignore default parameter values, and thus require the caller to explicitly specify the values. The concept of optional argument exists only in VB.Net and C#. In all other languages like C++ or Java, the overloading mechanism is the only way to get the same behavior. Optional parameters prevent muddying the definition of the function contract. Here is a simple example: if there are two optional parameters, when one is defined, is the second one still optional or mandatory?",
"properties":  {
"severity":  "Warning",
"warningLevel":  "1",
"defaultSeverity":  "Warning",
"title":  "Optional parameters should not be used",
"category":  "Design",
"helpLink":  "http://vs.sonarlint.org/rules/index.html#version=1.9.0\u0026ruleId=S2360",
"isEnabledByDefault":  "True",
"isSuppressedInSource":  "False"
}
},
{
"ruleId":  "S2360",
"locations":  [
{
"analysisTarget":  [
{
"uri":  "akka.net\\src\\core\\Akka.TestKit\\TestKitBase_Receive.cs",
"region":  {
"startLine":  39,
"startColumn":  93,
"endLine":  39,
"endColumn":  97
}
}
]
}
],
"shortMessage":  "Use the overloading mechanism instead of the optional parameters.",
"fullMessage":  "The overloading mechanism should be used in place of optional parameters for several reasons. Optional parameter values are baked into the method call site code, thus, if a default value has been changed, all referencing assemblies need to be rebuilt, otherwise the original values will be used. The Common Language Specification (CLS) allows compilers to ignore default parameter values, and thus require the caller to explicitly specify the values. The concept of optional argument exists only in VB.Net and C#. In all other languages like C++ or Java, the overloading mechanism is the only way to get the same behavior. Optional parameters prevent muddying the definition of the function contract. Here is a simple example: if there are two optional parameters, when one is defined, is the second one still optional or mandatory?",
"properties":  {
"severity":  "Warning",
"warningLevel":  "1",
"defaultSeverity":  "Warning",
"title":  "Optional parameters should not be used",
"category":  "Design",
"helpLink":  "http://vs.sonarlint.org/rules/index.html#version=1.9.0\u0026ruleId=S2360",
"isEnabledByDefault":  "True",
"isSuppressedInSource":  "False"
}
},
{
"ruleId":  "S2360",
"locations":  [
{
"analysisTarget":  [
{
"uri":  "akka.net\\src\\core\\Akka.TestKit\\TestKitBase_Receive.cs",
"region":  {
"startLine":  67,
"startColumn":  47,
"endLine":  67,
"endColumn":  53
}
}
]
}
],
"shortMessage":  "Use the overloading mechanism instead of the optional parameters.",
"fullMessage":  "The overloading mechanism should be used in place of optional parameters for several reasons. Optional parameter values are baked into the method call site code, thus, if a default value has been changed, all referencing assemblies need to be rebuilt, otherwise the original values will be used. The Common Language Specification (CLS) allows compilers to ignore default parameter values, and thus require the caller to explicitly specify the values. The concept of optional argument exists only in VB.Net and C#. In all other languages like C++ or Java, the overloading mechanism is the only way to get the same behavior. Optional parameters prevent muddying the definition of the function contract. Here is a simple example: if there are two optional parameters, when one is defined, is the second one still optional or mandatory?",
"properties":  {
"severity":  "Warning",
"warningLevel":  "1",
"defaultSeverity":  "Warning",
"title":  "Optional parameters should not be used",
"category":  "Design",
"helpLink":  "http://vs.sonarlint.org/rules/index.html#version=1.9.0\u0026ruleId=S2360",
"isEnabledByDefault":  "True",
"isSuppressedInSource":  "False"
}
},
{
"ruleId":  "S2360",
"locations":  [
{
"analysisTarget":  [
{
"uri":  "akka.net\\src\\core\\Akka.TestKit\\TestKitBase_Receive.cs",
"region":  {
"startLine":  103,
"startColumn":  78,
"endLine":  103,
"endColumn":  84
}
}
]
}
],
"shortMessage":  "Use the overloading mechanism instead of the optional parameters.",
"fullMessage":  "The overloading mechanism should be used in place of optional parameters for several reasons. Optional parameter values are baked into the method call site code, thus, if a default value has been changed, all referencing assemblies need to be rebuilt, otherwise the original values will be used. The Common Language Specification (CLS) allows compilers to ignore default parameter values, and thus require the caller to explicitly specify the values. The concept of optional argument exists only in VB.Net and C#. In all other languages like C++ or Java, the overloading mechanism is the only way to get the same behavior. Optional parameters prevent muddying the definition of the function contract. Here is a simple example: if there are two optional parameters, when one is defined, is the second one still optional or mandatory?",
"properties":  {
"severity":  "Warning",
"warningLevel":  "1",
"defaultSeverity":  "Warning",
"title":  "Optional parameters should not be used",
"category":  "Design",
"helpLink":  "http://vs.sonarlint.org/rules/index.html#version=1.9.0\u0026ruleId=S2360",
"isEnabledByDefault":  "True",
"isSuppressedInSource":  "False"
}
},
{
"ruleId":  "S2360",
"locations":  [
{
"analysisTarget":  [
{
"uri":  "akka.net\\src\\core\\Akka.TestKit\\TestKitBase_Receive.cs",
"region":  {
"startLine":  181,
"startColumn":  96,
"endLine":  181,
"endColumn":  110
}
}
]
}
],
"shortMessage":  "Use the overloading mechanism instead of the optional parameters.",
"fullMessage":  "The overloading mechanism should be used in place of optional parameters for several reasons. Optional parameter values are baked into the method call site code, thus, if a default value has been changed, all referencing assemblies need to be rebuilt, otherwise the original values will be used. The Common Language Specification (CLS) allows compilers to ignore default parameter values, and thus require the caller to explicitly specify the values. The concept of optional argument exists only in VB.Net and C#. In all other languages like C++ or Java, the overloading mechanism is the only way to get the same behavior. Optional parameters prevent muddying the definition of the function contract. Here is a simple example: if there are two optional parameters, when one is defined, is the second one still optional or mandatory?",
"properties":  {
"severity":  "Warning",
"warningLevel":  "1",
"defaultSeverity":  "Warning",
"title":  "Optional parameters should not be used",
"category":  "Design",
"helpLink":  "http://vs.sonarlint.org/rules/index.html#version=1.9.0\u0026ruleId=S2360",
"isEnabledByDefault":  "True",
"isSuppressedInSource":  "False"
}
},
{
"ruleId":  "S2360",
"locations":  [
{
"analysisTarget":  [
{
"uri":  "akka.net\\src\\core\\Akka.TestKit\\TestKitBase_Receive.cs",
"region":  {
"startLine":  195,
"startColumn":  112,
"endLine":  195,
"endColumn":  126
}
}
]
}
],
"shortMessage":  "Use the overloading mechanism instead of the optional parameters.",
"fullMessage":  "The overloading mechanism should be used in place of optional parameters for several reasons. Optional parameter values are baked into the method call site code, thus, if a default value has been changed, all referencing assemblies need to be rebuilt, otherwise the original values will be used. The Common Language Specification (CLS) allows compilers to ignore default parameter values, and thus require the caller to explicitly specify the values. The concept of optional argument exists only in VB.Net and C#. In all other languages like C++ or Java, the overloading mechanism is the only way to get the same behavior. Optional parameters prevent muddying the definition of the function contract. Here is a simple example: if there are two optional parameters, when one is defined, is the second one still optional or mandatory?",
"properties":  {
"severity":  "Warning",
"warningLevel":  "1",
"defaultSeverity":  "Warning",
"title":  "Optional parameters should not be used",
"category":  "Design",
"helpLink":  "http://vs.sonarlint.org/rules/index.html#version=1.9.0\u0026ruleId=S2360",
"isEnabledByDefault":  "True",
"isSuppressedInSource":  "False"
}
},
{
"ruleId":  "S2360",
"locations":  [
{
"analysisTarget":  [
{
"uri":  "akka.net\\src\\core\\Akka.TestKit\\TestKitBase_Receive.cs",
"region":  {
"startLine":  209,
"startColumn":  86,
"endLine":  209,
"endColumn":  92
}
}
]
}
],
"shortMessage":  "Use the overloading mechanism instead of the optional parameters.",
"fullMessage":  "The overloading mechanism should be used in place of optional parameters for several reasons. Optional parameter values are baked into the method call site code, thus, if a default value has been changed, all referencing assemblies need to be rebuilt, otherwise the original values will be used. The Common Language Specification (CLS) allows compilers to ignore default parameter values, and thus require the caller to explicitly specify the values. The concept of optional argument exists only in VB.Net and C#. In all other languages like C++ or Java, the overloading mechanism is the only way to get the same behavior. Optional parameters prevent muddying the definition of the function contract. Here is a simple example: if there are two optional parameters, when one is defined, is the second one still optional or mandatory?",
"properties":  {
"severity":  "Warning",
"warningLevel":  "1",
"defaultSeverity":  "Warning",
"title":  "Optional parameters should not be used",
"category":  "Design",
"helpLink":  "http://vs.sonarlint.org/rules/index.html#version=1.9.0\u0026ruleId=S2360",
"isEnabledByDefault":  "True",
"isSuppressedInSource":  "False"
}
},
{
"ruleId":  "S2360",
"locations":  [
{
"analysisTarget":  [
{
"uri":  "akka.net\\src\\core\\Akka.TestKit\\TestKitBase_Receive.cs",
"region":  {
"startLine":  209,
"startColumn":  109,
"endLine":  209,
"endColumn":  115
}
}
]
}
],
"shortMessage":  "Use the overloading mechanism instead of the optional parameters.",
"fullMessage":  "The overloading mechanism should be used in place of optional parameters for several reasons. Optional parameter values are baked into the method call site code, thus, if a default value has been changed, all referencing assemblies need to be rebuilt, otherwise the original values will be used. The Common Language Specification (CLS) allows compilers to ignore default parameter values, and thus require the caller to explicitly specify the values. The concept of optional argument exists only in VB.Net and C#. In all other languages like C++ or Java, the overloading mechanism is the only way to get the same behavior. Optional parameters prevent muddying the definition of the function contract. Here is a simple example: if there are two optional parameters, when one is defined, is the second one still optional or mandatory?",
"properties":  {
"severity":  "Warning",
"warningLevel":  "1",
"defaultSeverity":  "Warning",
"title":  "Optional parameters should not be used",
"category":  "Design",
"helpLink":  "http://vs.sonarlint.org/rules/index.html#version=1.9.0\u0026ruleId=S2360",
"isEnabledByDefault":  "True",
"isSuppressedInSource":  "False"
}
},
{
"ruleId":  "S2360",
"locations":  [
{
"analysisTarget":  [
{
"uri":  "akka.net\\src\\core\\Akka.TestKit\\TestKitBase_Receive.cs",
"region":  {
"startLine":  209,
"startColumn":  126,
"endLine":  209,
"endColumn":  140
}
}
]
}
],
"shortMessage":  "Use the overloading mechanism instead of the optional parameters.",
"fullMessage":  "The overloading mechanism should be used in place of optional parameters for several reasons. Optional parameter values are baked into the method call site code, thus, if a default value has been changed, all referencing assemblies need to be rebuilt, otherwise the original values will be used. The Common Language Specification (CLS) allows compilers to ignore default parameter values, and thus require the caller to explicitly specify the values. The concept of optional argument exists only in VB.Net and C#. In all other languages like C++ or Java, the overloading mechanism is the only way to get the same behavior. Optional parameters prevent muddying the definition of the function contract. Here is a simple example: if there are two optional parameters, when one is defined, is the second one still optional or mandatory?",
"properties":  {
"severity":  "Warning",
"warningLevel":  "1",
"defaultSeverity":  "Warning",
"title":  "Optional parameters should not be used",
"category":  "Design",
"helpLink":  "http://vs.sonarlint.org/rules/index.html#version=1.9.0\u0026ruleId=S2360",
"isEnabledByDefault":  "True",
"isSuppressedInSource":  "False"
}
},
{
"ruleId":  "S2360",
"locations":  [
{
"analysisTarget":  [
{
"uri":  "akka.net\\src\\core\\Akka.TestKit\\TestKitBase_Receive.cs",
"region":  {
"startLine":  258,
"startColumn":  89,
"endLine":  258,
"endColumn":  95
}
}
]
}
],
"shortMessage":  "Use the overloading mechanism instead of the optional parameters.",
"fullMessage":  "The overloading mechanism should be used in place of optional parameters for several reasons. Optional parameter values are baked into the method call site code, thus, if a default value has been changed, all referencing assemblies need to be rebuilt, otherwise the original values will be used. The Common Language Specification (CLS) allows compilers to ignore default parameter values, and thus require the caller to explicitly specify the values. The concept of optional argument exists only in VB.Net and C#. In all other languages like C++ or Java, the overloading mechanism is the only way to get the same behavior. Optional parameters prevent muddying the definition of the function contract. Here is a simple example: if there are two optional parameters, when one is defined, is the second one still optional or mandatory?",
"properties":  {
"severity":  "Warning",
"warningLevel":  "1",
"defaultSeverity":  "Warning",
"title":  "Optional parameters should not be used",
"category":  "Design",
"helpLink":  "http://vs.sonarlint.org/rules/index.html#version=1.9.0\u0026ruleId=S2360",
"isEnabledByDefault":  "True",
"isSuppressedInSource":  "False"
}
},
{
"ruleId":  "S2360",
"locations":  [
{
"analysisTarget":  [
{
"uri":  "akka.net\\src\\core\\Akka.TestKit\\TestKitBase_Receive.cs",
"region":  {
"startLine":  258,
"startColumn":  112,
"endLine":  258,
"endColumn":  118
}
}
]
}
],
"shortMessage":  "Use the overloading mechanism instead of the optional parameters.",
"fullMessage":  "The overloading mechanism should be used in place of optional parameters for several reasons. Optional parameter values are baked into the method call site code, thus, if a default value has been changed, all referencing assemblies need to be rebuilt, otherwise the original values will be used. The Common Language Specification (CLS) allows compilers to ignore default parameter values, and thus require the caller to explicitly specify the values. The concept of optional argument exists only in VB.Net and C#. In all other languages like C++ or Java, the overloading mechanism is the only way to get the same behavior. Optional parameters prevent muddying the definition of the function contract. Here is a simple example: if there are two optional parameters, when one is defined, is the second one still optional or mandatory?",
"properties":  {
"severity":  "Warning",
"warningLevel":  "1",
"defaultSeverity":  "Warning",
"title":  "Optional parameters should not be used",
"category":  "Design",
"helpLink":  "http://vs.sonarlint.org/rules/index.html#version=1.9.0\u0026ruleId=S2360",
"isEnabledByDefault":  "True",
"isSuppressedInSource":  "False"
}
},
{
"ruleId":  "S2360",
"locations":  [
{
"analysisTarget":  [
{
"uri":  "akka.net\\src\\core\\Akka.TestKit\\TestKitBase_Receive.cs",
"region":  {
"startLine":  258,
"startColumn":  129,
"endLine":  258,
"endColumn":  143
}
}
]
}
],
"shortMessage":  "Use the overloading mechanism instead of the optional parameters.",
"fullMessage":  "The overloading mechanism should be used in place of optional parameters for several reasons. Optional parameter values are baked into the method call site code, thus, if a default value has been changed, all referencing assemblies need to be rebuilt, otherwise the original values will be used. The Common Language Specification (CLS) allows compilers to ignore default parameter values, and thus require the caller to explicitly specify the values. The concept of optional argument exists only in VB.Net and C#. In all other languages like C++ or Java, the overloading mechanism is the only way to get the same behavior. Optional parameters prevent muddying the definition of the function contract. Here is a simple example: if there are two optional parameters, when one is defined, is the second one still optional or mandatory?",
"properties":  {
"severity":  "Warning",
"warningLevel":  "1",
"defaultSeverity":  "Warning",
"title":  "Optional parameters should not be used",
"category":  "Design",
"helpLink":  "http://vs.sonarlint.org/rules/index.html#version=1.9.0\u0026ruleId=S2360",
"isEnabledByDefault":  "True",
"isSuppressedInSource":  "False"
}
},
{
"ruleId":  "S2360",
"locations":  [
{
"analysisTarget":  [
{
"uri":  "akka.net\\src\\core\\Akka.TestKit\\TestKitBase_Receive.cs",
"region":  {
"startLine":  258,
"startColumn":  180,
"endLine":  258,
"endColumn":  186
}
}
]
}
],
"shortMessage":  "Use the overloading mechanism instead of the optional parameters.",
"fullMessage":  "The overloading mechanism should be used in place of optional parameters for several reasons. Optional parameter values are baked into the method call site code, thus, if a default value has been changed, all referencing assemblies need to be rebuilt, otherwise the original values will be used. The Common Language Specification (CLS) allows compilers to ignore default parameter values, and thus require the caller to explicitly specify the values. The concept of optional argument exists only in VB.Net and C#. In all other languages like C++ or Java, the overloading mechanism is the only way to get the same behavior. Optional parameters prevent muddying the definition of the function contract. Here is a simple example: if there are two optional parameters, when one is defined, is the second one still optional or mandatory?",
"properties":  {
"severity":  "Warning",
"warningLevel":  "1",
"defaultSeverity":  "Warning",
"title":  "Optional parameters should not be used",
"category":  "Design",
"helpLink":  "http://vs.sonarlint.org/rules/index.html#version=1.9.0\u0026ruleId=S2360",
"isEnabledByDefault":  "True",
"isSuppressedInSource":  "False"
}
},
{
"ruleId":  "S2360",
"locations":  [
{
"analysisTarget":  [
{
"uri":  "akka.net\\src\\core\\Akka.TestKit\\TestKitBase_Within.cs",
"region":  {
"startLine":  35,
"startColumn":  82,
"endLine":  35,
"endColumn":  88
}
}
]
}
],
"shortMessage":  "Use the overloading mechanism instead of the optional parameters.",
"fullMessage":  "The overloading mechanism should be used in place of optional parameters for several reasons. Optional parameter values are baked into the method call site code, thus, if a default value has been changed, all referencing assemblies need to be rebuilt, otherwise the original values will be used. The Common Language Specification (CLS) allows compilers to ignore default parameter values, and thus require the caller to explicitly specify the values. The concept of optional argument exists only in VB.Net and C#. In all other languages like C++ or Java, the overloading mechanism is the only way to get the same behavior. Optional parameters prevent muddying the definition of the function contract. Here is a simple example: if there are two optional parameters, when one is defined, is the second one still optional or mandatory?",
"properties":  {
"severity":  "Warning",
"warningLevel":  "1",
"defaultSeverity":  "Warning",
"title":  "Optional parameters should not be used",
"category":  "Design",
"helpLink":  "http://vs.sonarlint.org/rules/index.html#version=1.9.0\u0026ruleId=S2360",
"isEnabledByDefault":  "True",
"isSuppressedInSource":  "False"
}
},
{
"ruleId":  "S2360",
"locations":  [
{
"analysisTarget":  [
{
"uri":  "akka.net\\src\\core\\Akka.TestKit\\TestKitBase_Within.cs",
"region":  {
"startLine":  60,
"startColumn":  85,
"endLine":  60,
"endColumn":  91
}
}
]
}
],
"shortMessage":  "Use the overloading mechanism instead of the optional parameters.",
"fullMessage":  "The overloading mechanism should be used in place of optional parameters for several reasons. Optional parameter values are baked into the method call site code, thus, if a default value has been changed, all referencing assemblies need to be rebuilt, otherwise the original values will be used. The Common Language Specification (CLS) allows compilers to ignore default parameter values, and thus require the caller to explicitly specify the values. The concept of optional argument exists only in VB.Net and C#. In all other languages like C++ or Java, the overloading mechanism is the only way to get the same behavior. Optional parameters prevent muddying the definition of the function contract. Here is a simple example: if there are two optional parameters, when one is defined, is the second one still optional or mandatory?",
"properties":  {
"severity":  "Warning",
"warningLevel":  "1",
"defaultSeverity":  "Warning",
"title":  "Optional parameters should not be used",
"category":  "Design",
"helpLink":  "http://vs.sonarlint.org/rules/index.html#version=1.9.0\u0026ruleId=S2360",
"isEnabledByDefault":  "True",
"isSuppressedInSource":  "False"
}
},
{
"ruleId":  "S2360",
"locations":  [
{
"analysisTarget":  [
{
"uri":  "akka.net\\src\\core\\Akka.TestKit\\TestLatch.cs",
"region":  {
"startLine":  87,
"startColumn":  55,
"endLine":  87,
"endColumn":  58
}
}
]
}
],
"shortMessage":  "Use the overloading mechanism instead of the optional parameters.",
"fullMessage":  "The overloading mechanism should be used in place of optional parameters for several reasons. Optional parameter values are baked into the method call site code, thus, if a default value has been changed, all referencing assemblies need to be rebuilt, otherwise the original values will be used. The Common Language Specification (CLS) allows compilers to ignore default parameter values, and thus require the caller to explicitly specify the values. The concept of optional argument exists only in VB.Net and C#. In all other languages like C++ or Java, the overloading mechanism is the only way to get the same behavior. Optional parameters prevent muddying the definition of the function contract. Here is a simple example: if there are two optional parameters, when one is defined, is the second one still optional or mandatory?",
"properties":  {
"severity":  "Warning",
"warningLevel":  "1",
"defaultSeverity":  "Warning",
"title":  "Optional parameters should not be used",
"category":  "Design",
"helpLink":  "http://vs.sonarlint.org/rules/index.html#version=1.9.0\u0026ruleId=S2360",
"isEnabledByDefault":  "True",
"isSuppressedInSource":  "False"
}
},
{
"ruleId":  "S2360",
"locations":  [
{
"analysisTarget":  [
{
"uri":  "akka.net\\src\\core\\Akka.TestKit\\TestLatch.cs",
"region":  {
"startLine":  170,
"startColumn":  68,
"endLine":  170,
"endColumn":  71
}
}
]
}
],
"shortMessage":  "Use the overloading mechanism instead of the optional parameters.",
"fullMessage":  "The overloading mechanism should be used in place of optional parameters for several reasons. Optional parameter values are baked into the method call site code, thus, if a default value has been changed, all referencing assemblies need to be rebuilt, otherwise the original values will be used. The Common Language Specification (CLS) allows compilers to ignore default parameter values, and thus require the caller to explicitly specify the values. The concept of optional argument exists only in VB.Net and C#. In all other languages like C++ or Java, the overloading mechanism is the only way to get the same behavior. Optional parameters prevent muddying the definition of the function contract. Here is a simple example: if there are two optional parameters, when one is defined, is the second one still optional or mandatory?",
"properties":  {
"severity":  "Warning",
"warningLevel":  "1",
"defaultSeverity":  "Warning",
"title":  "Optional parameters should not be used",
"category":  "Design",
"helpLink":  "http://vs.sonarlint.org/rules/index.html#version=1.9.0\u0026ruleId=S2360",
"isEnabledByDefault":  "True",
"isSuppressedInSource":  "False"
}
},
{
"ruleId":  "S2360",
"locations":  [
{
"analysisTarget":  [
{
"uri":  "akka.net\\src\\core\\Akka.TestKit\\TestProbe.cs",
"region":  {
"startLine":  22,
"startColumn":  96,
"endLine":  22,
"endColumn":  101
}
}
]
}
],
"shortMessage":  "Use the overloading mechanism instead of the optional parameters.",
"fullMessage":  "The overloading mechanism should be used in place of optional parameters for several reasons. Optional parameter values are baked into the method call site code, thus, if a default value has been changed, all referencing assemblies need to be rebuilt, otherwise the original values will be used. The Common Language Specification (CLS) allows compilers to ignore default parameter values, and thus require the caller to explicitly specify the values. The concept of optional argument exists only in VB.Net and C#. In all other languages like C++ or Java, the overloading mechanism is the only way to get the same behavior. Optional parameters prevent muddying the definition of the function contract. Here is a simple example: if there are two optional parameters, when one is defined, is the second one still optional or mandatory?",
"properties":  {
"severity":  "Warning",
"warningLevel":  "1",
"defaultSeverity":  "Warning",
"title":  "Optional parameters should not be used",
"category":  "Design",
"helpLink":  "http://vs.sonarlint.org/rules/index.html#version=1.9.0\u0026ruleId=S2360",
"isEnabledByDefault":  "True",
"isSuppressedInSource":  "False"
}
}
]
}
