{
"version":  "0.1",
"toolInfo":  {
"toolName":  "Microsoft (R) Visual C# Compiler",
"productVersion":  "1.1.0",
"fileVersion":  "1.1.0"
},
"issues":  [
{
"ruleId":  "S1698",
"locations":  [
{
"analysisTarget":  [
{
"uri":  "akka.net\\src\\core\\Akka.Tests\\Actor\\ActorRefSpec.cs",
"region":  {
"startLine":  27,
"startColumn":  31,
"endLine":  27,
"endColumn":  33
}
}
]
}
],
"shortMessage":  "Consider using \"Equals\" if value comparison was intended.",
"fullMessage":  "Using the equality \"==\" and inequality \"!=\" operators to compare two objects generally works. The operators can be overloaded, and therefore the comparison can resolve to the appropriate method. However, when the operators are used on interface instances, then \"==\" resolves to reference equality, which may result in unexpected behavior  if implementing classes override \"Equals\". Similarly, when a class overrides \"Equals\", but instances are compared with non-overloaded \"==\", there is a high chance that value comparison was meant instead of the reference one.",
"properties":  {
"severity":  "Warning",
"warningLevel":  "1",
"defaultSeverity":  "Warning",
"title":  "\"==\" should not be used when \"Equals\" is overridden",
"category":  "Reliability",
"helpLink":  "http://vs.sonarlint.org/rules/index.html#version=1.8.0\u0026ruleId=S1698",
"isEnabledByDefault":  "True",
"isSuppressedInSource":  "False"
}
},
{
"ruleId":  "S1698",
"locations":  [
{
"analysisTarget":  [
{
"uri":  "akka.net\\src\\core\\Akka.Tests\\Actor\\ActorRefSpec.cs",
"region":  {
"startLine":  28,
"startColumn":  31,
"endLine":  28,
"endColumn":  33
}
}
]
}
],
"shortMessage":  "Consider using \"Equals\" if value comparison was intended.",
"fullMessage":  "Using the equality \"==\" and inequality \"!=\" operators to compare two objects generally works. The operators can be overloaded, and therefore the comparison can resolve to the appropriate method. However, when the operators are used on interface instances, then \"==\" resolves to reference equality, which may result in unexpected behavior  if implementing classes override \"Equals\". Similarly, when a class overrides \"Equals\", but instances are compared with non-overloaded \"==\", there is a high chance that value comparison was meant instead of the reference one.",
"properties":  {
"severity":  "Warning",
"warningLevel":  "1",
"defaultSeverity":  "Warning",
"title":  "\"==\" should not be used when \"Equals\" is overridden",
"category":  "Reliability",
"helpLink":  "http://vs.sonarlint.org/rules/index.html#version=1.8.0\u0026ruleId=S1698",
"isEnabledByDefault":  "True",
"isSuppressedInSource":  "False"
}
},
{
"ruleId":  "S1698",
"locations":  [
{
"analysisTarget":  [
{
"uri":  "akka.net\\src\\core\\Akka.Tests\\Actor\\ActorRefSpec.cs",
"region":  {
"startLine":  63,
"startColumn":  25,
"endLine":  63,
"endColumn":  27
}
}
]
}
],
"shortMessage":  "Consider using \"Equals\" if value comparison was intended.",
"fullMessage":  "Using the equality \"==\" and inequality \"!=\" operators to compare two objects generally works. The operators can be overloaded, and therefore the comparison can resolve to the appropriate method. However, when the operators are used on interface instances, then \"==\" resolves to reference equality, which may result in unexpected behavior  if implementing classes override \"Equals\". Similarly, when a class overrides \"Equals\", but instances are compared with non-overloaded \"==\", there is a high chance that value comparison was meant instead of the reference one.",
"properties":  {
"severity":  "Warning",
"warningLevel":  "1",
"defaultSeverity":  "Warning",
"title":  "\"==\" should not be used when \"Equals\" is overridden",
"category":  "Reliability",
"helpLink":  "http://vs.sonarlint.org/rules/index.html#version=1.8.0\u0026ruleId=S1698",
"isEnabledByDefault":  "True",
"isSuppressedInSource":  "False"
}
},
{
"ruleId":  "S1698",
"locations":  [
{
"analysisTarget":  [
{
"uri":  "akka.net\\src\\core\\Akka.Tests\\Actor\\ActorRefSpec.cs",
"region":  {
"startLine":  64,
"startColumn":  25,
"endLine":  64,
"endColumn":  27
}
}
]
}
],
"shortMessage":  "Consider using \"Equals\" if value comparison was intended.",
"fullMessage":  "Using the equality \"==\" and inequality \"!=\" operators to compare two objects generally works. The operators can be overloaded, and therefore the comparison can resolve to the appropriate method. However, when the operators are used on interface instances, then \"==\" resolves to reference equality, which may result in unexpected behavior  if implementing classes override \"Equals\". Similarly, when a class overrides \"Equals\", but instances are compared with non-overloaded \"==\", there is a high chance that value comparison was meant instead of the reference one.",
"properties":  {
"severity":  "Warning",
"warningLevel":  "1",
"defaultSeverity":  "Warning",
"title":  "\"==\" should not be used when \"Equals\" is overridden",
"category":  "Reliability",
"helpLink":  "http://vs.sonarlint.org/rules/index.html#version=1.8.0\u0026ruleId=S1698",
"isEnabledByDefault":  "True",
"isSuppressedInSource":  "False"
}
},
{
"ruleId":  "S1698",
"locations":  [
{
"analysisTarget":  [
{
"uri":  "akka.net\\src\\core\\Akka.Tests\\Actor\\ActorRefSpec.cs",
"region":  {
"startLine":  65,
"startColumn":  25,
"endLine":  65,
"endColumn":  27
}
}
]
}
],
"shortMessage":  "Consider using \"Equals\" if value comparison was intended.",
"fullMessage":  "Using the equality \"==\" and inequality \"!=\" operators to compare two objects generally works. The operators can be overloaded, and therefore the comparison can resolve to the appropriate method. However, when the operators are used on interface instances, then \"==\" resolves to reference equality, which may result in unexpected behavior  if implementing classes override \"Equals\". Similarly, when a class overrides \"Equals\", but instances are compared with non-overloaded \"==\", there is a high chance that value comparison was meant instead of the reference one.",
"properties":  {
"severity":  "Warning",
"warningLevel":  "1",
"defaultSeverity":  "Warning",
"title":  "\"==\" should not be used when \"Equals\" is overridden",
"category":  "Reliability",
"helpLink":  "http://vs.sonarlint.org/rules/index.html#version=1.8.0\u0026ruleId=S1698",
"isEnabledByDefault":  "True",
"isSuppressedInSource":  "False"
}
},
{
"ruleId":  "S1698",
"locations":  [
{
"analysisTarget":  [
{
"uri":  "akka.net\\src\\core\\Akka.Tests\\Actor\\ActorRefSpec.cs",
"region":  {
"startLine":  66,
"startColumn":  25,
"endLine":  66,
"endColumn":  27
}
}
]
}
],
"shortMessage":  "Consider using \"Equals\" if value comparison was intended.",
"fullMessage":  "Using the equality \"==\" and inequality \"!=\" operators to compare two objects generally works. The operators can be overloaded, and therefore the comparison can resolve to the appropriate method. However, when the operators are used on interface instances, then \"==\" resolves to reference equality, which may result in unexpected behavior  if implementing classes override \"Equals\". Similarly, when a class overrides \"Equals\", but instances are compared with non-overloaded \"==\", there is a high chance that value comparison was meant instead of the reference one.",
"properties":  {
"severity":  "Warning",
"warningLevel":  "1",
"defaultSeverity":  "Warning",
"title":  "\"==\" should not be used when \"Equals\" is overridden",
"category":  "Reliability",
"helpLink":  "http://vs.sonarlint.org/rules/index.html#version=1.8.0\u0026ruleId=S1698",
"isEnabledByDefault":  "True",
"isSuppressedInSource":  "False"
}
},
{
"ruleId":  "S1698",
"locations":  [
{
"analysisTarget":  [
{
"uri":  "akka.net\\src\\core\\Akka.Tests\\Actor\\ActorRefSpec.cs",
"region":  {
"startLine":  67,
"startColumn":  25,
"endLine":  67,
"endColumn":  27
}
}
]
}
],
"shortMessage":  "Consider using \"Equals\" if value comparison was intended.",
"fullMessage":  "Using the equality \"==\" and inequality \"!=\" operators to compare two objects generally works. The operators can be overloaded, and therefore the comparison can resolve to the appropriate method. However, when the operators are used on interface instances, then \"==\" resolves to reference equality, which may result in unexpected behavior  if implementing classes override \"Equals\". Similarly, when a class overrides \"Equals\", but instances are compared with non-overloaded \"==\", there is a high chance that value comparison was meant instead of the reference one.",
"properties":  {
"severity":  "Warning",
"warningLevel":  "1",
"defaultSeverity":  "Warning",
"title":  "\"==\" should not be used when \"Equals\" is overridden",
"category":  "Reliability",
"helpLink":  "http://vs.sonarlint.org/rules/index.html#version=1.8.0\u0026ruleId=S1698",
"isEnabledByDefault":  "True",
"isSuppressedInSource":  "False"
}
},
{
"ruleId":  "S1698",
"locations":  [
{
"analysisTarget":  [
{
"uri":  "akka.net\\src\\core\\Akka.Tests\\Actor\\ActorRefSpec.cs",
"region":  {
"startLine":  68,
"startColumn":  25,
"endLine":  68,
"endColumn":  27
}
}
]
}
],
"shortMessage":  "Consider using \"Equals\" if value comparison was intended.",
"fullMessage":  "Using the equality \"==\" and inequality \"!=\" operators to compare two objects generally works. The operators can be overloaded, and therefore the comparison can resolve to the appropriate method. However, when the operators are used on interface instances, then \"==\" resolves to reference equality, which may result in unexpected behavior  if implementing classes override \"Equals\". Similarly, when a class overrides \"Equals\", but instances are compared with non-overloaded \"==\", there is a high chance that value comparison was meant instead of the reference one.",
"properties":  {
"severity":  "Warning",
"warningLevel":  "1",
"defaultSeverity":  "Warning",
"title":  "\"==\" should not be used when \"Equals\" is overridden",
"category":  "Reliability",
"helpLink":  "http://vs.sonarlint.org/rules/index.html#version=1.8.0\u0026ruleId=S1698",
"isEnabledByDefault":  "True",
"isSuppressedInSource":  "False"
}
},
{
"ruleId":  "S1698",
"locations":  [
{
"analysisTarget":  [
{
"uri":  "akka.net\\src\\core\\Akka.Tests\\Actor\\ActorRefSpec.cs",
"region":  {
"startLine":  183,
"startColumn":  26,
"endLine":  183,
"endColumn":  28
}
}
]
}
],
"shortMessage":  "Consider using \"Equals\" if value comparison was intended.",
"fullMessage":  "Using the equality \"==\" and inequality \"!=\" operators to compare two objects generally works. The operators can be overloaded, and therefore the comparison can resolve to the appropriate method. However, when the operators are used on interface instances, then \"==\" resolves to reference equality, which may result in unexpected behavior  if implementing classes override \"Equals\". Similarly, when a class overrides \"Equals\", but instances are compared with non-overloaded \"==\", there is a high chance that value comparison was meant instead of the reference one.",
"properties":  {
"severity":  "Warning",
"warningLevel":  "1",
"defaultSeverity":  "Warning",
"title":  "\"==\" should not be used when \"Equals\" is overridden",
"category":  "Reliability",
"helpLink":  "http://vs.sonarlint.org/rules/index.html#version=1.8.0\u0026ruleId=S1698",
"isEnabledByDefault":  "True",
"isSuppressedInSource":  "False"
}
},
{
"ruleId":  "S1698",
"locations":  [
{
"analysisTarget":  [
{
"uri":  "akka.net\\src\\core\\Akka.Tests\\Actor\\ActorRefSpec.cs",
"region":  {
"startLine":  195,
"startColumn":  30,
"endLine":  195,
"endColumn":  32
}
}
]
}
],
"shortMessage":  "Consider using \"Equals\" if value comparison was intended.",
"fullMessage":  "Using the equality \"==\" and inequality \"!=\" operators to compare two objects generally works. The operators can be overloaded, and therefore the comparison can resolve to the appropriate method. However, when the operators are used on interface instances, then \"==\" resolves to reference equality, which may result in unexpected behavior  if implementing classes override \"Equals\". Similarly, when a class overrides \"Equals\", but instances are compared with non-overloaded \"==\", there is a high chance that value comparison was meant instead of the reference one.",
"properties":  {
"severity":  "Warning",
"warningLevel":  "1",
"defaultSeverity":  "Warning",
"title":  "\"==\" should not be used when \"Equals\" is overridden",
"category":  "Reliability",
"helpLink":  "http://vs.sonarlint.org/rules/index.html#version=1.8.0\u0026ruleId=S1698",
"isEnabledByDefault":  "True",
"isSuppressedInSource":  "False"
}
},
{
"ruleId":  "S1698",
"locations":  [
{
"analysisTarget":  [
{
"uri":  "akka.net\\src\\core\\Akka.Tests\\Actor\\ActorSystemTests.cs",
"region":  {
"startLine":  36,
"startColumn":  44,
"endLine":  36,
"endColumn":  46
}
}
]
}
],
"shortMessage":  "Consider using \"Equals\" if value comparison was intended.",
"fullMessage":  "Using the equality \"==\" and inequality \"!=\" operators to compare two objects generally works. The operators can be overloaded, and therefore the comparison can resolve to the appropriate method. However, when the operators are used on interface instances, then \"==\" resolves to reference equality, which may result in unexpected behavior  if implementing classes override \"Equals\". Similarly, when a class overrides \"Equals\", but instances are compared with non-overloaded \"==\", there is a high chance that value comparison was meant instead of the reference one.",
"properties":  {
"severity":  "Warning",
"warningLevel":  "1",
"defaultSeverity":  "Warning",
"title":  "\"==\" should not be used when \"Equals\" is overridden",
"category":  "Reliability",
"helpLink":  "http://vs.sonarlint.org/rules/index.html#version=1.8.0\u0026ruleId=S1698",
"isEnabledByDefault":  "True",
"isSuppressedInSource":  "False"
}
},
{
"ruleId":  "S1698",
"locations":  [
{
"analysisTarget":  [
{
"uri":  "akka.net\\src\\core\\Akka.Tests\\Actor\\DeathWatchSpec.cs",
"region":  {
"startLine":  172,
"startColumn":  87,
"endLine":  172,
"endColumn":  89
}
}
]
}
],
"shortMessage":  "Consider using \"Equals\" if value comparison was intended.",
"fullMessage":  "Using the equality \"==\" and inequality \"!=\" operators to compare two objects generally works. The operators can be overloaded, and therefore the comparison can resolve to the appropriate method. However, when the operators are used on interface instances, then \"==\" resolves to reference equality, which may result in unexpected behavior  if implementing classes override \"Equals\". Similarly, when a class overrides \"Equals\", but instances are compared with non-overloaded \"==\", there is a high chance that value comparison was meant instead of the reference one.",
"properties":  {
"severity":  "Warning",
"warningLevel":  "1",
"defaultSeverity":  "Warning",
"title":  "\"==\" should not be used when \"Equals\" is overridden",
"category":  "Reliability",
"helpLink":  "http://vs.sonarlint.org/rules/index.html#version=1.8.0\u0026ruleId=S1698",
"isEnabledByDefault":  "True",
"isSuppressedInSource":  "False"
}
},
{
"ruleId":  "S1698",
"locations":  [
{
"analysisTarget":  [
{
"uri":  "akka.net\\src\\core\\Akka.Tests\\Actor\\DeathWatchSpec.cs",
"region":  {
"startLine":  173,
"startColumn":  85,
"endLine":  173,
"endColumn":  87
}
}
]
}
],
"shortMessage":  "Consider using \"Equals\" if value comparison was intended.",
"fullMessage":  "Using the equality \"==\" and inequality \"!=\" operators to compare two objects generally works. The operators can be overloaded, and therefore the comparison can resolve to the appropriate method. However, when the operators are used on interface instances, then \"==\" resolves to reference equality, which may result in unexpected behavior  if implementing classes override \"Equals\". Similarly, when a class overrides \"Equals\", but instances are compared with non-overloaded \"==\", there is a high chance that value comparison was meant instead of the reference one.",
"properties":  {
"severity":  "Warning",
"warningLevel":  "1",
"defaultSeverity":  "Warning",
"title":  "\"==\" should not be used when \"Equals\" is overridden",
"category":  "Reliability",
"helpLink":  "http://vs.sonarlint.org/rules/index.html#version=1.8.0\u0026ruleId=S1698",
"isEnabledByDefault":  "True",
"isSuppressedInSource":  "False"
}
},
{
"ruleId":  "S1698",
"locations":  [
{
"analysisTarget":  [
{
"uri":  "akka.net\\src\\core\\Akka.Tests\\Actor\\DeathWatchSpec.cs",
"region":  {
"startLine":  175,
"startColumn":  82,
"endLine":  175,
"endColumn":  84
}
}
]
}
],
"shortMessage":  "Consider using \"Equals\" if value comparison was intended.",
"fullMessage":  "Using the equality \"==\" and inequality \"!=\" operators to compare two objects generally works. The operators can be overloaded, and therefore the comparison can resolve to the appropriate method. However, when the operators are used on interface instances, then \"==\" resolves to reference equality, which may result in unexpected behavior  if implementing classes override \"Equals\". Similarly, when a class overrides \"Equals\", but instances are compared with non-overloaded \"==\", there is a high chance that value comparison was meant instead of the reference one.",
"properties":  {
"severity":  "Warning",
"warningLevel":  "1",
"defaultSeverity":  "Warning",
"title":  "\"==\" should not be used when \"Equals\" is overridden",
"category":  "Reliability",
"helpLink":  "http://vs.sonarlint.org/rules/index.html#version=1.8.0\u0026ruleId=S1698",
"isEnabledByDefault":  "True",
"isSuppressedInSource":  "False"
}
},
{
"ruleId":  "S1698",
"locations":  [
{
"analysisTarget":  [
{
"uri":  "akka.net\\src\\core\\Akka.Tests\\Actor\\DeathWatchSpec.cs",
"region":  {
"startLine":  227,
"startColumn":  54,
"endLine":  227,
"endColumn":  56
}
}
]
}
],
"shortMessage":  "Consider using \"Equals\" if value comparison was intended.",
"fullMessage":  "Using the equality \"==\" and inequality \"!=\" operators to compare two objects generally works. The operators can be overloaded, and therefore the comparison can resolve to the appropriate method. However, when the operators are used on interface instances, then \"==\" resolves to reference equality, which may result in unexpected behavior  if implementing classes override \"Equals\". Similarly, when a class overrides \"Equals\", but instances are compared with non-overloaded \"==\", there is a high chance that value comparison was meant instead of the reference one.",
"properties":  {
"severity":  "Warning",
"warningLevel":  "1",
"defaultSeverity":  "Warning",
"title":  "\"==\" should not be used when \"Equals\" is overridden",
"category":  "Reliability",
"helpLink":  "http://vs.sonarlint.org/rules/index.html#version=1.8.0\u0026ruleId=S1698",
"isEnabledByDefault":  "True",
"isSuppressedInSource":  "False"
}
},
{
"ruleId":  "S1698",
"locations":  [
{
"analysisTarget":  [
{
"uri":  "akka.net\\src\\core\\Akka.Tests\\Actor\\DeathWatchSpec.cs",
"region":  {
"startLine":  229,
"startColumn":  54,
"endLine":  229,
"endColumn":  56
}
}
]
}
],
"shortMessage":  "Consider using \"Equals\" if value comparison was intended.",
"fullMessage":  "Using the equality \"==\" and inequality \"!=\" operators to compare two objects generally works. The operators can be overloaded, and therefore the comparison can resolve to the appropriate method. However, when the operators are used on interface instances, then \"==\" resolves to reference equality, which may result in unexpected behavior  if implementing classes override \"Equals\". Similarly, when a class overrides \"Equals\", but instances are compared with non-overloaded \"==\", there is a high chance that value comparison was meant instead of the reference one.",
"properties":  {
"severity":  "Warning",
"warningLevel":  "1",
"defaultSeverity":  "Warning",
"title":  "\"==\" should not be used when \"Equals\" is overridden",
"category":  "Reliability",
"helpLink":  "http://vs.sonarlint.org/rules/index.html#version=1.8.0\u0026ruleId=S1698",
"isEnabledByDefault":  "True",
"isSuppressedInSource":  "False"
}
},
{
"ruleId":  "S1698",
"locations":  [
{
"analysisTarget":  [
{
"uri":  "akka.net\\src\\core\\Akka.Tests\\Actor\\DeathWatchSpec.cs",
"region":  {
"startLine":  312,
"startColumn":  47,
"endLine":  312,
"endColumn":  49
}
}
]
}
],
"shortMessage":  "Consider using \"Equals\" if value comparison was intended.",
"fullMessage":  "Using the equality \"==\" and inequality \"!=\" operators to compare two objects generally works. The operators can be overloaded, and therefore the comparison can resolve to the appropriate method. However, when the operators are used on interface instances, then \"==\" resolves to reference equality, which may result in unexpected behavior  if implementing classes override \"Equals\". Similarly, when a class overrides \"Equals\", but instances are compared with non-overloaded \"==\", there is a high chance that value comparison was meant instead of the reference one.",
"properties":  {
"severity":  "Warning",
"warningLevel":  "1",
"defaultSeverity":  "Warning",
"title":  "\"==\" should not be used when \"Equals\" is overridden",
"category":  "Reliability",
"helpLink":  "http://vs.sonarlint.org/rules/index.html#version=1.8.0\u0026ruleId=S1698",
"isEnabledByDefault":  "True",
"isSuppressedInSource":  "False"
}
},
{
"ruleId":  "S1698",
"locations":  [
{
"analysisTarget":  [
{
"uri":  "akka.net\\src\\core\\Akka.Tests\\Actor\\ReceiveActorTests.cs",
"region":  {
"startLine":  31,
"startColumn":  95,
"endLine":  31,
"endColumn":  97
}
}
]
}
],
"shortMessage":  "Consider using \"Equals\" if value comparison was intended.",
"fullMessage":  "Using the equality \"==\" and inequality \"!=\" operators to compare two objects generally works. The operators can be overloaded, and therefore the comparison can resolve to the appropriate method. However, when the operators are used on interface instances, then \"==\" resolves to reference equality, which may result in unexpected behavior  if implementing classes override \"Equals\". Similarly, when a class overrides \"Equals\", but instances are compared with non-overloaded \"==\", there is a high chance that value comparison was meant instead of the reference one.",
"properties":  {
"severity":  "Warning",
"warningLevel":  "1",
"defaultSeverity":  "Warning",
"title":  "\"==\" should not be used when \"Equals\" is overridden",
"category":  "Reliability",
"helpLink":  "http://vs.sonarlint.org/rules/index.html#version=1.8.0\u0026ruleId=S1698",
"isEnabledByDefault":  "True",
"isSuppressedInSource":  "False"
}
},
{
"ruleId":  "S1698",
"locations":  [
{
"analysisTarget":  [
{
"uri":  "akka.net\\src\\core\\Akka.Tests\\Actor\\ReceiveActorTests_Become.cs",
"region":  {
"startLine":  29,
"startColumn":  86,
"endLine":  29,
"endColumn":  88
}
}
]
}
],
"shortMessage":  "Consider using \"Equals\" if value comparison was intended.",
"fullMessage":  "Using the equality \"==\" and inequality \"!=\" operators to compare two objects generally works. The operators can be overloaded, and therefore the comparison can resolve to the appropriate method. However, when the operators are used on interface instances, then \"==\" resolves to reference equality, which may result in unexpected behavior  if implementing classes override \"Equals\". Similarly, when a class overrides \"Equals\", but instances are compared with non-overloaded \"==\", there is a high chance that value comparison was meant instead of the reference one.",
"properties":  {
"severity":  "Warning",
"warningLevel":  "1",
"defaultSeverity":  "Warning",
"title":  "\"==\" should not be used when \"Equals\" is overridden",
"category":  "Reliability",
"helpLink":  "http://vs.sonarlint.org/rules/index.html#version=1.8.0\u0026ruleId=S1698",
"isEnabledByDefault":  "True",
"isSuppressedInSource":  "False"
}
},
{
"ruleId":  "S1698",
"locations":  [
{
"analysisTarget":  [
{
"uri":  "akka.net\\src\\core\\Akka.Tests\\Actor\\ReceiveActorTests_Become.cs",
"region":  {
"startLine":  37,
"startColumn":  85,
"endLine":  37,
"endColumn":  87
}
}
]
}
],
"shortMessage":  "Consider using \"Equals\" if value comparison was intended.",
"fullMessage":  "Using the equality \"==\" and inequality \"!=\" operators to compare two objects generally works. The operators can be overloaded, and therefore the comparison can resolve to the appropriate method. However, when the operators are used on interface instances, then \"==\" resolves to reference equality, which may result in unexpected behavior  if implementing classes override \"Equals\". Similarly, when a class overrides \"Equals\", but instances are compared with non-overloaded \"==\", there is a high chance that value comparison was meant instead of the reference one.",
"properties":  {
"severity":  "Warning",
"warningLevel":  "1",
"defaultSeverity":  "Warning",
"title":  "\"==\" should not be used when \"Equals\" is overridden",
"category":  "Reliability",
"helpLink":  "http://vs.sonarlint.org/rules/index.html#version=1.8.0\u0026ruleId=S1698",
"isEnabledByDefault":  "True",
"isSuppressedInSource":  "False"
}
},
{
"ruleId":  "S1698",
"locations":  [
{
"analysisTarget":  [
{
"uri":  "akka.net\\src\\core\\Akka.Tests\\Actor\\Stash\\ActorWithStashSpec.cs",
"region":  {
"startLine":  299,
"startColumn":  52,
"endLine":  299,
"endColumn":  54
}
}
]
}
],
"shortMessage":  "Consider using \"Equals\" if value comparison was intended.",
"fullMessage":  "Using the equality \"==\" and inequality \"!=\" operators to compare two objects generally works. The operators can be overloaded, and therefore the comparison can resolve to the appropriate method. However, when the operators are used on interface instances, then \"==\" resolves to reference equality, which may result in unexpected behavior  if implementing classes override \"Equals\". Similarly, when a class overrides \"Equals\", but instances are compared with non-overloaded \"==\", there is a high chance that value comparison was meant instead of the reference one.",
"properties":  {
"severity":  "Warning",
"warningLevel":  "1",
"defaultSeverity":  "Warning",
"title":  "\"==\" should not be used when \"Equals\" is overridden",
"category":  "Reliability",
"helpLink":  "http://vs.sonarlint.org/rules/index.html#version=1.8.0\u0026ruleId=S1698",
"isEnabledByDefault":  "True",
"isSuppressedInSource":  "False"
}
}
]
}
