$ErrorActionPreference = "Stop"

function NormalizeAndSplitSarifReport
{
  param ([string]$sarifReportPath)

  # Load the JSON, working around CovertFrom-Json max size limitation
  # See http://stackoverflow.com/questions/16854057/convertfrom-json-max-length
  $contents = Get-Content $sarifReportPath -Raw
  [void][System.Reflection.Assembly]::LoadWithPartialName("System.Web.Extensions")
  $jsonserial= New-Object -TypeName System.Web.Script.Serialization.JavaScriptSerializer
  $jsonserial.MaxJsonLength = 100000000
  $json = $jsonserial.DeserializeObject($contents)

  # Is there any issue?
  If ($json.issues) {
    # The first argument of -replace is a regex (which needs to be backslash escaped), the 2nd one is a string (no backslash escaping)
    $pathPrefix = (($pwd.Path + '\') -replace '\\', '\\')

    # Remove the common absolute path prefix
    $json.issues.locations.analysisTarget | Foreach-Object { $_.uri = $_.uri -replace $pathPrefix, '' }

    # Filter, Sort & Group issues to get a stable SARIF report
    # AD0001's stack traces in the message are unsable
    # CS???? messages are not of interest
    $issuesByRule = $json.issues |
      Where-Object { $_.ruleId -match '^S[0-9]+$' } |                             # Keep SonarLint rules only
      Sort-Object @{Expression={$_.locations.analysisTarget.uri}},                # Regroup same file issues
                  @{Expression={$_.locations.analysisTarget.region.startLine}},   # Sort by source position
                  @{Expression={$_.locations.analysisTarget.region.startColumn}}, # .. idem
                  @{Expression={$_.locations.analysisTarget.region.endLine}},     # .. idem
                  @{Expression={$_.locations.analysisTarget.region.endColumn}},   # .. idem
                  @{Expression={$_.shortMessage}} |                               # .. and finally by message
      Group-Object @{Expression={$_.ruleId}}                                      # Group issues generated by the same rule

    # Split the SARIF report into 1 per rule and remove leading spaces
    $file = [System.IO.FileInfo]$sarifReportPath
    $issuesByRule |
      Foreach-Object {
        $json.issues = $_.Group
        $path = (Join-Path $file.DirectoryName $file.BaseName) + '-' + $_.Name + $file.Extension
        $lines = ((ConvertTo-Json $json -Depth 42) -split "`r`n") |  # Convert JSON to String and split lines
          Foreach-Object { $_.TrimStart() }                          # Remove leading spaces
        Set-Content $path $lines
    }
  }

  # Delete the original monolithic SARIF report
  Remove-Item $sarifReportPath
}

# Normalize & overwrite all *.json SARIF files found under the "actual" folder
Get-ChildItem actual -filter *.json -recurse |
  Foreach-Object { NormalizeAndSplitSarifReport($_.FullName) }
