/*
 * SonarLint for Visual Studio
 * Copyright (C) 2015 SonarSource
 * sonarqube@googlegroups.com
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 3 of the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this program; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02
 */

using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.Diagnostics;
using System;
using System.Collections.Concurrent;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Runtime.CompilerServices;
using CS = Microsoft.CodeAnalysis.CSharp;
using VB = Microsoft.CodeAnalysis.VisualBasic;

namespace SonarLint.Helpers
{
    public static class DiagnosticAnalyzerContextHelper
    {
        #region Register*ActionInNonGenerated

        public static void RegisterSyntaxNodeActionInNonGenerated<TLanguageKindEnum>(
            this AnalysisContext context,
            Action<SyntaxNodeAnalysisContext> action,
            params TLanguageKindEnum[] syntaxKinds) where TLanguageKindEnum : struct
        {
            context.RegisterSyntaxNodeAction(
                c =>
                {
                    if (!c.Node.SyntaxTree.IsGenerated(c.SemanticModel.Compilation))
                    {
                        action(c);
                    }
                },
                syntaxKinds);
        }

        public static void RegisterSyntaxTreeActionInNonGenerated(
            this AnalysisContext context,
            Action<SyntaxTreeAnalysisContext> action)
        {
            context.RegisterCompilationStartAction(
                csac =>
                {
                    csac.RegisterSyntaxTreeAction(
                        c =>
                        {
                            if (!c.Tree.IsGenerated(csac.Compilation))
                            {
                                action(c);
                            }
                        });
                });
        }

        public static void RegisterCodeBlockStartActionInNonGenerated<TLanguageKindEnum>(
            this AnalysisContext context,
            Action<CodeBlockStartAnalysisContext<TLanguageKindEnum>> action) where TLanguageKindEnum : struct
        {
            context.RegisterCodeBlockStartAction<TLanguageKindEnum>(
                c =>
                {
                    if (!c.CodeBlock.SyntaxTree.IsGenerated(c.SemanticModel.Compilation))
                    {
                        action(c);
                    }
                });
        }

        #endregion

        #region ReportDiagnosticIfNonGenerated

        public static void ReportDiagnosticIfNonGenerated(this CompilationAnalysisContext context, Diagnostic diagnostic,
            Compilation compilation)
        {
            if (!diagnostic.Location.SourceTree.IsGenerated(compilation))
            {
                context.ReportDiagnostic(diagnostic);
            }
        }

        public static void ReportDiagnosticIfNonGenerated(this SymbolAnalysisContext context, Diagnostic diagnostic,
            Compilation compilation)
        {
            if (!diagnostic.Location.SourceTree.IsGenerated(compilation))
            {
                context.ReportDiagnostic(diagnostic);
            }
        }

        #endregion

        #region SyntaxTree.IsGenerated

        private static readonly ConditionalWeakTable<Compilation, ConcurrentDictionary<SyntaxTree, bool>> Cache
            = new ConditionalWeakTable<Compilation, ConcurrentDictionary<SyntaxTree, bool>>();

        private static bool IsGenerated(this SyntaxTree tree, Compilation compilation)
        {
            if (tree == null)
            {
                return false;
            }

            //this is locking if the compilation is not present in the Cache.
            var cache = Cache.GetOrCreateValue(compilation);
            bool result;
            if (cache.TryGetValue(tree, out result))
            {
                return result;
            }

            var generated = tree.HasGeneratedFileName() ||
                            tree.HasAutoGeneratedComment() ||
                            tree.HasGeneratedCodeAttribute();
            cache.TryAdd(tree, generated);
            return generated;
        }

        #endregion

        #region Utilities

        private static readonly string[] GeneratedFileParts =
            {
                ".g.",
                ".generated.",
                ".designer.",
                ".generated.",
                "_generated.",
                "temporarygeneratedfile_"
            };
        private static readonly string[] AutoGeneratedCommentParts =
            {
                "<auto-generated>",
                "<autogenerated>"
            };
        private static readonly string[] GeneratedCodeAttributes =
            {
                "DebuggerNonUserCode",
                "DebuggerNonUserCodeAttribute",
                "GeneratedCode",
                "GeneratedCodeAttribute",
                "ExcludeFromCodeCoverage",
                "ExcludeFromCodeCoverageAttribute",
                "CompilerGenerated",
                "CompilerGeneratedAttribute"
            };

        private static bool HasGeneratedFileName(this SyntaxTree tree)
        {
            if (string.IsNullOrEmpty(tree.FilePath))
            {
                return false;
            }

            var fileName = Path.GetFileName(tree.FilePath).ToLowerInvariant();
            return GeneratedFileParts.Any(part => fileName.Contains(part));
        }

        private static bool HasAutoGeneratedComment(this SyntaxTree tree)
        {
            var root = tree.GetRoot();
            if (root == null)
            {
                return false;
            }

            var firstToken = root.GetFirstToken(true);

            if (!firstToken.HasLeadingTrivia)
            {
                return false;
            }

            var trivia = firstToken.LeadingTrivia;

            var comments = trivia.Where(t => CommentKinds[t.Language].Contains(t.RawKind));
            return comments.Any(t =>
            {
                var commentText = t.ToString().ToLowerInvariant();
                return AutoGeneratedCommentParts.Any(part => commentText.Contains(part));
            });
        }

        private static bool HasGeneratedCodeAttribute(this SyntaxTree tree)
        {
            var attributeNames = tree.GetRoot()
                .DescendantNodesAndSelf()
                .Select(
                    node =>
                    {
                        var csAttribute = node as CS.Syntax.AttributeSyntax;
                        if (csAttribute != null)
                        {
                            return csAttribute.Name.ToString();
                        }

                        var vbAttribute = node as VB.Syntax.AttributeSyntax;
                        if (vbAttribute != null)
                        {
                            return vbAttribute.Name.ToString();
                        }

                        return null;
                    })
                .Where(name => name != null);

            return attributeNames.Any(attributeName =>
                GeneratedCodeAttributes.Any(generatedCodeAttribute =>
                    attributeName.EndsWith(generatedCodeAttribute, StringComparison.InvariantCulture)));
        }

        #endregion

        private static readonly IDictionary<string, IEnumerable<int>> CommentKinds =
            new Dictionary<string, IEnumerable<int>>
            {
                {
                    LanguageNames.CSharp,
                    new []
                    {
                        (int)CS.SyntaxKind.SingleLineCommentTrivia,
                        (int)CS.SyntaxKind.MultiLineCommentTrivia
                    }
                },
                {
                    LanguageNames.VisualBasic,
                    new []
                    {
                        (int)VB.SyntaxKind.CommentTrivia
                    }
                }
            };
    }
}
